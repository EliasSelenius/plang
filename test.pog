
namespace MyTestNamespace;

declare void goo();

OpaqueType* ot;

type OpaqueType;
type func = void(OpaqueType*);

const Foo = 0x1FFaBC09;

void take_opaque(OpaqueType* ot) {
    print("Hello, Opaque\n");
}

void dawdawdwa(void*(char*) f) {
    float32* ape = f("Mario");
    print(ape);
}

void reg(func f) {
    print("reg\n");
    f(null);
}

type SomeProc = void(void*(char*), uint32);

void SomeProcImpl(void*(char*) f, uint32 n) {
    print("SomeNumber: ", n, " ");
    float32* x = f("Mario");
    print(@x, " at ", x);
}

void* SomeProcImplArg(char* name) {
    print(name);
    float32* res = alloc float32;
    @res = 3.14;

    return res;
}

struct ProcPtrs {
    void() Hello;
    void()(char*) Hey;
}

char* (int32) my_proc;

type LargeProcPtr = char*(void(int32), float32)(float32)(void());


int32 main() {

    struct LocalStructTest {
        char* name;
    }

    type LocalTypedef; // = LocalStructTest;


    const LocalConstant = 12;
    let i = LocalConstant;

    OtherNamespace.hello();

    {
        SomeProc p = SomeProcImpl;
        p(SomeProcImplArg, 42);

        print("\n\n");
    }

    {
        void() Hello;
        let i = alloc void();
        let j = i as void(char*);
        let size = sizeof char*(uint32);
    }

    let f = Foo;
    f = 0x10;

    f = 0x;

    // void(func) r = reg;
    // r(take_opaque);
    reg(take_opaque);


    print("Hello, Sailor!\n");

    Test t;
    t.x = 543.32;

    print("Hello ", f, 5, " ", t.x, "yes");

    {
        print("\n\n");
        for uint32 i in 0 .. 10 {
            print(i, "\n");
        }
    }

    return 0;
}


struct Test {
    float32 x, y, z, w;
    float64 i, j, k;
    OpaqueType* o1, o2;
}

Test modifyTest(Test test) {
    test.x = 1;
    return test;
}

Test modifyTest(Test test, Test test2) {
    test.x = test2.x;
    return test;
}

Test other(Test test) {
    return test;
}

void testByPointer(Test* test) {
    test.i = 10;
}