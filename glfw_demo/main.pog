
int shaderInfoLogSize = 1024;
char* shaderInfoLog = null;

GLFWwindow* window;
uint shader;
uint vbo;
uint ebo;
uint vao;

vec2 cam_pos;
float cam_zoom = 1f;

Mesh* meshes;

declare double sin(double t);
declare double cos(double t);
declare float sinf(float t);
declare float cosf(float t);

const PI = 3.141599;
const TAU = PI * 2;

let clamp(float t, float min, float max) {
    return t < min ? min : t > max ? max : t;
}

struct Mesh {
    uint vao;
    uint vbo;
    uint ebo;

    int elementsCount;
}

void drawMesh(uint vao, int elementsCount) {
    glBindVertexArray(vao);
    glDrawElements(GL_TRIANGLES, elementsCount, GL_UNSIGNED_INT, null);
    glBindVertexArray(0u);
}

void drawMesh(Mesh mesh) {
    drawMesh(mesh.vao, mesh.elementsCount);
}

void drawMeshVertices(Mesh mesh, int vertsCount) {
    glBindVertexArray(mesh.vao);
    glDrawArrays(GL_POINTS, 0, vertsCount);
    glBindVertexArray(0u);
}

Mesh createMesh(vec2* verts, uint vertsCount, uint* inds, uint indsCount) {
    Mesh mesh;
    mesh.elementsCount = indsCount as int;

    glGenVertexArrays(1, *mesh.vao);
    glBindVertexArray(mesh.vao);

    glGenBuffers(1, *mesh.vbo);
    glBindBuffer(GL_ARRAY_BUFFER , mesh.vbo);
    glBufferData(GL_ARRAY_BUFFER, (sizeof(vec2) * vertsCount) as long, verts, GL_STATIC_DRAW);

    glGenBuffers(1, *mesh.ebo);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, mesh.ebo);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, (sizeof(uint) * indsCount) as long, inds, GL_STATIC_DRAW);

    glEnableVertexAttribArray(0u);
    glVertexAttribPointer(0u, 2, GL_FLOAT, false as byte, 8, null);

    glBindVertexArray(0u);

    return mesh;
}

void loadGL() {

    load_opengl(glfwGetProcAddress);

    shaderInfoLog = malloc(shaderInfoLogSize as ulong);

    glfwSetFramebufferSizeCallback(window, GLFWframebuffersizefunCallback);
    glfwSetScrollCallback(window, GLFWscrollfunCallback);

    shader = createShader();
    glUseProgram(shader);

    glPointSize(30.0);

    meshes = malloc(6u * sizeof Mesh);
}

Mesh genPlanet() {
    let res = 36;
    uint vertsCount = res as uint + 1u;
    vec2 verts[vertsCount];

    int i = 1;
    while i < res + 1 {
        float angle = (i as float) * TAU / res;
        verts[i].x = cosf(angle);
        verts[i].y = sinf(angle);
        ++i;
    }

    uint indsCount = (res as uint) * 3u;
    uint inds[indsCount];
    i = 0;
    uint v = 1u;
    while i < indsCount {
        inds[i] = 0u;
        inds[i+1] = v++;
        inds[i+2] = v;
        i += 3;
    }

    inds[i - 1] = 1u;

    return createMesh(verts, vertsCount, inds, indsCount);
}

void GLFWframebuffersizefunCallback(GLFWwindow* window, int w, int h) {
    println("Resize");
    let aspect = h as float / w;
    glUniform1f(glGetUniformLocation(shader, "aspect"), aspect);
}

void GLFWscrollfunCallback(GLFWwindow* window, double x, double y) {
    cam_zoom -= cam_zoom * (y as float) * 0.1;
    cam_zoom = clamp(cam_zoom, 1.0, 100.0);
}

uint makeShader(uint program, uint _type, char* code) {
    let s = glCreateShader(_type);
    glShaderSource(s, 1, *code, null); // null assumes null-terminated string
    glAttachShader(program, s);
    return s;
}


uint createShader() {
    let program = glCreateProgram();

    char* vertCode = fileread("shaders/vert.glsl");
    char* fragCode = fileread("shaders/frag.glsl");
    let v = makeShader(program, GL_VERTEX_SHADER, vertCode);
    let f = makeShader(program, GL_FRAGMENT_SHADER, fragCode);

    glLinkProgram(program);

    glDetachShader(program, v);
    glDeleteShader(v);

    glDetachShader(program, f);
    glDeleteShader(f);

    { // check status
        int status;
        glGetProgramiv(program, GL_LINK_STATUS, *status);

        if status == 0 {
            int len;
            glGetProgramInfoLog(program, shaderInfoLogSize, *len, shaderInfoLog);
            println(shaderInfoLog);
        }
    }

    return program;
}

struct vec2 {
    float x;
    float y;
}

int key(char c) {
    return glfwGetKey(window, c as int);
}


let main() {


    if !glfwInit() {
        return -1;
    }


    let width = 1600;
    let height = 900;
    window = glfwCreateWindow(width, height, "Window", null, null);
    if !window {
        glfwTerminate();
        return -1;
    }

    glfwMakeContextCurrent(window);

    loadGL();

    glClearColor(0.0, 1.0, 1.0, 1.0);

    let error = glGetError();
    if error {
        printf("%s %d\n", "OpenGL error.", error);
    }


    let planet = genPlanet();

    while !glfwWindowShouldClose(window) {

        vec2 wasd;
        wasd.x = 0f;
        wasd.y = 0f;
        if key('W') { wasd.y += 1f; }
        if key('S') { wasd.y -= 1f; }
        if key('A') { wasd.x -= 1f; }
        if key('D') { wasd.x += 1f; }
        // if (wasd.x != 0.0f or wasd.y != 0.0f) {
        //     vec2Normalize(&wasd);
        // }

        cam_pos.x += wasd.x * 0.05 * cam_zoom;
        cam_pos.y += wasd.y * 0.05 * cam_zoom;

        glUniform2f(glGetUniformLocation(shader, "cam_pos"), cam_pos.x, cam_pos.y);
        glUniform1f(glGetUniformLocation(shader, "zoom"), cam_zoom);

        int w;
        int h;
        glfwGetFramebufferSize(window, *w, *h);
        glViewport(0, 0, w, h);

        glClear(GL_COLOR_BUFFER_BIT);

        drawMesh(planet);

        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    glfwDestroyWindow(window);
    glfwTerminate();
}
