
declare int glfwInit();
declare void glfwTerminate();
declare void* glfwCreateWindow(int width, int height, char* title, void* monitor, void* share);
declare void glfwPollEvents();
declare void glfwDestroyWindow(void* window);
declare void glfwSwapBuffers(void* window);
declare int glfwWindowShouldClose(void* window);
declare void glfwMakeContextCurrent(void* window);
declare void* glfwGetProcAddress(char* name);

// declare void glClearColor(float r, float g, float b, float a);
// declare void glClear(int bitfield);

// use global variable for now, as we dont have constants nor defines nor enums
let GL_COLOR_BUFFER_BIT = 16384; // 0x00004000

void* glClearColor;
void* glClear;
// void(float, float, float, float) glClearColor;
// void(int) glClear;

void loadGL() {
    glClearColor = glfwGetProcAddress("glClearColor");
    glClear      = glfwGetProcAddress("glClear");
}

struct Shader {
    uint id;
    void() func;
}

Shader*() shaderRetrivalFunc;

let invoke(void() my_voidFunction) {
    my_voidFunction();
}

declare void printf(char* format, char* arg1);

let sayHello() {
    printf("%s\n", "Hello");
}

let main() {
    if (!glfwInit()) {
        return -1;
    }


    sayHello();
    // invoke(sayHello);

    // let srf = shaderRetrivalFunc();



    int width = 1600;
    let height = 900;
    let window = glfwCreateWindow(width, height, "title", null, null);
    if (!window) {
        glfwTerminate();
        return -1;
    }

    glfwMakeContextCurrent(window);

    loadGL();

    // void func(char**) myFunction = getString;
    // void(char**, void()(int)) myFunction = getString;

    glClearColor(0.0, 1.0, "dawd", 1.0);

    while (!glfwWindowShouldClose(window)) {

        glClear(GL_COLOR_BUFFER_BIT);

        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    glfwDestroyWindow(window);
    glfwTerminate();
}