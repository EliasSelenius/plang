
declare int glfwInit();
declare void glfwTerminate();
declare void* glfwCreateWindow(int width, int height, char* title, void* monitor, void* share);
declare void glfwPollEvents();
declare void glfwDestroyWindow(void* window);
declare void glfwSwapBuffers(void* window);
declare int glfwWindowShouldClose(void* window);
declare void glfwMakeContextCurrent(void* window);
declare void* glfwGetProcAddress(char* name);


// use global variable for now, as we dont have constants nor defines nor enums
let GL_COLOR_BUFFER_BIT = 16384; // 0x00004000
uint GL_VERTEX_SHADER = 0;
uint GL_FRAGMENT_SHADER = 0;

void(float, float, float, float) glClearColor;
void(int) glClear;

// shaders
uint(uint) glCreateShader;
void(uint, int, char**, int*) glShaderSource;
void(uint, uint) glAttachShader;
void(uint, uint) glDetachShader;
void(uint) glDeleteShader;
uint() glCreateProgram;
void(uint) glLinkProgram;


void loadGL() {
    glClearColor = glfwGetProcAddress("glClearColor");
    glClear      = glfwGetProcAddress("glClear");

    glCreateShader = glfwGetProcAddress("glCreateShader");
    glShaderSource = glfwGetProcAddress("glShaderSource");
    glAttachShader = glfwGetProcAddress("glAttachShader");
    glDetachShader = glfwGetProcAddress("glDetachShader");
    glDeleteShader = glfwGetProcAddress("glDeleteShader");
    glCreateProgram = glfwGetProcAddress("glCreateProgram");
    glLinkProgram = glfwGetProcAddress("glLinkProgram");
}

uint makeShader(uint program, uint type, char* code) {
    let s = glCreateShader(type);
    glShaderSource(s, 1, *code, null); // null assumes null-terminated string
    glAttachShader(program, s);
    return s;
}

uint createShader() {
    let program = glCreateProgram();

    char* vertCode = fileread("shaders/vert.glsl");
    char* fragCode = fileread("shaders/frag.glsl");
    let v = makeShader(program, GL_VERTEX_SHADER, vertCode);
    let f = makeShader(program, GL_FRAGMENT_SHADER, fragCode);

    glLinkProgram(program);

    glDetachShader(program, v);
    glDeleteShader(v);

    glDetachShader(program, f);
    glDeleteShader(f);

    return program;
}

let main() {
    if (!glfwInit()) {
        return -1;
    }

    let width = 1600;
    let height = 900;
    let window = glfwCreateWindow(width, height, "Window", null, null);
    if (!window) {
        glfwTerminate();
        return -1;
    }

    glfwMakeContextCurrent(window);

    loadGL();

    let shader = createShader();

    glClearColor(0.0, 1.0, 1.0, 1.0);

    while (!glfwWindowShouldClose(window)) {

        glClear(GL_COLOR_BUFFER_BIT);

        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    glfwDestroyWindow(window);
    glfwTerminate();
}
