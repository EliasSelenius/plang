
int shaderInfoLogSize = 1024;
char* shaderInfoLog = null;

GLFWwindow* window;
uint shader;
uint vbo;

vec2 cam_pos;
float cam_zoom = 1f;

void loadGL() {

    load_opengl();

    shaderInfoLog = malloc(shaderInfoLogSize as ulong);

    glfwSetFramebufferSizeCallback(window, GLFWframebuffersizefunCallback);
    glfwSetScrollCallback(window, GLFWscrollfunCallback);
    
    shader = createShader();
    glUseProgram(shader);

    glGenBuffers(1, *vbo);
    glBindBuffer(GL_ARRAY_BUFFER , vbo);
}

void GLFWframebuffersizefunCallback(GLFWwindow* window, int w, int h) {
    println("Resize");
    let aspect = h as float / w;
    glUniform1f(glGetUniformLocation(shader, "aspect"), aspect);
}

void GLFWscrollfunCallback(GLFWwindow* window, double x, double y) {
    cam_zoom += y as float;
}

uint makeShader(uint program, uint _type, char* code) {
    let s = glCreateShader(_type);
    glShaderSource(s, 1, *code, null); // null assumes null-terminated string
    glAttachShader(program, s);
    return s;
}


uint createShader() {
    let program = glCreateProgram();

    char* vertCode = fileread("shaders/vert.glsl");
    char* fragCode = fileread("shaders/frag.glsl");
    let v = makeShader(program, GL_VERTEX_SHADER, vertCode);
    let f = makeShader(program, GL_FRAGMENT_SHADER, fragCode);

    glLinkProgram(program);

    glDetachShader(program, v);
    glDeleteShader(v);

    glDetachShader(program, f);
    glDeleteShader(f);

    { // check status
        int status;
        glGetProgramiv(program, GL_LINK_STATUS, *status);

        if (status == 0) {
            int len;
            glGetProgramInfoLog(program, shaderInfoLogSize, *len, shaderInfoLog);
            println(shaderInfoLog);
        }
    }

    return program;
}

struct vec2 {
    float x;
    float y;
}

int key(char* str) {
    return @str as int;
}

let main() {
    if (!glfwInit()) {
        return -1;
    }


    let width = 1600;
    let height = 900;
    window = glfwCreateWindow(width, height, "Window", null, null);
    if (!window) {
        glfwTerminate();
        return -1;
    }

    glfwMakeContextCurrent(window);

    loadGL();

    glClearColor(0.0, 1.0, 1.0, 1.0);

    let error = glGetError();
    if (error) {
        printf("%s %d\n", "OpenGL error.", error);
    }

    while (!glfwWindowShouldClose(window)) {

        vec2 wasd;
        wasd.x = 0f;
        wasd.y = 0f;
        if (glfwGetKey(window, key("W"))) { wasd.y += 1f; }
        if (glfwGetKey(window, key("S"))) { wasd.y -= 1f; }
        if (glfwGetKey(window, key("A"))) { wasd.x -= 1f; }
        if (glfwGetKey(window, key("D"))) { wasd.x += 1f; }
        // if (wasd.x != 0.0f or wasd.y != 0.0f) {
        //     vec2Normalize(&wasd);
        // }

        cam_pos.x += wasd.x * 0.1;
        cam_pos.y += wasd.y * 0.1;

        glUniform2f(glGetUniformLocation(shader, "cam_pos"), cam_pos.x, cam_pos.y);
        glUniform1f(glGetUniformLocation(shader, "zoom"), cam_zoom);

        int w;
        int h;
        glfwGetFramebufferSize(window, *w, *h);
        glViewport(0, 0, w, h);

        glClear(GL_COLOR_BUFFER_BIT);

        glDrawArrays(GL_TRIANGLES, 0, 3);

        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    glfwDestroyWindow(window);
    glfwTerminate();
}
