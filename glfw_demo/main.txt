
// declare int glfwInit();
// declare void glfwTerminate();
// declare void* glfwCreateWindow(int width, int height, char* title, void* monitor, void* share);
// declare void glfwPollEvents();
// declare void glfwDestroyWindow(void* window);
// declare void glfwSwapBuffers(void* window);
// declare int glfwWindowShouldClose(void* window);
// declare void glfwMakeContextCurrent(void* window);
// declare void* glfwGetProcAddress(char* name);


// use global variable for now, as we dont have constants nor defines nor enums
uint GL_COLOR_BUFFER_BIT = 16384u; // 0x00004000
uint GL_VERTEX_SHADER = 35633u;
uint GL_FRAGMENT_SHADER = 35632u;
uint GL_TRIANGLES = 4u; //0x0004
uint GL_LINK_STATUS = 35714u; // 0x8B82

void(float, float, float, float) glClearColor;
void(uint) glClear;
uint() glGetError;

// shaders
uint(uint) glCreateShader;
void(uint, int, char**, int*) glShaderSource;
void(uint, uint) glAttachShader;
void(uint, uint) glDetachShader;
void(uint) glDeleteShader;
uint() glCreateProgram;
void(uint) glLinkProgram;
void(uint) glUseProgram;
void(uint, uint, int*) glGetProgramiv;
void(uint, uint, int*, char*) glGetProgramInfoLog;

void(uint, int, int) glDrawArrays;

uint shaderInfoLogSize = 1024u;
char* shaderInfoLog = null;

void loadGL() {
    glClearColor = glfwGetProcAddress("glClearColor");
    glClear      = glfwGetProcAddress("glClear");
    glGetError = glfwGetProcAddress("glGetError");

    glCreateShader = glfwGetProcAddress("glCreateShader");
    glShaderSource = glfwGetProcAddress("glShaderSource");
    glAttachShader = glfwGetProcAddress("glAttachShader");
    glDetachShader = glfwGetProcAddress("glDetachShader");
    glDeleteShader = glfwGetProcAddress("glDeleteShader");
    glCreateProgram = glfwGetProcAddress("glCreateProgram");
    glLinkProgram = glfwGetProcAddress("glLinkProgram");
    glUseProgram = glfwGetProcAddress("glUseProgram");
    glGetProgramiv = glfwGetProcAddress("glGetProgramiv");
    glGetProgramInfoLog = glfwGetProcAddress("glGetProgramInfoLog");

    glDrawArrays = glfwGetProcAddress("glDrawArrays");

    shaderInfoLog = malloc(shaderInfoLogSize);
}

uint makeShader(uint program, uint _type, char* code) {
    let s = glCreateShader(_type);
    glShaderSource(s, 1, *code, null); // null assumes null-terminated string
    glAttachShader(program, s);
    return s;
}

uint createShader() {
    let program = glCreateProgram();

    char* vertCode = fileread("shaders/vert.glsl");
    char* fragCode = fileread("shaders/frag.glsl");
    let v = makeShader(program, GL_VERTEX_SHADER, vertCode);
    let f = makeShader(program, GL_FRAGMENT_SHADER, fragCode);

    glLinkProgram(program);

    glDetachShader(program, v);
    glDeleteShader(v);

    glDetachShader(program, f);
    glDeleteShader(f);

    { // check status
        int status;
        glGetProgramiv(program, GL_LINK_STATUS, *status);

        if (status == 0) {
            int len;
            glGetProgramInfoLog(program, shaderInfoLogSize, *len, shaderInfoLog);
            println(shaderInfoLog);
        }
    }

    return program;
}

let main() {
    if (!glfwInit()) {
        return -1;
    }

    let width = 1600;
    let height = 900;
    let window = glfwCreateWindow(width, height, "Window", null, null);
    if (!window) {
        glfwTerminate();
        return -1;
    }

    glfwMakeContextCurrent(window);

    loadGL();

    let shader = createShader();
    glUseProgram(shader);

    glClearColor(0.0, 1.0, 1.0, 1.0);

    let error = glGetError();
    if (error) {
        printf("%s %d\n", "OpenGL error.", error);
    }

    while (!glfwWindowShouldClose(window)) {

        glClear(GL_COLOR_BUFFER_BIT);

        glDrawArrays(GL_TRIANGLES, 0, 3);

        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    glfwDestroyWindow(window);
    glfwTerminate();
}
