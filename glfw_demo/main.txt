

const GL_COLOR_BUFFER_BIT = 16384u; // 0x00004000
const GL_VERTEX_SHADER = 35633u;
const GL_FRAGMENT_SHADER = 35632u;
const GL_TRIANGLES = 4u; //0x0004
const GL_LINK_STATUS = 35714u; // 0x8B82


int shaderInfoLogSize = 1024;
char* shaderInfoLog = null;


void loadGL() {

    load_opengl();

    shaderInfoLog = malloc(shaderInfoLogSize as ulong);
}

uint makeShader(uint program, uint _type, char* code) {
    let s = glCreateShader(_type);
    glShaderSource(s, 1, *code, null); // null assumes null-terminated string
    glAttachShader(program, s);
    return s;
}

uint createShader() {
    let program = glCreateProgram();

    char* vertCode = fileread("shaders/vert.glsl");
    char* fragCode = fileread("shaders/frag.glsl");
    let v = makeShader(program, GL_VERTEX_SHADER, vertCode);
    let f = makeShader(program, GL_FRAGMENT_SHADER, fragCode);

    glLinkProgram(program);

    glDetachShader(program, v);
    glDeleteShader(v);

    glDetachShader(program, f);
    glDeleteShader(f);

    { // check status
        int status;
        glGetProgramiv(program, GL_LINK_STATUS, *status);

        if (status == 0) {
            int len;
            glGetProgramInfoLog(program, shaderInfoLogSize, *len, shaderInfoLog);
            println(shaderInfoLog);
        }
    }

    return program;
}

let main() {
    if (!glfwInit()) {
        return -1;
    }


    let width = 1600;
    let height = 900;
    let window = glfwCreateWindow(width, height, "Window", null, null);
    if (!window) {
        glfwTerminate();
        return -1;
    }

    glfwMakeContextCurrent(window);

    loadGL();

    let shader = createShader();
    glUseProgram(shader);

    glClearColor(0.0, 1.0, 1.0, 1.0);

    let error = glGetError();
    if (error) {
        printf("%s %d\n", "OpenGL error.", error);
    }

    while (!glfwWindowShouldClose(window)) {

        int w;
        int h;
        glfwGetFramebufferSize(window, *w, *h);
        glViewport(0, 0, w, h);

        glClear(GL_COLOR_BUFFER_BIT);

        glDrawArrays(GL_TRIANGLES, 0, 3);

        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    glfwDestroyWindow(window);
    glfwTerminate();
}
