

const ListStartingCapacity = 2;

struct List {
    uint32 stride;
    uint32 capacity;
    uint32 length;
}

void* createList(uint32 stride) {
    List* head = malloc(sizeof List + stride * ListStartingCapacity);
    head.stride = stride;
    head.capacity = ListStartingCapacity;
    head.length = 0;
    return *head[1];
}

List* listHead(void* list) {
    return *(list as List*)[-1];
}

void listClear(void* list) {
    listHead(list).length = 0;
}

void add(void** list, void* data) {
    List* head = listHead(@list);

    if head.capacity == head.length {
        head.capacity *= 2;
        head = realloc(head, sizeof List + head.capacity * head.stride);
        @list = *head[1];
    }

    uint64 dst = @list as uint64;
    dst += head.length * head.stride;
    memcpy(dst as void*, data, head.stride);

    head.length++;
}

uint32 length(void* list) {
    return listHead(list).length;
}