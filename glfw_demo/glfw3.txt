
type GLFWglproc = void();
type GLFWvkproc = void();

type GLFWmonitor;
type GLFWwindow;
type GLFWcursor;

type GLFWerrorfun = void(int, /*const*/ char*);
type GLFWwindowposfun = void(GLFWwindow*, int, int);
type GLFWwindowsizefun = void(GLFWwindow*, int, int);
type GLFWwindowclosefun = void(GLFWwindow*);
type GLFWwindowrefreshfun = void(GLFWwindow*);
type GLFWwindowfocusfun = void(GLFWwindow*, int);
type GLFWwindowiconifyfun = void(GLFWwindow*, int);
type GLFWwindowmaximizefun = void(GLFWwindow*, int);
type GLFWframebuffersizefun = void(GLFWwindow*, int, int);
type GLFWwindowcontentscalefun = void(GLFWwindow*, float, float);
type GLFWmousebuttonfun = void(GLFWwindow*, int, int, int);
type GLFWcursorposfun = void(GLFWwindow*, double, double);
type GLFWcursorenterfun = void(GLFWwindow*, int);
type GLFWscrollfun = void(GLFWwindow*, double, double);
type GLFWkeyfun = void(GLFWwindow*, int, int, int, int);
type GLFWcharfun = void(GLFWwindow*, uint);
type GLFWcharmodsfun = void(GLFWwindow*, uint, int);
type GLFWdropfun = void(GLFWwindow*, int, /*const*/ char**);
type GLFWmonitorfun = void(GLFWmonitor*, int);
type GLFWjoystickfun = void(int, int);

struct GLFWvidmode { 
    // The width, in screen coordinates, of the video mode.
    int width;
    // The height, in screen coordinates, of the video mode.
    int height;
    // The bit depth of the red channel of the video mode.
    int redBits;
    // The bit depth of the green channel of the video mode.
    int greenBits;
    // The bit depth of the blue channel of the video mode.
    int blueBits;
    // The refresh rate, in Hz, of the video mode.
    int refreshRate;
}

struct GLFWgammaramp { 
    // An array of value describing the response of the red channel.
    ushort* red;
    // An array of value describing the response of the green channel.
    ushort* green;
    // An array of value describing the response of the blue channel.
    ushort* blue;
    // The number of elements in each array.
    uint size;
}

struct GLFWimage { 
    // The width, in pixels, of this image.
    int width;
    // The height, in pixels, of this image.
    int height;
    // The pixel data of this image, arranged left-to-right, top-to-bottom.
    byte* pixels;
}

struct GLFWgamepadstate { 
    // The states of each [gamepad button](@ref gamepad_buttons), `GLFW_PRESS` or `GLFW_RELEASE`.
    // byte buttons[15];
    // The states of each [gamepad axis](@ref gamepad_axes), in the range -1.0 to 1.0 inclusive.
    // float axes[6];
    // TODO: make fixed-sized array work
    int removeThisField;
}


declare int glfwInit();
declare void glfwTerminate();
declare void glfwInitHint(int hint, int value);
declare void glfwGetVersion(int* major, int* minor, int* rev);
declare /*const*/ char* glfwGetVersionString();
declare int glfwGetError(/*const*/ char** description);
declare GLFWerrorfun glfwSetErrorCallback(GLFWerrorfun callback);
declare GLFWmonitor** glfwGetMonitors(int* count);
declare GLFWmonitor* glfwGetPrimaryMonitor();
declare void glfwGetMonitorPos(GLFWmonitor* monitor, int* xpos, int* ypos);
declare void glfwGetMonitorWorkarea(GLFWmonitor* monitor, int* xpos, int* ypos, int* width, int* height);
declare void glfwGetMonitorPhysicalSize(GLFWmonitor* monitor, int* widthMM, int* heightMM);
declare void glfwGetMonitorContentScale(GLFWmonitor* monitor, float* xscale, float* yscale);
declare /*const*/ char* glfwGetMonitorName(GLFWmonitor* monitor);
declare void glfwSetMonitorUserPointer(GLFWmonitor* monitor, void* pointer);
declare void* glfwGetMonitorUserPointer(GLFWmonitor* monitor);
declare GLFWmonitorfun glfwSetMonitorCallback(GLFWmonitorfun callback);
declare /*const*/ GLFWvidmode* glfwGetVideoModes(GLFWmonitor* monitor, int* count);
declare /*const*/ GLFWvidmode* glfwGetVideoMode(GLFWmonitor* monitor);
declare void glfwSetGamma(GLFWmonitor* monitor, float gamma);
declare /*const*/ GLFWgammaramp* glfwGetGammaRamp(GLFWmonitor* monitor);
declare void glfwSetGammaRamp(GLFWmonitor* monitor, /*const*/ GLFWgammaramp* ramp);
declare void glfwDefaultWindowHints();
declare void glfwWindowHint(int hint, int value);
declare void glfwWindowHintString(int hint, /*const*/ char* value);
declare GLFWwindow* glfwCreateWindow(int width, int height, /*const*/ char* title, GLFWmonitor* monitor, GLFWwindow* share);
declare void glfwDestroyWindow(GLFWwindow* window);
declare int glfwWindowShouldClose(GLFWwindow* window);
declare void glfwSetWindowShouldClose(GLFWwindow* window, int value);
declare void glfwSetWindowTitle(GLFWwindow* window, /*const*/ char* title);
declare void glfwSetWindowIcon(GLFWwindow* window, int count, /*const*/ GLFWimage* images);
declare void glfwGetWindowPos(GLFWwindow* window, int* xpos, int* ypos);
declare void glfwSetWindowPos(GLFWwindow* window, int xpos, int ypos);
declare void glfwGetWindowSize(GLFWwindow* window, int* width, int* height);
declare void glfwSetWindowSizeLimits(GLFWwindow* window, int minwidth, int minheight, int maxwidth, int maxheight);
declare void glfwSetWindowAspectRatio(GLFWwindow* window, int numer, int denom);
declare void glfwSetWindowSize(GLFWwindow* window, int width, int height);
declare void glfwGetFramebufferSize(GLFWwindow* window, int* width, int* height);
declare void glfwGetWindowFrameSize(GLFWwindow* window, int* left, int* top, int* right, int* bottom);
declare void glfwGetWindowContentScale(GLFWwindow* window, float* xscale, float* yscale);
declare float glfwGetWindowOpacity(GLFWwindow* window);
declare void glfwSetWindowOpacity(GLFWwindow* window, float opacity);
declare void glfwIconifyWindow(GLFWwindow* window);
declare void glfwRestoreWindow(GLFWwindow* window);
declare void glfwMaximizeWindow(GLFWwindow* window);
declare void glfwShowWindow(GLFWwindow* window);
declare void glfwHideWindow(GLFWwindow* window);
declare void glfwFocusWindow(GLFWwindow* window);
declare void glfwRequestWindowAttention(GLFWwindow* window);
declare GLFWmonitor* glfwGetWindowMonitor(GLFWwindow* window);
declare void glfwSetWindowMonitor(GLFWwindow* window, GLFWmonitor* monitor, int xpos, int ypos, int width, int height, int refreshRate);
declare int glfwGetWindowAttrib(GLFWwindow* window, int attrib);
declare void glfwSetWindowAttrib(GLFWwindow* window, int attrib, int value);
declare void glfwSetWindowUserPointer(GLFWwindow* window, void* pointer);
declare void* glfwGetWindowUserPointer(GLFWwindow* window);
declare GLFWwindowposfun glfwSetWindowPosCallback(GLFWwindow* window, GLFWwindowposfun callback);
declare GLFWwindowsizefun glfwSetWindowSizeCallback(GLFWwindow* window, GLFWwindowsizefun callback);
declare GLFWwindowclosefun glfwSetWindowCloseCallback(GLFWwindow* window, GLFWwindowclosefun callback);
declare GLFWwindowrefreshfun glfwSetWindowRefreshCallback(GLFWwindow* window, GLFWwindowrefreshfun callback);
declare GLFWwindowfocusfun glfwSetWindowFocusCallback(GLFWwindow* window, GLFWwindowfocusfun callback);
declare GLFWwindowiconifyfun glfwSetWindowIconifyCallback(GLFWwindow* window, GLFWwindowiconifyfun callback);
declare GLFWwindowmaximizefun glfwSetWindowMaximizeCallback(GLFWwindow* window, GLFWwindowmaximizefun callback);
declare GLFWframebuffersizefun glfwSetFramebufferSizeCallback(GLFWwindow* window, GLFWframebuffersizefun callback);
declare GLFWwindowcontentscalefun glfwSetWindowContentScaleCallback(GLFWwindow* window, GLFWwindowcontentscalefun callback);
declare void glfwPollEvents();
declare void glfwWaitEvents();
declare void glfwWaitEventsTimeout(double timeout);
declare void glfwPostEmptyEvent();
declare int glfwGetInputMode(GLFWwindow* window, int mode);
declare void glfwSetInputMode(GLFWwindow* window, int mode, int value);
declare int glfwRawMouseMotionSupported();
declare /*const*/ char* glfwGetKeyName(int key, int scancode);
declare int glfwGetKeyScancode(int key);
declare int glfwGetKey(GLFWwindow* window, int key);
declare int glfwGetMouseButton(GLFWwindow* window, int button);
declare void glfwGetCursorPos(GLFWwindow* window, double* xpos, double* ypos);
declare void glfwSetCursorPos(GLFWwindow* window, double xpos, double ypos);
declare GLFWcursor* glfwCreateCursor(/*const*/ GLFWimage* image, int xhot, int yhot);
declare GLFWcursor* glfwCreateStandardCursor(int shape);
declare void glfwDestroyCursor(GLFWcursor* cursor);
declare void glfwSetCursor(GLFWwindow* window, GLFWcursor* cursor);
declare GLFWkeyfun glfwSetKeyCallback(GLFWwindow* window, GLFWkeyfun callback);
declare GLFWcharfun glfwSetCharCallback(GLFWwindow* window, GLFWcharfun callback);
declare GLFWcharmodsfun glfwSetCharModsCallback(GLFWwindow* window, GLFWcharmodsfun callback);
declare GLFWmousebuttonfun glfwSetMouseButtonCallback(GLFWwindow* window, GLFWmousebuttonfun callback);
declare GLFWcursorposfun glfwSetCursorPosCallback(GLFWwindow* window, GLFWcursorposfun callback);
declare GLFWcursorenterfun glfwSetCursorEnterCallback(GLFWwindow* window, GLFWcursorenterfun callback);
declare GLFWscrollfun glfwSetScrollCallback(GLFWwindow* window, GLFWscrollfun callback);
declare GLFWdropfun glfwSetDropCallback(GLFWwindow* window, GLFWdropfun callback);
declare int glfwJoystickPresent(int jid);
declare /*const*/ float* glfwGetJoystickAxes(int jid, int* count);
declare /*const*/ byte* glfwGetJoystickButtons(int jid, int* count);
declare /*const*/ byte* glfwGetJoystickHats(int jid, int* count);
declare /*const*/ char* glfwGetJoystickName(int jid);
declare /*const*/ char* glfwGetJoystickGUID(int jid);
declare void glfwSetJoystickUserPointer(int jid, void* pointer);
declare void* glfwGetJoystickUserPointer(int jid);
declare int glfwJoystickIsGamepad(int jid);
declare GLFWjoystickfun glfwSetJoystickCallback(GLFWjoystickfun callback);
declare int glfwUpdateGamepadMappings(/*const*/ char* string);
declare /*const*/ char* glfwGetGamepadName(int jid);
declare int glfwGetGamepadState(int jid, GLFWgamepadstate* state);
declare void glfwSetClipboardString(GLFWwindow* window, /*const*/ char* string);
declare /*const*/ char* glfwGetClipboardString(GLFWwindow* window);
declare double glfwGetTime();
declare void glfwSetTime(double time);
declare ulong glfwGetTimerValue();
declare ulong glfwGetTimerFrequency();
declare void glfwMakeContextCurrent(GLFWwindow* window);
declare GLFWwindow* glfwGetCurrentContext();
declare void glfwSwapBuffers(GLFWwindow* window);
declare void glfwSwapInterval(int interval);
declare int glfwExtensionSupported(/*const*/ char* extension);
declare GLFWglproc glfwGetProcAddress(/*const*/ char* procname);
declare int glfwVulkanSupported();
declare /*const*/ char** glfwGetRequiredInstanceExtensions(uint* count);
// declare GLFWvkproc glfwGetInstanceProcAddress(VkInstance instance, /*const*/ char* procname);
// declare int glfwGetPhysicalDevicePresentationSupport(VkInstance instance, VkPhysicalDevice device, uint queuefamily);
// declare VkResult glfwCreateWindowSurface(VkInstance instance, GLFWwindow* window, /*const*/ VkAllocationCallbacks* allocator, VkSurfaceKHR* surface);
