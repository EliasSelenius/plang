

declare float64 sin(float64 t);
declare float32 sinf(float32 t);
declare float64 cos(float64 t);
declare float32 cosf(float32 t);
declare float64 sqrt(float64 x);
declare float32 sqrtf(float32 x);

const Pi = 3.14159265359;
const Tau = Pi * 2.0;

float32 random(int32 seed) {
    seed = (seed << 13) ^ seed;
    return (1.0f - ((seed * (seed * seed * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0f);
}

// // TODO: the 'quality' of randomnes is not tested here
// float32 random(int32 seed_x, int32 seed_y) {
//     return random(seed_x + seed_y * 57);
// }

float32 clamp(float32 t, float32 min, float32 max) {
    return t < min ? min : t > max ? max : t;
}


struct vec2 {
    float32 x;
    float32 y;
}

vec2 sub(vec2 a, vec2 b) {
    vec2 r;
    r.x = a.x - b.x;
    r.y = a.y - b.y;
    return r;
}

vec2 add(vec2 a, vec2 b) {
    vec2 r;
    r.x = a.x + b.x;
    r.y = a.y + b.y;
    return r;
}

vec2 mul(vec2 a, vec2 b) {
    vec2 r;
    r.x = a.x * b.x;
    r.y = a.y * b.y;
    return r;
}

vec2 mul(vec2 a, float32 s) {
    vec2 r = a;
    r.x *= s;
    r.y *= s;
    return r;
}


float32 dot(vec2 a, vec2 b) {
    return a.x * b.x + a.y * b.y;
}

float32 sqlength(vec2 a) {
    return dot(a, a);
}

float32 length(vec2 a) {
    return sqrtf(dot(a, a));
}

vec2 normalize(vec2 a) {
    return mul(a, 1.0 / length(a));
}

vec2 reflect(vec2 a, vec2 normal) {
    return add(a, mul(normal, dot(a, normal) * -2.0));
}