

declare float64 sin(float64 t);
declare float32 sinf(float32 t);
declare float64 cos(float64 t);
declare float32 cosf(float32 t);
declare float64 sqrt(float64 x);
declare float32 sqrtf(float32 x);

const Pi = 3.14159265359;
const Tau = Pi * 2.0;

float32 random(int32 seed) {
    seed = (seed << 13) ^ seed;
    return (1.0f - ((seed * (seed * seed * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0f);
}

// // TODO: the 'quality' of randomnes is not tested here
// float32 random(int32 seed_x, int32 seed_y) {
//     return random(seed_x + seed_y * 57);
// }

int32 clamp(int32 t, int32 min, int32 max) {
    return t < min ? min : t > max ? max : t;
}
float32 clamp(float32 t, float32 min, float32 max) {
    return t < min ? min : t > max ? max : t;
}


int32 round2int(float32 x) { return (x + 0.5) as int32; }

struct vec2 { float32 x, y; }
struct ivec2 { int32 x, y; }

vec2 vec(float32 x, float32 y) {
    vec2 res;
    res.x = x;
    res.y = y;
    return res;
}

vec2 sub(vec2 a, vec2 b) { return vec(a.x - b.x, a.y - b.y); }
vec2 add(vec2 a, vec2 b) { return vec(a.x + b.x, a.y + b.y); }
vec2 mul(vec2 a, vec2 b) { return vec(a.x * b.x, a.y * b.y); }
vec2 mul(vec2 a, float32 s) { return vec(a.x * s, a.y * s); }

float32 dot(vec2 a, vec2 b) { return a.x * b.x + a.y * b.y; }
float32 sqlength(vec2 a) { return dot(a, a); }
float32 length(vec2 a) { return sqrtf(dot(a, a)); }
vec2 normalize(vec2 a) { return mul(a, 1.0 / length(a)); }
vec2 reflect(vec2 a, vec2 normal) { return add(a, mul(normal, dot(a, normal) * -2.0)); }

