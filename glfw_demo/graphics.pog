
int shaderInfoLogSize = 1024;
char* shaderInfoLog = null;

GLFWwindow* window;
uint shader;
uint vbo;
uint ebo;
uint vao;


struct Mesh {
    uint vao;
    uint vbo;
    uint ebo;

    int elementsCount;
}

void drawMesh(uint vao, int elementsCount) {
    glBindVertexArray(vao);
    glDrawElements(GL_TRIANGLES, elementsCount, GL_UNSIGNED_INT, null);
    glBindVertexArray(0u);
}

void drawMesh(Mesh mesh) {
    drawMesh(mesh.vao, mesh.elementsCount);
}

Mesh createMesh(vec2* verts, uint vertsCount, uint* inds, uint indsCount) {
    Mesh mesh;
    mesh.elementsCount = indsCount as int;

    glGenVertexArrays(1, *mesh.vao);
    glBindVertexArray(mesh.vao);

    glGenBuffers(1, *mesh.vbo);
    glBindBuffer(GL_ARRAY_BUFFER , mesh.vbo);
    glBufferData(GL_ARRAY_BUFFER, (sizeof(vec2) * vertsCount) as long, verts, GL_STATIC_DRAW);

    glGenBuffers(1, *mesh.ebo);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, mesh.ebo);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, (sizeof(uint) * indsCount) as long, inds, GL_STATIC_DRAW);

    glEnableVertexAttribArray(0u);
    glVertexAttribPointer(0u, 2, GL_FLOAT, false as byte, 8, null);

    glBindVertexArray(0u);

    return mesh;
}

void loadGL() {

    load_opengl(glfwGetProcAddress);

    shaderInfoLog = malloc(shaderInfoLogSize as ulong);

    glfwSetFramebufferSizeCallback(window, GLFWframebuffersizefunCallback);
    glfwSetScrollCallback(window, GLFWscrollfunCallback);

    shader = createShader();
    glUseProgram(shader);

    glPointSize(30.0);
    // glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);

}


void GLFWframebuffersizefunCallback(GLFWwindow* window, int w, int h) {
    let aspect = h as float / w;
    glUniform1f(glGetUniformLocation(shader, "aspect"), aspect);
}


uint makeShader(uint program, uint _type, char* code) {
    let s = glCreateShader(_type);
    glShaderSource(s, 1, *code, null); // null assumes null-terminated string
    glAttachShader(program, s);
    return s;
}


uint createShader() {
    let program = glCreateProgram();

    char* vertCode = fileread("shaders/vert.glsl");
    char* fragCode = fileread("shaders/frag.glsl");
    let v = makeShader(program, GL_VERTEX_SHADER, vertCode);
    let f = makeShader(program, GL_FRAGMENT_SHADER, fragCode);

    glLinkProgram(program);

    glDetachShader(program, v);
    glDeleteShader(v);

    glDetachShader(program, f);
    glDeleteShader(f);

    { // check status
        int status;
        glGetProgramiv(program, GL_LINK_STATUS, *status);

        if status == 0 {
            int len;
            glGetProgramInfoLog(program, shaderInfoLogSize, *len, shaderInfoLog);
            println(shaderInfoLog);
        }
    }

    return program;
}