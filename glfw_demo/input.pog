
int32 key(char c) {
    return glfwGetKey(window, c as int32);
}

const Left_Mouse = 0;
const Right_Mouse = 1;
int32 mouse(int32 btn) {
    return glfwGetMouseButton(window, btn);
}

vec2 getMouseWorldCoord() {
    float64 cx;
    float64 cy;
    glfwGetCursorPos(window, *cx, *cy);

    int32 w;
    int32 h;
    glfwGetFramebufferSize(window, *w, *h);

    float32 x = cx as float32 / w * 2 - 1;
    float32 y = -(cy as float32 / h * 2 - 1);

    x *= w as float32 / h;  // 16.0 / 9.0;

    // float32 c = cosf(camera.rot) * camera.zoom;
    // float32 s = sinf(camera.rot) * camera.zoom;
    // vec2 res;
    // res.x = c*x + s*y + camera.pos.x;
    // res.y = -s*x + c*y + camera.pos.y;
    let res = local2world(camera, x, y);
    return res;
}

void mouse_scrollCallback(GLFWwindow* w, float64 x, float64 y) {
    camera.scale -= camera.scale * (y as float32) * 0.1;
    camera.scale = clamp(camera.scale, 1.0, 10000.0);

}