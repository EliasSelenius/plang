
type FILE;

declare int32 fopen_s(FILE** stream, char* filename, char* mode);
declare int32 fclose(FILE* stream);

declare int32 fseek(FILE* stream, int32 offset, int32 origin);
declare uint64 ftell(FILE* stream);
declare void rewind(FILE* stream);
declare uint64 fread(void* buffer, uint64 elementSize, uint64 elementCount, FILE* stream);

declare void* calloc(uint64 count, uint64 size);
declare void* malloc(uint64 size);
declare void free(void* block);
declare void* realloc(void* buffer, uint64 size);
declare void* memcpy(void* dst, void* src, uint64 size);

declare uint64 strlen(char* str);

char* fileread(char* filename) {
    return fileread(filename, "r");
}

char* fileread(char* filename, char* mode) {
    FILE* file;
    if (fopen_s(*file, filename, mode)) {
        print("ERROR: Could not open file \"", filename, "\".\n");
        return null;
    }

    fseek(file, 0, 2); // 2 = SEEK_END
    uint64 len = ftell(file);
    rewind(file);

    char* buffer = calloc(len + 1, 1);
    let end = fread(buffer, 1, len, file);
    buffer[end] = 0 as char; // null-termination

    fclose(file);
    return buffer;
}