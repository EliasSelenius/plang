
type bool = uint8;
type byte = uint8;

type FILE;

int32 fopen_s(FILE** stream, char* filename, char* mode);
int32 fclose(FILE* stream);

int32 fseek(FILE* stream, int32 offset, int32 origin);
uint64 ftell(FILE* stream);
void rewind(FILE* stream);
uint64 fread(void* buffer, uint64 elementSize, uint64 elementCount, FILE* stream);
uint64 fwrite(void* ptr, uint64 size, uint64 nmemb, FILE* stream);


void* calloc(uint64 count, uint64 size);
void* malloc(uint64 size);
void free(void* block);
void* realloc(void* buffer, uint64 size);

void* memcpy(void* dst, void* src, uint64 size);
void* memset(void* dst, int32 val, uint64 size);
void* memmove(void* dst, void* src, uint64 size);
int32 memcmp(void* lhs, rhs, uint64 count);

uint64 strlen(char* str);

void exit(int32 code);

FILE* open_file(char* file, mode) {
    FILE* res = null;
    if fopen_s(*res, file, mode) {
        print("ERROR: Could not open file \"", file, "\".\n");
        return null;
    }
    return res;
}

char* fileread(char* filename) {
    return fileread(filename, "r");
}

char* fileread(char* filename, char* mode) {
    FILE* file = open_file(filename, mode);

    fseek(file, 0, 2); // 2 = SEEK_END
    uint64 len = ftell(file);
    rewind(file);

    char* buffer = calloc(len + 1, 1);
    let end = fread(buffer, 1, len, file);
    buffer[end] = 0 as char; // null-termination

    fclose(file);
    return buffer;
}

void filewrite(char* filename, char* content) {
    FILE* file = open_file(filename, "w");
    fwrite(content, sizeof char, strlen(content), file);
    fclose(file);
}


void filewrite(string filename, char* content) {
    // TODO: isnt this beautiful!
    char* tmp = malloc(filename.length + 1);
    memcpy(tmp, filename.chars, filename.length);
    tmp[filename.length] = 0;
    filewrite(tmp, content);
    free(tmp);
}


uint8[] read_binary_file(char* filename) {
    FILE* file = open_file(filename, "rb");
    uint8[] buffer;
    // TODO: this is stupid, but its the only way to create a 'null' array
    buffer.data = null;
    buffer.length = 0;
    if file == null return buffer;

    fseek(file, 0, 2); // 2 = SEEK_END
    uint64 len = ftell(file);
    rewind(file);

    buffer.length = len as uint32; // TODO: truncation
    buffer.data = malloc(buffer.length);

    fread(buffer.data, 1, buffer.length, file);
    fclose(file);
    return buffer;
}

void write_binary_file(char* filename, void* data, uint64 bytes) {
    uint8[] buffer = {};
    buffer.data = data;
    buffer.length = bytes;
    write_binary_file(filename, buffer);
}

void write_binary_file(char* filename, uint8[] buffer) {
    FILE* file = open_file(filename, "wb");
    fwrite(buffer.data, sizeof uint8, buffer.length, file);
    fclose(file);
}

const ArenaSize = 0xFFFF_FFFF;
struct Arena {
    uint32 top;
}

Arena* arena_create() {
    Arena* arena = vmem_reserve(ArenaSize);
    arena.top = sizeof(Arena);
    return arena;
}

void* arena_bottom(Arena* arena) {
    return (arena as uint64 + sizeof(Arena)) as void*;
}

void* arena_alloc(Arena* arena, uint32 size) {
    // TODO: we should do alignment here

    uint64 result = (arena as uint64) + arena.top;

    // uint32 align = 8;
    // result = result / align * align;

    arena.top += size;
    vmem_commit(arena, arena.top as uint64);
    return result as void*;
}

void arena_release(Arena* arena) {
    vmem_release(arena);
}