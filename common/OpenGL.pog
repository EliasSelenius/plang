
// OpenGL 4.3 core

const GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
const GL_ACTIVE_ATTRIBUTES = 0x8B89;
const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
const GL_ACTIVE_PROGRAM = 0x8259;
const GL_ACTIVE_RESOURCES = 0x92F5;
const GL_ACTIVE_SUBROUTINES = 0x8DE5;
const GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
const GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
const GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
const GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
const GL_ACTIVE_TEXTURE = 0x84E0;
const GL_ACTIVE_UNIFORMS = 0x8B86;
const GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
const GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
const GL_ACTIVE_VARIABLES = 0x9305;
const GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
const GL_ALL_BARRIER_BITS = 0xFFFFFFFF;
const GL_ALL_SHADER_BITS = 0xFFFFFFFF;
const GL_ALPHA = 0x1906;
const GL_ALREADY_SIGNALED = 0x911A;
const GL_ALWAYS = 0x0207;
const GL_AND = 0x1501;
const GL_AND_INVERTED = 0x1504;
const GL_AND_REVERSE = 0x1502;
const GL_ANY_SAMPLES_PASSED = 0x8C2F;
const GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
const GL_ARRAY_BUFFER = 0x8892;
const GL_ARRAY_BUFFER_BINDING = 0x8894;
const GL_ARRAY_SIZE = 0x92FB;
const GL_ARRAY_STRIDE = 0x92FE;
const GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
const GL_ATOMIC_COUNTER_BUFFER = 0x92C0;
const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
const GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
const GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
const GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
const GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
const GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2;
const GL_ATTACHED_SHADERS = 0x8B85;
const GL_AUTO_GENERATE_MIPMAP = 0x8295;
const GL_BACK = 0x0405;
const GL_BACK_LEFT = 0x0402;
const GL_BACK_RIGHT = 0x0403;
const GL_BGR = 0x80E0;
const GL_BGRA = 0x80E1;
const GL_BGRA_INTEGER = 0x8D9B;
const GL_BGR_INTEGER = 0x8D9A;
const GL_BLEND = 0x0BE2;
const GL_BLEND_COLOR = 0x8005;
const GL_BLEND_DST = 0x0BE0;
const GL_BLEND_DST_ALPHA = 0x80CA;
const GL_BLEND_DST_RGB = 0x80C8;
const GL_BLEND_EQUATION = 0x8009;
const GL_BLEND_EQUATION_ALPHA = 0x883D;
const GL_BLEND_EQUATION_RGB = 0x8009;
const GL_BLEND_SRC = 0x0BE1;
const GL_BLEND_SRC_ALPHA = 0x80CB;
const GL_BLEND_SRC_RGB = 0x80C9;
const GL_BLOCK_INDEX = 0x92FD;
const GL_BLUE = 0x1905;
const GL_BLUE_INTEGER = 0x8D96;
const GL_BOOL = 0x8B56;
const GL_BOOL_VEC2 = 0x8B57;
const GL_BOOL_VEC3 = 0x8B58;
const GL_BOOL_VEC4 = 0x8B59;
const GL_BUFFER = 0x82E0;
const GL_BUFFER_ACCESS = 0x88BB;
const GL_BUFFER_ACCESS_FLAGS = 0x911F;
const GL_BUFFER_BINDING = 0x9302;
const GL_BUFFER_DATA_SIZE = 0x9303;
const GL_BUFFER_MAPPED = 0x88BC;
const GL_BUFFER_MAP_LENGTH = 0x9120;
const GL_BUFFER_MAP_OFFSET = 0x9121;
const GL_BUFFER_MAP_POINTER = 0x88BD;
const GL_BUFFER_SIZE = 0x8764;
const GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
const GL_BUFFER_USAGE = 0x8765;
const GL_BUFFER_VARIABLE = 0x92E5;
const GL_BYTE = 0x1400;
const GL_CAVEAT_SUPPORT = 0x82B8;
const GL_CCW = 0x0901;
const GL_CLAMP_READ_COLOR = 0x891C;
const GL_CLAMP_TO_BORDER = 0x812D;
const GL_CLAMP_TO_EDGE = 0x812F;
const GL_CLEAR = 0x1500;
const GL_CLEAR_BUFFER = 0x82B4;
const GL_CLIP_DISTANCE0 = 0x3000;
const GL_CLIP_DISTANCE1 = 0x3001;
const GL_CLIP_DISTANCE2 = 0x3002;
const GL_CLIP_DISTANCE3 = 0x3003;
const GL_CLIP_DISTANCE4 = 0x3004;
const GL_CLIP_DISTANCE5 = 0x3005;
const GL_CLIP_DISTANCE6 = 0x3006;
const GL_CLIP_DISTANCE7 = 0x3007;
const GL_COLOR = 0x1800;
const GL_COLOR_ATTACHMENT0 = 0x8CE0;
const GL_COLOR_ATTACHMENT1 = 0x8CE1;
const GL_COLOR_ATTACHMENT10 = 0x8CEA;
const GL_COLOR_ATTACHMENT11 = 0x8CEB;
const GL_COLOR_ATTACHMENT12 = 0x8CEC;
const GL_COLOR_ATTACHMENT13 = 0x8CED;
const GL_COLOR_ATTACHMENT14 = 0x8CEE;
const GL_COLOR_ATTACHMENT15 = 0x8CEF;
const GL_COLOR_ATTACHMENT16 = 0x8CF0;
const GL_COLOR_ATTACHMENT17 = 0x8CF1;
const GL_COLOR_ATTACHMENT18 = 0x8CF2;
const GL_COLOR_ATTACHMENT19 = 0x8CF3;
const GL_COLOR_ATTACHMENT2 = 0x8CE2;
const GL_COLOR_ATTACHMENT20 = 0x8CF4;
const GL_COLOR_ATTACHMENT21 = 0x8CF5;
const GL_COLOR_ATTACHMENT22 = 0x8CF6;
const GL_COLOR_ATTACHMENT23 = 0x8CF7;
const GL_COLOR_ATTACHMENT24 = 0x8CF8;
const GL_COLOR_ATTACHMENT25 = 0x8CF9;
const GL_COLOR_ATTACHMENT26 = 0x8CFA;
const GL_COLOR_ATTACHMENT27 = 0x8CFB;
const GL_COLOR_ATTACHMENT28 = 0x8CFC;
const GL_COLOR_ATTACHMENT29 = 0x8CFD;
const GL_COLOR_ATTACHMENT3 = 0x8CE3;
const GL_COLOR_ATTACHMENT30 = 0x8CFE;
const GL_COLOR_ATTACHMENT31 = 0x8CFF;
const GL_COLOR_ATTACHMENT4 = 0x8CE4;
const GL_COLOR_ATTACHMENT5 = 0x8CE5;
const GL_COLOR_ATTACHMENT6 = 0x8CE6;
const GL_COLOR_ATTACHMENT7 = 0x8CE7;
const GL_COLOR_ATTACHMENT8 = 0x8CE8;
const GL_COLOR_ATTACHMENT9 = 0x8CE9;
const GL_COLOR_BUFFER_BIT = 0x00004000;
const GL_COLOR_CLEAR_VALUE = 0x0C22;
const GL_COLOR_COMPONENTS = 0x8283;
const GL_COLOR_ENCODING = 0x8296;
const GL_COLOR_LOGIC_OP = 0x0BF2;
const GL_COLOR_RENDERABLE = 0x8286;
const GL_COLOR_WRITEMASK = 0x0C23;
const GL_COMMAND_BARRIER_BIT = 0x00000040;
const GL_COMPARE_REF_TO_TEXTURE = 0x884E;
const GL_COMPATIBLE_SUBROUTINES = 0x8E4B;
const GL_COMPILE_STATUS = 0x8B81;
const GL_COMPRESSED_R11_EAC = 0x9270;
const GL_COMPRESSED_RED = 0x8225;
const GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
const GL_COMPRESSED_RG = 0x8226;
const GL_COMPRESSED_RG11_EAC = 0x9272;
const GL_COMPRESSED_RGB = 0x84ED;
const GL_COMPRESSED_RGB8_ETC2 = 0x9274;
const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
const GL_COMPRESSED_RGBA = 0x84EE;
const GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
const GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C;
const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E;
const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F;
const GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
const GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
const GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
const GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
const GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
const GL_COMPRESSED_SRGB = 0x8C48;
const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
const GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
const GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D;
const GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
const GL_COMPUTE_SHADER = 0x91B9;
const GL_COMPUTE_SHADER_BIT = 0x00000020;
const GL_COMPUTE_SUBROUTINE = 0x92ED;
const GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
const GL_COMPUTE_TEXTURE = 0x82A0;
const GL_COMPUTE_WORK_GROUP_SIZE = 0x8267;
const GL_CONDITION_SATISFIED = 0x911C;
const GL_CONSTANT_ALPHA = 0x8003;
const GL_CONSTANT_COLOR = 0x8001;
const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
const GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
const GL_CONTEXT_FLAGS = 0x821E;
const GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
const GL_CONTEXT_PROFILE_MASK = 0x9126;
const GL_COPY = 0x1503;
const GL_COPY_INVERTED = 0x150C;
const GL_COPY_READ_BUFFER = 0x8F36;
const GL_COPY_READ_BUFFER_BINDING = 0x8F36;
const GL_COPY_WRITE_BUFFER = 0x8F37;
const GL_COPY_WRITE_BUFFER_BINDING = 0x8F37;
const GL_CULL_FACE = 0x0B44;
const GL_CULL_FACE_MODE = 0x0B45;
const GL_CURRENT_PROGRAM = 0x8B8D;
const GL_CURRENT_QUERY = 0x8865;
const GL_CURRENT_VERTEX_ATTRIB = 0x8626;
const GL_CW = 0x0900;
const GL_DEBUG_CALLBACK_FUNCTION = 0x8244;
const GL_DEBUG_CALLBACK_USER_PARAM = 0x8245;
const GL_DEBUG_GROUP_STACK_DEPTH = 0x826D;
const GL_DEBUG_LOGGED_MESSAGES = 0x9145;
const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
const GL_DEBUG_OUTPUT = 0x92E0;
const GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
const GL_DEBUG_SEVERITY_HIGH = 0x9146;
const GL_DEBUG_SEVERITY_LOW = 0x9148;
const GL_DEBUG_SEVERITY_MEDIUM = 0x9147;
const GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B;
const GL_DEBUG_SOURCE_API = 0x8246;
const GL_DEBUG_SOURCE_APPLICATION = 0x824A;
const GL_DEBUG_SOURCE_OTHER = 0x824B;
const GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
const GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249;
const GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
const GL_DEBUG_TYPE_ERROR = 0x824C;
const GL_DEBUG_TYPE_MARKER = 0x8268;
const GL_DEBUG_TYPE_OTHER = 0x8251;
const GL_DEBUG_TYPE_PERFORMANCE = 0x8250;
const GL_DEBUG_TYPE_POP_GROUP = 0x826A;
const GL_DEBUG_TYPE_PORTABILITY = 0x824F;
const GL_DEBUG_TYPE_PUSH_GROUP = 0x8269;
const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
const GL_DECR = 0x1E03;
const GL_DECR_WRAP = 0x8508;
const GL_DELETE_STATUS = 0x8B80;
const GL_DEPTH = 0x1801;
const GL_DEPTH24_STENCIL8 = 0x88F0;
const GL_DEPTH32F_STENCIL8 = 0x8CAD;
const GL_DEPTH_ATTACHMENT = 0x8D00;
const GL_DEPTH_BUFFER_BIT = 0x00000100;
const GL_DEPTH_CLAMP = 0x864F;
const GL_DEPTH_CLEAR_VALUE = 0x0B73;
const GL_DEPTH_COMPONENT = 0x1902;
const GL_DEPTH_COMPONENT16 = 0x81A5;
const GL_DEPTH_COMPONENT24 = 0x81A6;
const GL_DEPTH_COMPONENT32 = 0x81A7;
const GL_DEPTH_COMPONENT32F = 0x8CAC;
const GL_DEPTH_COMPONENTS = 0x8284;
const GL_DEPTH_FUNC = 0x0B74;
const GL_DEPTH_RANGE = 0x0B70;
const GL_DEPTH_RENDERABLE = 0x8287;
const GL_DEPTH_STENCIL = 0x84F9;
const GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
const GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
const GL_DEPTH_TEST = 0x0B71;
const GL_DEPTH_WRITEMASK = 0x0B72;
const GL_DISPATCH_INDIRECT_BUFFER = 0x90EE;
const GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
const GL_DITHER = 0x0BD0;
const GL_DONT_CARE = 0x1100;
const GL_DOUBLE = 0x140A;
const GL_DOUBLEBUFFER = 0x0C32;
const GL_DOUBLE_MAT2 = 0x8F46;
const GL_DOUBLE_MAT2x3 = 0x8F49;
const GL_DOUBLE_MAT2x4 = 0x8F4A;
const GL_DOUBLE_MAT3 = 0x8F47;
const GL_DOUBLE_MAT3x2 = 0x8F4B;
const GL_DOUBLE_MAT3x4 = 0x8F4C;
const GL_DOUBLE_MAT4 = 0x8F48;
const GL_DOUBLE_MAT4x2 = 0x8F4D;
const GL_DOUBLE_MAT4x3 = 0x8F4E;
const GL_DOUBLE_VEC2 = 0x8FFC;
const GL_DOUBLE_VEC3 = 0x8FFD;
const GL_DOUBLE_VEC4 = 0x8FFE;
const GL_DRAW_BUFFER = 0x0C01;
const GL_DRAW_BUFFER0 = 0x8825;
const GL_DRAW_BUFFER1 = 0x8826;
const GL_DRAW_BUFFER10 = 0x882F;
const GL_DRAW_BUFFER11 = 0x8830;
const GL_DRAW_BUFFER12 = 0x8831;
const GL_DRAW_BUFFER13 = 0x8832;
const GL_DRAW_BUFFER14 = 0x8833;
const GL_DRAW_BUFFER15 = 0x8834;
const GL_DRAW_BUFFER2 = 0x8827;
const GL_DRAW_BUFFER3 = 0x8828;
const GL_DRAW_BUFFER4 = 0x8829;
const GL_DRAW_BUFFER5 = 0x882A;
const GL_DRAW_BUFFER6 = 0x882B;
const GL_DRAW_BUFFER7 = 0x882C;
const GL_DRAW_BUFFER8 = 0x882D;
const GL_DRAW_BUFFER9 = 0x882E;
const GL_DRAW_FRAMEBUFFER = 0x8CA9;
const GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
const GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
const GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
const GL_DST_ALPHA = 0x0304;
const GL_DST_COLOR = 0x0306;
const GL_DYNAMIC_COPY = 0x88EA;
const GL_DYNAMIC_DRAW = 0x88E8;
const GL_DYNAMIC_READ = 0x88E9;
const GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
const GL_ELEMENT_ARRAY_BUFFER = 0x8893;
const GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
const GL_EQUAL = 0x0202;
const GL_EQUIV = 0x1509;
const GL_EXTENSIONS = 0x1F03;
const GL_FALSE = 0;
const GL_FASTEST = 0x1101;
const GL_FILL = 0x1B02;
const GL_FILTER = 0x829A;
const GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
const GL_FIXED = 0x140C;
const GL_FIXED_ONLY = 0x891D;
const GL_FLOAT = 0x1406;
const GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
const GL_FLOAT_MAT2 = 0x8B5A;
const GL_FLOAT_MAT2x3 = 0x8B65;
const GL_FLOAT_MAT2x4 = 0x8B66;
const GL_FLOAT_MAT3 = 0x8B5B;
const GL_FLOAT_MAT3x2 = 0x8B67;
const GL_FLOAT_MAT3x4 = 0x8B68;
const GL_FLOAT_MAT4 = 0x8B5C;
const GL_FLOAT_MAT4x2 = 0x8B69;
const GL_FLOAT_MAT4x3 = 0x8B6A;
const GL_FLOAT_VEC2 = 0x8B50;
const GL_FLOAT_VEC3 = 0x8B51;
const GL_FLOAT_VEC4 = 0x8B52;
const GL_FRACTIONAL_EVEN = 0x8E7C;
const GL_FRACTIONAL_ODD = 0x8E7B;
const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
const GL_FRAGMENT_SHADER = 0x8B30;
const GL_FRAGMENT_SHADER_BIT = 0x00000002;
const GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
const GL_FRAGMENT_SUBROUTINE = 0x92EC;
const GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
const GL_FRAGMENT_TEXTURE = 0x829F;
const GL_FRAMEBUFFER = 0x8D40;
const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
const GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
const GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
const GL_FRAMEBUFFER_BINDING = 0x8CA6;
const GL_FRAMEBUFFER_BLEND = 0x828B;
const GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
const GL_FRAMEBUFFER_DEFAULT = 0x8218;
const GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
const GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
const GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
const GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
const GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
const GL_FRAMEBUFFER_RENDERABLE = 0x8289;
const GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
const GL_FRAMEBUFFER_SRGB = 0x8DB9;
const GL_FRAMEBUFFER_UNDEFINED = 0x8219;
const GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
const GL_FRONT = 0x0404;
const GL_FRONT_AND_BACK = 0x0408;
const GL_FRONT_FACE = 0x0B46;
const GL_FRONT_LEFT = 0x0400;
const GL_FRONT_RIGHT = 0x0401;
const GL_FULL_SUPPORT = 0x82B7;
const GL_FUNC_ADD = 0x8006;
const GL_FUNC_REVERSE_SUBTRACT = 0x800B;
const GL_FUNC_SUBTRACT = 0x800A;
const GL_GEOMETRY_INPUT_TYPE = 0x8917;
const GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
const GL_GEOMETRY_SHADER = 0x8DD9;
const GL_GEOMETRY_SHADER_BIT = 0x00000004;
const GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
const GL_GEOMETRY_SUBROUTINE = 0x92EB;
const GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
const GL_GEOMETRY_TEXTURE = 0x829E;
const GL_GEOMETRY_VERTICES_OUT = 0x8916;
const GL_GEQUAL = 0x0206;
const GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291;
const GL_GET_TEXTURE_IMAGE_TYPE = 0x8292;
const GL_GREATER = 0x0204;
const GL_GREEN = 0x1904;
const GL_GREEN_INTEGER = 0x8D95;
const GL_HALF_FLOAT = 0x140B;
const GL_HIGH_FLOAT = 0x8DF2;
const GL_HIGH_INT = 0x8DF5;
const GL_IMAGE_1D = 0x904C;
const GL_IMAGE_1D_ARRAY = 0x9052;
const GL_IMAGE_2D = 0x904D;
const GL_IMAGE_2D_ARRAY = 0x9053;
const GL_IMAGE_2D_MULTISAMPLE = 0x9055;
const GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
const GL_IMAGE_2D_RECT = 0x904F;
const GL_IMAGE_3D = 0x904E;
const GL_IMAGE_BINDING_ACCESS = 0x8F3E;
const GL_IMAGE_BINDING_FORMAT = 0x906E;
const GL_IMAGE_BINDING_LAYER = 0x8F3D;
const GL_IMAGE_BINDING_LAYERED = 0x8F3C;
const GL_IMAGE_BINDING_LEVEL = 0x8F3B;
const GL_IMAGE_BINDING_NAME = 0x8F3A;
const GL_IMAGE_BUFFER = 0x9051;
const GL_IMAGE_CLASS_10_10_10_2 = 0x82C3;
const GL_IMAGE_CLASS_11_11_10 = 0x82C2;
const GL_IMAGE_CLASS_1_X_16 = 0x82BE;
const GL_IMAGE_CLASS_1_X_32 = 0x82BB;
const GL_IMAGE_CLASS_1_X_8 = 0x82C1;
const GL_IMAGE_CLASS_2_X_16 = 0x82BD;
const GL_IMAGE_CLASS_2_X_32 = 0x82BA;
const GL_IMAGE_CLASS_2_X_8 = 0x82C0;
const GL_IMAGE_CLASS_4_X_16 = 0x82BC;
const GL_IMAGE_CLASS_4_X_32 = 0x82B9;
const GL_IMAGE_CLASS_4_X_8 = 0x82BF;
const GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8;
const GL_IMAGE_CUBE = 0x9050;
const GL_IMAGE_CUBE_MAP_ARRAY = 0x9054;
const GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
const GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
const GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
const GL_IMAGE_PIXEL_FORMAT = 0x82A9;
const GL_IMAGE_PIXEL_TYPE = 0x82AA;
const GL_IMAGE_TEXEL_SIZE = 0x82A7;
const GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
const GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
const GL_INCR = 0x1E02;
const GL_INCR_WRAP = 0x8507;
const GL_INFO_LOG_LENGTH = 0x8B84;
const GL_INT = 0x1404;
const GL_INTERLEAVED_ATTRIBS = 0x8C8C;
const GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274;
const GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B;
const GL_INTERNALFORMAT_BLUE_SIZE = 0x8273;
const GL_INTERNALFORMAT_BLUE_TYPE = 0x827A;
const GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275;
const GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C;
const GL_INTERNALFORMAT_GREEN_SIZE = 0x8272;
const GL_INTERNALFORMAT_GREEN_TYPE = 0x8279;
const GL_INTERNALFORMAT_PREFERRED = 0x8270;
const GL_INTERNALFORMAT_RED_SIZE = 0x8271;
const GL_INTERNALFORMAT_RED_TYPE = 0x8278;
const GL_INTERNALFORMAT_SHARED_SIZE = 0x8277;
const GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276;
const GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D;
const GL_INTERNALFORMAT_SUPPORTED = 0x826F;
const GL_INT_2_10_10_10_REV = 0x8D9F;
const GL_INT_IMAGE_1D = 0x9057;
const GL_INT_IMAGE_1D_ARRAY = 0x905D;
const GL_INT_IMAGE_2D = 0x9058;
const GL_INT_IMAGE_2D_ARRAY = 0x905E;
const GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060;
const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
const GL_INT_IMAGE_2D_RECT = 0x905A;
const GL_INT_IMAGE_3D = 0x9059;
const GL_INT_IMAGE_BUFFER = 0x905C;
const GL_INT_IMAGE_CUBE = 0x905B;
const GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
const GL_INT_SAMPLER_1D = 0x8DC9;
const GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
const GL_INT_SAMPLER_2D = 0x8DCA;
const GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
const GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
const GL_INT_SAMPLER_2D_RECT = 0x8DCD;
const GL_INT_SAMPLER_3D = 0x8DCB;
const GL_INT_SAMPLER_BUFFER = 0x8DD0;
const GL_INT_SAMPLER_CUBE = 0x8DCC;
const GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
const GL_INT_VEC2 = 0x8B53;
const GL_INT_VEC3 = 0x8B54;
const GL_INT_VEC4 = 0x8B55;
const GL_INVALID_ENUM = 0x0500;
const GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
const GL_INVALID_INDEX = 0xFFFFFFFF;
const GL_INVALID_OPERATION = 0x0502;
const GL_INVALID_VALUE = 0x0501;
const GL_INVERT = 0x150A;
const GL_ISOLINES = 0x8E7A;
const GL_IS_PER_PATCH = 0x92E7;
const GL_IS_ROW_MAJOR = 0x9300;
const GL_KEEP = 0x1E00;
const GL_LAST_VERTEX_CONVENTION = 0x8E4E;
const GL_LAYER_PROVOKING_VERTEX = 0x825E;
const GL_LEFT = 0x0406;
const GL_LEQUAL = 0x0203;
const GL_LESS = 0x0201;
const GL_LINE = 0x1B01;
const GL_LINEAR = 0x2601;
const GL_LINEAR_MIPMAP_LINEAR = 0x2703;
const GL_LINEAR_MIPMAP_NEAREST = 0x2701;
const GL_LINES = 0x0001;
const GL_LINES_ADJACENCY = 0x000A;
const GL_LINE_LOOP = 0x0002;
const GL_LINE_SMOOTH = 0x0B20;
const GL_LINE_SMOOTH_HINT = 0x0C52;
const GL_LINE_STRIP = 0x0003;
const GL_LINE_STRIP_ADJACENCY = 0x000B;
const GL_LINE_WIDTH = 0x0B21;
const GL_LINE_WIDTH_GRANULARITY = 0x0B23;
const GL_LINE_WIDTH_RANGE = 0x0B22;
const GL_LINK_STATUS = 0x8B82;
const GL_LOCATION = 0x930E;
const GL_LOCATION_INDEX = 0x930F;
const GL_LOGIC_OP_MODE = 0x0BF0;
const GL_LOWER_LEFT = 0x8CA1;
const GL_LOW_FLOAT = 0x8DF0;
const GL_LOW_INT = 0x8DF3;
const GL_MAJOR_VERSION = 0x821B;
const GL_MANUAL_GENERATE_MIPMAP = 0x8294;
const GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
const GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
const GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
const GL_MAP_READ_BIT = 0x0001;
const GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
const GL_MAP_WRITE_BIT = 0x0002;
const GL_MATRIX_STRIDE = 0x92FF;
const GL_MAX = 0x8008;
const GL_MAX_3D_TEXTURE_SIZE = 0x8073;
const GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
const GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
const GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
const GL_MAX_CLIP_DISTANCES = 0x0D32;
const GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
const GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
const GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
const GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
const GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
const GL_MAX_COMBINED_DIMENSIONS = 0x8282;
const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
const GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
const GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
const GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
const GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
const GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
const GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
const GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
const GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
const GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
const GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
const GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
const GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
const GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
const GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
const GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
const GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
const GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
const GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
const GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
const GL_MAX_DEPTH = 0x8280;
const GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
const GL_MAX_DRAW_BUFFERS = 0x8824;
const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
const GL_MAX_ELEMENTS_INDICES = 0x80E9;
const GL_MAX_ELEMENTS_VERTICES = 0x80E8;
const GL_MAX_ELEMENT_INDEX = 0x8D6B;
const GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
const GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
const GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
const GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
const GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
const GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
const GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
const GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316;
const GL_MAX_FRAMEBUFFER_LAYERS = 0x9317;
const GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318;
const GL_MAX_FRAMEBUFFER_WIDTH = 0x9315;
const GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
const GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
const GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
const GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
const GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
const GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
const GL_MAX_HEIGHT = 0x827F;
const GL_MAX_IMAGE_SAMPLES = 0x906D;
const GL_MAX_IMAGE_UNITS = 0x8F38;
const GL_MAX_INTEGER_SAMPLES = 0x9110;
const GL_MAX_LABEL_LENGTH = 0x82E8;
const GL_MAX_LAYERS = 0x8281;
const GL_MAX_NAME_LENGTH = 0x92F6;
const GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
const GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
const GL_MAX_PATCH_VERTICES = 0x8E7D;
const GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
const GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
const GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
const GL_MAX_SAMPLES = 0x8D57;
const GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
const GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
const GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
const GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
const GL_MAX_SUBROUTINES = 0x8DE7;
const GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
const GL_MAX_TESS_GEN_LEVEL = 0x8E7E;
const GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;
const GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
const GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
const GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
const GL_MAX_TEXTURE_SIZE = 0x0D33;
const GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
const GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
const GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
const GL_MAX_UNIFORM_LOCATIONS = 0x826E;
const GL_MAX_VARYING_COMPONENTS = 0x8B4B;
const GL_MAX_VARYING_FLOATS = 0x8B4B;
const GL_MAX_VARYING_VECTORS = 0x8DFC;
const GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
const GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
const GL_MAX_VERTEX_ATTRIBS = 0x8869;
const GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
const GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
const GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
const GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
const GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
const GL_MAX_VERTEX_STREAMS = 0x8E71;
const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
const GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
const GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
const GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
const GL_MAX_VIEWPORTS = 0x825B;
const GL_MAX_VIEWPORT_DIMS = 0x0D3A;
const GL_MAX_WIDTH = 0x827E;
const GL_MEDIUM_FLOAT = 0x8DF1;
const GL_MEDIUM_INT = 0x8DF4;
const GL_MIN = 0x8007;
const GL_MINOR_VERSION = 0x821C;
const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
const GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
const GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
const GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;
const GL_MIPMAP = 0x8293;
const GL_MIRRORED_REPEAT = 0x8370;
const GL_MULTISAMPLE = 0x809D;
const GL_NAME_LENGTH = 0x92F9;
const GL_NAND = 0x150E;
const GL_NEAREST = 0x2600;
const GL_NEAREST_MIPMAP_LINEAR = 0x2702;
const GL_NEAREST_MIPMAP_NEAREST = 0x2700;
const GL_NEVER = 0x0200;
const GL_NICEST = 0x1102;
const GL_NONE = 0;
const GL_NOOP = 0x1505;
const GL_NOR = 0x1508;
const GL_NOTEQUAL = 0x0205;
const GL_NO_ERROR = 0;
const GL_NUM_ACTIVE_VARIABLES = 0x9304;
const GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
const GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
const GL_NUM_EXTENSIONS = 0x821D;
const GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
const GL_NUM_SAMPLE_COUNTS = 0x9380;
const GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
const GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
const GL_OBJECT_TYPE = 0x9112;
const GL_OFFSET = 0x92FC;
const GL_ONE = 1;
const GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
const GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
const GL_ONE_MINUS_DST_ALPHA = 0x0305;
const GL_ONE_MINUS_DST_COLOR = 0x0307;
const GL_ONE_MINUS_SRC1_ALPHA = 0x88FB;
const GL_ONE_MINUS_SRC1_COLOR = 0x88FA;
const GL_ONE_MINUS_SRC_ALPHA = 0x0303;
const GL_ONE_MINUS_SRC_COLOR = 0x0301;
const GL_OR = 0x1507;
const GL_OR_INVERTED = 0x150D;
const GL_OR_REVERSE = 0x150B;
const GL_OUT_OF_MEMORY = 0x0505;
const GL_PACK_ALIGNMENT = 0x0D05;
const GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
const GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
const GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
const GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
const GL_PACK_IMAGE_HEIGHT = 0x806C;
const GL_PACK_LSB_FIRST = 0x0D01;
const GL_PACK_ROW_LENGTH = 0x0D02;
const GL_PACK_SKIP_IMAGES = 0x806B;
const GL_PACK_SKIP_PIXELS = 0x0D04;
const GL_PACK_SKIP_ROWS = 0x0D03;
const GL_PACK_SWAP_BYTES = 0x0D00;
const GL_PATCHES = 0x000E;
const GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
const GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
const GL_PATCH_VERTICES = 0x8E72;
const GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
const GL_PIXEL_PACK_BUFFER = 0x88EB;
const GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
const GL_PIXEL_UNPACK_BUFFER = 0x88EC;
const GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
const GL_POINT = 0x1B00;
const GL_POINTS = 0x0000;
const GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
const GL_POINT_SIZE = 0x0B11;
const GL_POINT_SIZE_GRANULARITY = 0x0B13;
const GL_POINT_SIZE_RANGE = 0x0B12;
const GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
const GL_POLYGON_MODE = 0x0B40;
const GL_POLYGON_OFFSET_FACTOR = 0x8038;
const GL_POLYGON_OFFSET_FILL = 0x8037;
const GL_POLYGON_OFFSET_LINE = 0x2A02;
const GL_POLYGON_OFFSET_POINT = 0x2A01;
const GL_POLYGON_OFFSET_UNITS = 0x2A00;
const GL_POLYGON_SMOOTH = 0x0B41;
const GL_POLYGON_SMOOTH_HINT = 0x0C53;
const GL_PRIMITIVES_GENERATED = 0x8C87;
const GL_PRIMITIVE_RESTART = 0x8F9D;
const GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
const GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
const GL_PROGRAM = 0x82E2;
const GL_PROGRAM_BINARY_FORMATS = 0x87FF;
const GL_PROGRAM_BINARY_LENGTH = 0x8741;
const GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
const GL_PROGRAM_INPUT = 0x92E3;
const GL_PROGRAM_OUTPUT = 0x92E4;
const GL_PROGRAM_PIPELINE = 0x82E4;
const GL_PROGRAM_PIPELINE_BINDING = 0x825A;
const GL_PROGRAM_POINT_SIZE = 0x8642;
const GL_PROGRAM_SEPARABLE = 0x8258;
const GL_PROVOKING_VERTEX = 0x8E4F;
const GL_PROXY_TEXTURE_1D = 0x8063;
const GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
const GL_PROXY_TEXTURE_2D = 0x8064;
const GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
const GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
const GL_PROXY_TEXTURE_3D = 0x8070;
const GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
const GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
const GL_QUADS = 0x0007;
const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
const GL_QUERY = 0x82E3;
const GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
const GL_QUERY_BY_REGION_WAIT = 0x8E15;
const GL_QUERY_COUNTER_BITS = 0x8864;
const GL_QUERY_NO_WAIT = 0x8E14;
const GL_QUERY_RESULT = 0x8866;
const GL_QUERY_RESULT_AVAILABLE = 0x8867;
const GL_QUERY_WAIT = 0x8E13;
const GL_R11F_G11F_B10F = 0x8C3A;
const GL_R16 = 0x822A;
const GL_R16F = 0x822D;
const GL_R16I = 0x8233;
const GL_R16UI = 0x8234;
const GL_R16_SNORM = 0x8F98;
const GL_R32F = 0x822E;
const GL_R32I = 0x8235;
const GL_R32UI = 0x8236;
const GL_R3_G3_B2 = 0x2A10;
const GL_R8 = 0x8229;
const GL_R8I = 0x8231;
const GL_R8UI = 0x8232;
const GL_R8_SNORM = 0x8F94;
const GL_RASTERIZER_DISCARD = 0x8C89;
const GL_READ_BUFFER = 0x0C02;
const GL_READ_FRAMEBUFFER = 0x8CA8;
const GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
const GL_READ_ONLY = 0x88B8;
const GL_READ_PIXELS = 0x828C;
const GL_READ_PIXELS_FORMAT = 0x828D;
const GL_READ_PIXELS_TYPE = 0x828E;
const GL_READ_WRITE = 0x88BA;
const GL_RED = 0x1903;
const GL_RED_INTEGER = 0x8D94;
const GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B;
const GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
const GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
const GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
const GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
const GL_REFERENCED_BY_VERTEX_SHADER = 0x9306;
const GL_RENDERBUFFER = 0x8D41;
const GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
const GL_RENDERBUFFER_BINDING = 0x8CA7;
const GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
const GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
const GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
const GL_RENDERBUFFER_HEIGHT = 0x8D43;
const GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
const GL_RENDERBUFFER_RED_SIZE = 0x8D50;
const GL_RENDERBUFFER_SAMPLES = 0x8CAB;
const GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
const GL_RENDERBUFFER_WIDTH = 0x8D42;
const GL_RENDERER = 0x1F01;
const GL_REPEAT = 0x2901;
const GL_REPLACE = 0x1E01;
const GL_RG = 0x8227;
const GL_RG16 = 0x822C;
const GL_RG16F = 0x822F;
const GL_RG16I = 0x8239;
const GL_RG16UI = 0x823A;
const GL_RG16_SNORM = 0x8F99;
const GL_RG32F = 0x8230;
const GL_RG32I = 0x823B;
const GL_RG32UI = 0x823C;
const GL_RG8 = 0x822B;
const GL_RG8I = 0x8237;
const GL_RG8UI = 0x8238;
const GL_RG8_SNORM = 0x8F95;
const GL_RGB = 0x1907;
const GL_RGB10 = 0x8052;
const GL_RGB10_A2 = 0x8059;
const GL_RGB10_A2UI = 0x906F;
const GL_RGB12 = 0x8053;
const GL_RGB16 = 0x8054;
const GL_RGB16F = 0x881B;
const GL_RGB16I = 0x8D89;
const GL_RGB16UI = 0x8D77;
const GL_RGB16_SNORM = 0x8F9A;
const GL_RGB32F = 0x8815;
const GL_RGB32I = 0x8D83;
const GL_RGB32UI = 0x8D71;
const GL_RGB4 = 0x804F;
const GL_RGB5 = 0x8050;
const GL_RGB565 = 0x8D62;
const GL_RGB5_A1 = 0x8057;
const GL_RGB8 = 0x8051;
const GL_RGB8I = 0x8D8F;
const GL_RGB8UI = 0x8D7D;
const GL_RGB8_SNORM = 0x8F96;
const GL_RGB9_E5 = 0x8C3D;
const GL_RGBA = 0x1908;
const GL_RGBA12 = 0x805A;
const GL_RGBA16 = 0x805B;
const GL_RGBA16F = 0x881A;
const GL_RGBA16I = 0x8D88;
const GL_RGBA16UI = 0x8D76;
const GL_RGBA16_SNORM = 0x8F9B;
const GL_RGBA2 = 0x8055;
const GL_RGBA32F = 0x8814;
const GL_RGBA32I = 0x8D82;
const GL_RGBA32UI = 0x8D70;
const GL_RGBA4 = 0x8056;
const GL_RGBA8 = 0x8058;
const GL_RGBA8I = 0x8D8E;
const GL_RGBA8UI = 0x8D7C;
const GL_RGBA8_SNORM = 0x8F97;
const GL_RGBA_INTEGER = 0x8D99;
const GL_RGB_INTEGER = 0x8D98;
const GL_RG_INTEGER = 0x8228;
const GL_RIGHT = 0x0407;
const GL_SAMPLER = 0x82E6;
const GL_SAMPLER_1D = 0x8B5D;
const GL_SAMPLER_1D_ARRAY = 0x8DC0;
const GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
const GL_SAMPLER_1D_SHADOW = 0x8B61;
const GL_SAMPLER_2D = 0x8B5E;
const GL_SAMPLER_2D_ARRAY = 0x8DC1;
const GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
const GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
const GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
const GL_SAMPLER_2D_RECT = 0x8B63;
const GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
const GL_SAMPLER_2D_SHADOW = 0x8B62;
const GL_SAMPLER_3D = 0x8B5F;
const GL_SAMPLER_BINDING = 0x8919;
const GL_SAMPLER_BUFFER = 0x8DC2;
const GL_SAMPLER_CUBE = 0x8B60;
const GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;
const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
const GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
const GL_SAMPLES = 0x80A9;
const GL_SAMPLES_PASSED = 0x8914;
const GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
const GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
const GL_SAMPLE_BUFFERS = 0x80A8;
const GL_SAMPLE_COVERAGE = 0x80A0;
const GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
const GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
const GL_SAMPLE_MASK = 0x8E51;
const GL_SAMPLE_MASK_VALUE = 0x8E52;
const GL_SAMPLE_POSITION = 0x8E50;
const GL_SAMPLE_SHADING = 0x8C36;
const GL_SCISSOR_BOX = 0x0C10;
const GL_SCISSOR_TEST = 0x0C11;
const GL_SEPARATE_ATTRIBS = 0x8C8D;
const GL_SET = 0x150F;
const GL_SHADER = 0x82E1;
const GL_SHADER_BINARY_FORMATS = 0x8DF8;
const GL_SHADER_COMPILER = 0x8DFA;
const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
const GL_SHADER_IMAGE_ATOMIC = 0x82A6;
const GL_SHADER_IMAGE_LOAD = 0x82A4;
const GL_SHADER_IMAGE_STORE = 0x82A5;
const GL_SHADER_SOURCE_LENGTH = 0x8B88;
const GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000;
const GL_SHADER_STORAGE_BLOCK = 0x92E6;
const GL_SHADER_STORAGE_BUFFER = 0x90D2;
const GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
const GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
const GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
const GL_SHADER_STORAGE_BUFFER_START = 0x90D4;
const GL_SHADER_TYPE = 0x8B4F;
const GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
const GL_SHORT = 0x1402;
const GL_SIGNALED = 0x9119;
const GL_SIGNED_NORMALIZED = 0x8F9C;
const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
const GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
const GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
const GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
const GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
const GL_SRC1_ALPHA = 0x8589;
const GL_SRC1_COLOR = 0x88F9;
const GL_SRC_ALPHA = 0x0302;
const GL_SRC_ALPHA_SATURATE = 0x0308;
const GL_SRC_COLOR = 0x0300;
const GL_SRGB = 0x8C40;
const GL_SRGB8 = 0x8C41;
const GL_SRGB8_ALPHA8 = 0x8C43;
const GL_SRGB_ALPHA = 0x8C42;
const GL_SRGB_READ = 0x8297;
const GL_SRGB_WRITE = 0x8298;
const GL_STACK_OVERFLOW = 0x0503;
const GL_STACK_UNDERFLOW = 0x0504;
const GL_STATIC_COPY = 0x88E6;
const GL_STATIC_DRAW = 0x88E4;
const GL_STATIC_READ = 0x88E5;
const GL_STENCIL = 0x1802;
const GL_STENCIL_ATTACHMENT = 0x8D20;
const GL_STENCIL_BACK_FAIL = 0x8801;
const GL_STENCIL_BACK_FUNC = 0x8800;
const GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
const GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
const GL_STENCIL_BACK_REF = 0x8CA3;
const GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
const GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
const GL_STENCIL_BUFFER_BIT = 0x00000400;
const GL_STENCIL_CLEAR_VALUE = 0x0B91;
const GL_STENCIL_COMPONENTS = 0x8285;
const GL_STENCIL_FAIL = 0x0B94;
const GL_STENCIL_FUNC = 0x0B92;
const GL_STENCIL_INDEX = 0x1901;
const GL_STENCIL_INDEX1 = 0x8D46;
const GL_STENCIL_INDEX16 = 0x8D49;
const GL_STENCIL_INDEX4 = 0x8D47;
const GL_STENCIL_INDEX8 = 0x8D48;
const GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
const GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
const GL_STENCIL_REF = 0x0B97;
const GL_STENCIL_RENDERABLE = 0x8288;
const GL_STENCIL_TEST = 0x0B90;
const GL_STENCIL_VALUE_MASK = 0x0B93;
const GL_STENCIL_WRITEMASK = 0x0B98;
const GL_STEREO = 0x0C33;
const GL_STREAM_COPY = 0x88E2;
const GL_STREAM_DRAW = 0x88E0;
const GL_STREAM_READ = 0x88E1;
const GL_SUBPIXEL_BITS = 0x0D50;
const GL_SYNC_CONDITION = 0x9113;
const GL_SYNC_FENCE = 0x9116;
const GL_SYNC_FLAGS = 0x9115;
const GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
const GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
const GL_SYNC_STATUS = 0x9114;
const GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
const GL_TESS_CONTROL_SHADER = 0x8E88;
const GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
const GL_TESS_CONTROL_SUBROUTINE = 0x92E9;
const GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
const GL_TESS_CONTROL_TEXTURE = 0x829C;
const GL_TESS_EVALUATION_SHADER = 0x8E87;
const GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
const GL_TESS_EVALUATION_SUBROUTINE = 0x92EA;
const GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
const GL_TESS_EVALUATION_TEXTURE = 0x829D;
const GL_TESS_GEN_MODE = 0x8E76;
const GL_TESS_GEN_POINT_MODE = 0x8E79;
const GL_TESS_GEN_SPACING = 0x8E77;
const GL_TESS_GEN_VERTEX_ORDER = 0x8E78;
const GL_TEXTURE = 0x1702;
const GL_TEXTURE0 = 0x84C0;
const GL_TEXTURE1 = 0x84C1;
const GL_TEXTURE10 = 0x84CA;
const GL_TEXTURE11 = 0x84CB;
const GL_TEXTURE12 = 0x84CC;
const GL_TEXTURE13 = 0x84CD;
const GL_TEXTURE14 = 0x84CE;
const GL_TEXTURE15 = 0x84CF;
const GL_TEXTURE16 = 0x84D0;
const GL_TEXTURE17 = 0x84D1;
const GL_TEXTURE18 = 0x84D2;
const GL_TEXTURE19 = 0x84D3;
const GL_TEXTURE2 = 0x84C2;
const GL_TEXTURE20 = 0x84D4;
const GL_TEXTURE21 = 0x84D5;
const GL_TEXTURE22 = 0x84D6;
const GL_TEXTURE23 = 0x84D7;
const GL_TEXTURE24 = 0x84D8;
const GL_TEXTURE25 = 0x84D9;
const GL_TEXTURE26 = 0x84DA;
const GL_TEXTURE27 = 0x84DB;
const GL_TEXTURE28 = 0x84DC;
const GL_TEXTURE29 = 0x84DD;
const GL_TEXTURE3 = 0x84C3;
const GL_TEXTURE30 = 0x84DE;
const GL_TEXTURE31 = 0x84DF;
const GL_TEXTURE4 = 0x84C4;
const GL_TEXTURE5 = 0x84C5;
const GL_TEXTURE6 = 0x84C6;
const GL_TEXTURE7 = 0x84C7;
const GL_TEXTURE8 = 0x84C8;
const GL_TEXTURE9 = 0x84C9;
const GL_TEXTURE_1D = 0x0DE0;
const GL_TEXTURE_1D_ARRAY = 0x8C18;
const GL_TEXTURE_2D = 0x0DE1;
const GL_TEXTURE_2D_ARRAY = 0x8C1A;
const GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
const GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
const GL_TEXTURE_3D = 0x806F;
const GL_TEXTURE_ALPHA_SIZE = 0x805F;
const GL_TEXTURE_ALPHA_TYPE = 0x8C13;
const GL_TEXTURE_BASE_LEVEL = 0x813C;
const GL_TEXTURE_BINDING_1D = 0x8068;
const GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
const GL_TEXTURE_BINDING_2D = 0x8069;
const GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
const GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
const GL_TEXTURE_BINDING_3D = 0x806A;
const GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
const GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
const GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
const GL_TEXTURE_BLUE_SIZE = 0x805E;
const GL_TEXTURE_BLUE_TYPE = 0x8C12;
const GL_TEXTURE_BORDER_COLOR = 0x1004;
const GL_TEXTURE_BUFFER = 0x8C2A;
const GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
const GL_TEXTURE_BUFFER_OFFSET = 0x919D;
const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
const GL_TEXTURE_BUFFER_SIZE = 0x919E;
const GL_TEXTURE_COMPARE_FUNC = 0x884D;
const GL_TEXTURE_COMPARE_MODE = 0x884C;
const GL_TEXTURE_COMPRESSED = 0x86A1;
const GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
const GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
const GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
const GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
const GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
const GL_TEXTURE_CUBE_MAP = 0x8513;
const GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;
const GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
const GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
const GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
const GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
const GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
const GL_TEXTURE_DEPTH = 0x8071;
const GL_TEXTURE_DEPTH_SIZE = 0x884A;
const GL_TEXTURE_DEPTH_TYPE = 0x8C16;
const GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
const GL_TEXTURE_GATHER = 0x82A2;
const GL_TEXTURE_GATHER_SHADOW = 0x82A3;
const GL_TEXTURE_GREEN_SIZE = 0x805D;
const GL_TEXTURE_GREEN_TYPE = 0x8C11;
const GL_TEXTURE_HEIGHT = 0x1001;
const GL_TEXTURE_IMAGE_FORMAT = 0x828F;
const GL_TEXTURE_IMAGE_TYPE = 0x8290;
const GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;
const GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
const GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
const GL_TEXTURE_LOD_BIAS = 0x8501;
const GL_TEXTURE_MAG_FILTER = 0x2800;
const GL_TEXTURE_MAX_LEVEL = 0x813D;
const GL_TEXTURE_MAX_LOD = 0x813B;
const GL_TEXTURE_MIN_FILTER = 0x2801;
const GL_TEXTURE_MIN_LOD = 0x813A;
const GL_TEXTURE_RECTANGLE = 0x84F5;
const GL_TEXTURE_RED_SIZE = 0x805C;
const GL_TEXTURE_RED_TYPE = 0x8C10;
const GL_TEXTURE_SAMPLES = 0x9106;
const GL_TEXTURE_SHADOW = 0x82A1;
const GL_TEXTURE_SHARED_SIZE = 0x8C3F;
const GL_TEXTURE_STENCIL_SIZE = 0x88F1;
const GL_TEXTURE_SWIZZLE_A = 0x8E45;
const GL_TEXTURE_SWIZZLE_B = 0x8E44;
const GL_TEXTURE_SWIZZLE_G = 0x8E43;
const GL_TEXTURE_SWIZZLE_R = 0x8E42;
const GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;
const GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
const GL_TEXTURE_VIEW = 0x82B5;
const GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD;
const GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
const GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
const GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
const GL_TEXTURE_WIDTH = 0x1000;
const GL_TEXTURE_WRAP_R = 0x8072;
const GL_TEXTURE_WRAP_S = 0x2802;
const GL_TEXTURE_WRAP_T = 0x2803;
const GL_TIMEOUT_EXPIRED = 0x911B;
const GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
const GL_TIMESTAMP = 0x8E28;
const GL_TIME_ELAPSED = 0x88BF;
const GL_TOP_LEVEL_ARRAY_SIZE = 0x930C;
const GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D;
const GL_TRANSFORM_FEEDBACK = 0x8E22;
const GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
const GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
const GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
const GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
const GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
const GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
const GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
const GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4;
const GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
const GL_TRIANGLES = 0x0004;
const GL_TRIANGLES_ADJACENCY = 0x000C;
const GL_TRIANGLE_FAN = 0x0006;
const GL_TRIANGLE_STRIP = 0x0005;
const GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
const GL_TRUE = 1;
const GL_TYPE = 0x92FA;
const GL_UNDEFINED_VERTEX = 0x8260;
const GL_UNIFORM = 0x92E1;
const GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
const GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
const GL_UNIFORM_BARRIER_BIT = 0x00000004;
const GL_UNIFORM_BLOCK = 0x92E2;
const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
const GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
const GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
const GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
const GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
const GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
const GL_UNIFORM_BUFFER = 0x8A11;
const GL_UNIFORM_BUFFER_BINDING = 0x8A28;
const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
const GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
const GL_UNIFORM_BUFFER_START = 0x8A29;
const GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
const GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
const GL_UNIFORM_NAME_LENGTH = 0x8A39;
const GL_UNIFORM_OFFSET = 0x8A3B;
const GL_UNIFORM_SIZE = 0x8A38;
const GL_UNIFORM_TYPE = 0x8A37;
const GL_UNPACK_ALIGNMENT = 0x0CF5;
const GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
const GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
const GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
const GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
const GL_UNPACK_IMAGE_HEIGHT = 0x806E;
const GL_UNPACK_LSB_FIRST = 0x0CF1;
const GL_UNPACK_ROW_LENGTH = 0x0CF2;
const GL_UNPACK_SKIP_IMAGES = 0x806D;
const GL_UNPACK_SKIP_PIXELS = 0x0CF4;
const GL_UNPACK_SKIP_ROWS = 0x0CF3;
const GL_UNPACK_SWAP_BYTES = 0x0CF0;
const GL_UNSIGNALED = 0x9118;
const GL_UNSIGNED_BYTE = 0x1401;
const GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
const GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
const GL_UNSIGNED_INT = 0x1405;
const GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
const GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
const GL_UNSIGNED_INT_24_8 = 0x84FA;
const GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
const GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
const GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
const GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
const GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
const GL_UNSIGNED_INT_IMAGE_1D = 0x9062;
const GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
const GL_UNSIGNED_INT_IMAGE_2D = 0x9063;
const GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
const GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
const GL_UNSIGNED_INT_IMAGE_3D = 0x9064;
const GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
const GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066;
const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
const GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
const GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
const GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
const GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
const GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
const GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
const GL_UNSIGNED_INT_VEC2 = 0x8DC6;
const GL_UNSIGNED_INT_VEC3 = 0x8DC7;
const GL_UNSIGNED_INT_VEC4 = 0x8DC8;
const GL_UNSIGNED_NORMALIZED = 0x8C17;
const GL_UNSIGNED_SHORT = 0x1403;
const GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
const GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
const GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
const GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
const GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
const GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
const GL_UPPER_LEFT = 0x8CA2;
const GL_VALIDATE_STATUS = 0x8B83;
const GL_VENDOR = 0x1F00;
const GL_VERSION = 0x1F02;
const GL_VERTEX_ARRAY = 0x8074;
const GL_VERTEX_ARRAY_BINDING = 0x85B5;
const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
const GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
const GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
const GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
const GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E;
const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
const GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
const GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
const GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
const GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
const GL_VERTEX_ATTRIB_BINDING = 0x82D4;
const GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
const GL_VERTEX_BINDING_BUFFER = 0x8F4F;
const GL_VERTEX_BINDING_DIVISOR = 0x82D6;
const GL_VERTEX_BINDING_OFFSET = 0x82D7;
const GL_VERTEX_BINDING_STRIDE = 0x82D8;
const GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
const GL_VERTEX_SHADER = 0x8B31;
const GL_VERTEX_SHADER_BIT = 0x00000001;
const GL_VERTEX_SUBROUTINE = 0x92E8;
const GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
const GL_VERTEX_TEXTURE = 0x829B;
const GL_VIEWPORT = 0x0BA2;
const GL_VIEWPORT_BOUNDS_RANGE = 0x825D;
const GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
const GL_VIEWPORT_SUBPIXEL_BITS = 0x825C;
const GL_VIEW_CLASS_128_BITS = 0x82C4;
const GL_VIEW_CLASS_16_BITS = 0x82CA;
const GL_VIEW_CLASS_24_BITS = 0x82C9;
const GL_VIEW_CLASS_32_BITS = 0x82C8;
const GL_VIEW_CLASS_48_BITS = 0x82C7;
const GL_VIEW_CLASS_64_BITS = 0x82C6;
const GL_VIEW_CLASS_8_BITS = 0x82CB;
const GL_VIEW_CLASS_96_BITS = 0x82C5;
const GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3;
const GL_VIEW_CLASS_BPTC_UNORM = 0x82D2;
const GL_VIEW_CLASS_RGTC1_RED = 0x82D0;
const GL_VIEW_CLASS_RGTC2_RG = 0x82D1;
const GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
const GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
const GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
const GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
const GL_VIEW_COMPATIBILITY_CLASS = 0x82B6;
const GL_WAIT_FAILED = 0x911D;
const GL_WRITE_ONLY = 0x88B9;
const GL_XOR = 0x1506;
const GL_ZERO = 0;


type GLintptr = int64;
type GLint64 = int64;
type GLuint64 = uint64;
type GLsizeiptr = int64;

type __GLsync;
type GLsync = __GLsync*;

type GLenum = uint32;
type GLboolean = uint8;
type GLbitfield = uint32;
type GLvoid = void;
type GLbyte = int8;
type GLubyte = uint8;
type GLshort = int16;
type GLushort = uint16;
type GLint = int32;
type GLuint = uint32;
type GLclampx = int32;
type GLsizei = int32;
type GLfloat = float32;
type GLclampf = float32;
type GLdouble = float64;
type GLclampd = float64;
type GLeglClientBufferEXT = void*;
type GLeglImageOES = void*;
type GLchar = char;
type GLcharARB = char;

type GLDEBUGPROC = void(GLenum /*source*/, GLenum /*type*/, GLuint /*id*/, GLenum /*severity*/, GLsizei /*length*/, /*const*/ GLchar* /*message*/, /*const*/ void* /*userParam*/);

type proc_glActiveShaderProgram                         = void(GLuint /*pipeline*/, GLuint /*program*/);
type proc_glActiveTexture                               = void(GLenum /*texture*/);
type proc_glAttachShader                                = void(GLuint /*program*/, GLuint /*shader*/);
type proc_glBeginConditionalRender                      = void(GLuint /*id*/, GLenum /*mode*/);
type proc_glBeginQuery                                  = void(GLenum /*target*/, GLuint /*id*/);
type proc_glBeginQueryIndexed                           = void(GLenum /*target*/, GLuint /*index*/, GLuint /*id*/);
type proc_glBeginTransformFeedback                      = void(GLenum /*primitiveMode*/);
type proc_glBindAttribLocation                          = void(GLuint /*program*/, GLuint /*index*/, /*const*/ GLchar* /*name*/);
type proc_glBindBuffer                                  = void(GLenum /*target*/, GLuint /*buffer*/);
type proc_glBindBufferBase                              = void(GLenum /*target*/, GLuint /*index*/, GLuint /*buffer*/);
type proc_glBindBufferRange                             = void(GLenum /*target*/, GLuint /*index*/, GLuint /*buffer*/, GLintptr /*offset*/, GLsizeiptr /*size*/);
type proc_glBindFragDataLocation                        = void(GLuint /*program*/, GLuint /*color*/, /*const*/ GLchar* /*name*/);
type proc_glBindFragDataLocationIndexed                 = void(GLuint /*program*/, GLuint /*colorNumber*/, GLuint /*index*/, /*const*/ GLchar* /*name*/);
type proc_glBindFramebuffer                             = void(GLenum /*target*/, GLuint /*framebuffer*/);
type proc_glBindImageTexture                            = void(GLuint /*unit*/, GLuint /*texture*/, GLint /*level*/, GLboolean /*layered*/, GLint /*layer*/, GLenum /*access*/, GLenum /*format*/);
type proc_glBindProgramPipeline                         = void(GLuint /*pipeline*/);
type proc_glBindRenderbuffer                            = void(GLenum /*target*/, GLuint /*renderbuffer*/);
type proc_glBindSampler                                 = void(GLuint /*unit*/, GLuint /*sampler*/);
type proc_glBindTexture                                 = void(GLenum /*target*/, GLuint /*texture*/);
type proc_glBindTransformFeedback                       = void(GLenum /*target*/, GLuint /*id*/);
type proc_glBindVertexArray                             = void(GLuint /*array*/);
type proc_glBindVertexBuffer                            = void(GLuint /*bindingindex*/, GLuint /*buffer*/, GLintptr /*offset*/, GLsizei /*stride*/);
type proc_glBlendColor                                  = void(GLfloat /*red*/, GLfloat /*green*/, GLfloat /*blue*/, GLfloat /*alpha*/);
type proc_glBlendEquation                               = void(GLenum /*mode*/);
type proc_glBlendEquationSeparate                       = void(GLenum /*modeRGB*/, GLenum /*modeAlpha*/);
type proc_glBlendEquationSeparatei                      = void(GLuint /*buf*/, GLenum /*modeRGB*/, GLenum /*modeAlpha*/);
type proc_glBlendEquationi                              = void(GLuint /*buf*/, GLenum /*mode*/);
type proc_glBlendFunc                                   = void(GLenum /*sfactor*/, GLenum /*dfactor*/);
type proc_glBlendFuncSeparate                           = void(GLenum /*sfactorRGB*/, GLenum /*dfactorRGB*/, GLenum /*sfactorAlpha*/, GLenum /*dfactorAlpha*/);
type proc_glBlendFuncSeparatei                          = void(GLuint /*buf*/, GLenum /*srcRGB*/, GLenum /*dstRGB*/, GLenum /*srcAlpha*/, GLenum /*dstAlpha*/);
type proc_glBlendFunci                                  = void(GLuint /*buf*/, GLenum /*src*/, GLenum /*dst*/);
type proc_glBlitFramebuffer                             = void(GLint /*srcX0*/, GLint /*srcY0*/, GLint /*srcX1*/, GLint /*srcY1*/, GLint /*dstX0*/, GLint /*dstY0*/, GLint /*dstX1*/, GLint /*dstY1*/, GLbitfield /*mask*/, GLenum /*filter*/);
type proc_glBufferData                                  = void(GLenum /*target*/, GLsizeiptr /*size*/, /*const*/ void* /*data*/, GLenum /*usage*/);
type proc_glBufferSubData                               = void(GLenum /*target*/, GLintptr /*offset*/, GLsizeiptr /*size*/, /*const*/ void* /*data*/);
type proc_glCheckFramebufferStatus                      = GLenum(GLenum /*target*/);
type proc_glClampColor                                  = void(GLenum /*target*/, GLenum /*clamp*/);
type proc_glClear                                       = void(GLbitfield /*mask*/);
type proc_glClearBufferData                             = void(GLenum /*target*/, GLenum /*internalformat*/, GLenum /*format*/, GLenum /*type*/, /*const*/ void* /*data*/);
type proc_glClearBufferSubData                          = void(GLenum /*target*/, GLenum /*internalformat*/, GLintptr /*offset*/, GLsizeiptr /*size*/, GLenum /*format*/, GLenum /*type*/, /*const*/ void* /*data*/);
type proc_glClearBufferfi                               = void(GLenum /*buffer*/, GLint /*drawbuffer*/, GLfloat /*depth*/, GLint /*stencil*/);
type proc_glClearBufferfv                               = void(GLenum /*buffer*/, GLint /*drawbuffer*/, /*const*/ GLfloat* /*value*/);
type proc_glClearBufferiv                               = void(GLenum /*buffer*/, GLint /*drawbuffer*/, /*const*/ GLint* /*value*/);
type proc_glClearBufferuiv                              = void(GLenum /*buffer*/, GLint /*drawbuffer*/, /*const*/ GLuint* /*value*/);
type proc_glClearColor                                  = void(GLfloat /*red*/, GLfloat /*green*/, GLfloat /*blue*/, GLfloat /*alpha*/);
type proc_glClearDepth                                  = void(GLdouble /*depth*/);
type proc_glClearDepthf                                 = void(GLfloat /*d*/);
type proc_glClearStencil                                = void(GLint /*s*/);
type proc_glClientWaitSync                              = GLenum(GLsync /*sync*/, GLbitfield /*flags*/, GLuint64 /*timeout*/);
type proc_glColorMask                                   = void(GLboolean /*red*/, GLboolean /*green*/, GLboolean /*blue*/, GLboolean /*alpha*/);
type proc_glColorMaski                                  = void(GLuint /*index*/, GLboolean /*r*/, GLboolean /*g*/, GLboolean /*b*/, GLboolean /*a*/);
type proc_glCompileShader                               = void(GLuint /*shader*/);
type proc_glCompressedTexImage1D                        = void(GLenum /*target*/, GLint /*level*/, GLenum /*internalformat*/, GLsizei /*width*/, GLint /*border*/, GLsizei /*imageSize*/, /*const*/ void* /*data*/);
type proc_glCompressedTexImage2D                        = void(GLenum /*target*/, GLint /*level*/, GLenum /*internalformat*/, GLsizei /*width*/, GLsizei /*height*/, GLint /*border*/, GLsizei /*imageSize*/, /*const*/ void* /*data*/);
type proc_glCompressedTexImage3D                        = void(GLenum /*target*/, GLint /*level*/, GLenum /*internalformat*/, GLsizei /*width*/, GLsizei /*height*/, GLsizei /*depth*/, GLint /*border*/, GLsizei /*imageSize*/, /*const*/ void* /*data*/);
type proc_glCompressedTexSubImage1D                     = void(GLenum /*target*/, GLint /*level*/, GLint /*xoffset*/, GLsizei /*width*/, GLenum /*format*/, GLsizei /*imageSize*/, /*const*/ void* /*data*/);
type proc_glCompressedTexSubImage2D                     = void(GLenum /*target*/, GLint /*level*/, GLint /*xoffset*/, GLint /*yoffset*/, GLsizei /*width*/, GLsizei /*height*/, GLenum /*format*/, GLsizei /*imageSize*/, /*const*/ void* /*data*/);
type proc_glCompressedTexSubImage3D                     = void(GLenum /*target*/, GLint /*level*/, GLint /*xoffset*/, GLint /*yoffset*/, GLint /*zoffset*/, GLsizei /*width*/, GLsizei /*height*/, GLsizei /*depth*/, GLenum /*format*/, GLsizei /*imageSize*/, /*const*/ void* /*data*/);
type proc_glCopyBufferSubData                           = void(GLenum /*readTarget*/, GLenum /*writeTarget*/, GLintptr /*readOffset*/, GLintptr /*writeOffset*/, GLsizeiptr /*size*/);
type proc_glCopyImageSubData                            = void(GLuint /*srcName*/, GLenum /*srcTarget*/, GLint /*srcLevel*/, GLint /*srcX*/, GLint /*srcY*/, GLint /*srcZ*/, GLuint /*dstName*/, GLenum /*dstTarget*/, GLint /*dstLevel*/, GLint /*dstX*/, GLint /*dstY*/, GLint /*dstZ*/, GLsizei /*srcWidth*/, GLsizei /*srcHeight*/, GLsizei /*srcDepth*/);
type proc_glCopyTexImage1D                              = void(GLenum /*target*/, GLint /*level*/, GLenum /*internalformat*/, GLint /*x*/, GLint /*y*/, GLsizei /*width*/, GLint /*border*/);
type proc_glCopyTexImage2D                              = void(GLenum /*target*/, GLint /*level*/, GLenum /*internalformat*/, GLint /*x*/, GLint /*y*/, GLsizei /*width*/, GLsizei /*height*/, GLint /*border*/);
type proc_glCopyTexSubImage1D                           = void(GLenum /*target*/, GLint /*level*/, GLint /*xoffset*/, GLint /*x*/, GLint /*y*/, GLsizei /*width*/);
type proc_glCopyTexSubImage2D                           = void(GLenum /*target*/, GLint /*level*/, GLint /*xoffset*/, GLint /*yoffset*/, GLint /*x*/, GLint /*y*/, GLsizei /*width*/, GLsizei /*height*/);
type proc_glCopyTexSubImage3D                           = void(GLenum /*target*/, GLint /*level*/, GLint /*xoffset*/, GLint /*yoffset*/, GLint /*zoffset*/, GLint /*x*/, GLint /*y*/, GLsizei /*width*/, GLsizei /*height*/);
type proc_glCreateProgram                               = GLuint();
type proc_glCreateShader                                = GLuint(GLenum /*type*/);
type proc_glCreateShaderProgramv                        = GLuint(GLenum /*type*/, GLsizei /*count*/, /*const*/ GLchar*/*const*/* /*strings*/);
type proc_glCullFace                                    = void(GLenum /*mode*/);
type proc_glDebugMessageCallback                        = void(GLDEBUGPROC /*callback*/, /*const*/ void* /*userParam*/);
type proc_glDebugMessageControl                         = void(GLenum /*source*/, GLenum /*type*/, GLenum /*severity*/, GLsizei /*count*/, /*const*/ GLuint* /*ids*/, GLboolean /*enabled*/);
type proc_glDebugMessageInsert                          = void(GLenum /*source*/, GLenum /*type*/, GLuint /*id*/, GLenum /*severity*/, GLsizei /*length*/, /*const*/ GLchar* /*buf*/);
type proc_glDeleteBuffers                               = void(GLsizei /*n*/, /*const*/ GLuint* /*buffers*/);
type proc_glDeleteFramebuffers                          = void(GLsizei /*n*/, /*const*/ GLuint* /*framebuffers*/);
type proc_glDeleteProgram                               = void(GLuint /*program*/);
type proc_glDeleteProgramPipelines                      = void(GLsizei /*n*/, /*const*/ GLuint* /*pipelines*/);
type proc_glDeleteQueries                               = void(GLsizei /*n*/, /*const*/ GLuint* /*ids*/);
type proc_glDeleteRenderbuffers                         = void(GLsizei /*n*/, /*const*/ GLuint* /*renderbuffers*/);
type proc_glDeleteSamplers                              = void(GLsizei /*count*/, /*const*/ GLuint* /*samplers*/);
type proc_glDeleteShader                                = void(GLuint /*shader*/);
type proc_glDeleteSync                                  = void(GLsync /*sync*/);
type proc_glDeleteTextures                              = void(GLsizei /*n*/, /*const*/ GLuint* /*textures*/);
type proc_glDeleteTransformFeedbacks                    = void(GLsizei /*n*/, /*const*/ GLuint* /*ids*/);
type proc_glDeleteVertexArrays                          = void(GLsizei /*n*/, /*const*/ GLuint* /*arrays*/);
type proc_glDepthFunc                                   = void(GLenum /*func*/);
type proc_glDepthMask                                   = void(GLboolean /*flag*/);
type proc_glDepthRange                                  = void(GLdouble /*n*/, GLdouble /*f*/);
type proc_glDepthRangeArrayv                            = void(GLuint /*first*/, GLsizei /*count*/, /*const*/ GLdouble* /*v*/);
type proc_glDepthRangeIndexed                           = void(GLuint /*index*/, GLdouble /*n*/, GLdouble /*f*/);
type proc_glDepthRangef                                 = void(GLfloat /*n*/, GLfloat /*f*/);
type proc_glDetachShader                                = void(GLuint /*program*/, GLuint /*shader*/);
type proc_glDisable                                     = void(GLenum /*cap*/);
type proc_glDisableVertexAttribArray                    = void(GLuint /*index*/);
type proc_glDisablei                                    = void(GLenum /*target*/, GLuint /*index*/);
type proc_glDispatchCompute                             = void(GLuint /*num_groups_x*/, GLuint /*num_groups_y*/, GLuint /*num_groups_z*/);
type proc_glDispatchComputeIndirect                     = void(GLintptr /*indirect*/);
type proc_glDrawArrays                                  = void(GLenum /*mode*/, GLint /*first*/, GLsizei /*count*/);
type proc_glDrawArraysIndirect                          = void(GLenum /*mode*/, /*const*/ void* /*indirect*/);
type proc_glDrawArraysInstanced                         = void(GLenum /*mode*/, GLint /*first*/, GLsizei /*count*/, GLsizei /*instancecount*/);
type proc_glDrawArraysInstancedBaseInstance             = void(GLenum /*mode*/, GLint /*first*/, GLsizei /*count*/, GLsizei /*instancecount*/, GLuint /*baseinstance*/);
type proc_glDrawBuffer                                  = void(GLenum /*buf*/);
type proc_glDrawBuffers                                 = void(GLsizei /*n*/, /*const*/ GLenum* /*bufs*/);
type proc_glDrawElements                                = void(GLenum /*mode*/, GLsizei /*count*/, GLenum /*type*/, /*const*/ void* /*indices*/);
type proc_glDrawElementsBaseVertex                      = void(GLenum /*mode*/, GLsizei /*count*/, GLenum /*type*/, /*const*/ void* /*indices*/, GLint /*basevertex*/);
type proc_glDrawElementsIndirect                        = void(GLenum /*mode*/, GLenum /*type*/, /*const*/ void* /*indirect*/);
type proc_glDrawElementsInstanced                       = void(GLenum /*mode*/, GLsizei /*count*/, GLenum /*type*/, /*const*/ void* /*indices*/, GLsizei /*instancecount*/);
type proc_glDrawElementsInstancedBaseInstance           = void(GLenum /*mode*/, GLsizei /*count*/, GLenum /*type*/, /*const*/ void* /*indices*/, GLsizei /*instancecount*/, GLuint /*baseinstance*/);
type proc_glDrawElementsInstancedBaseVertex             = void(GLenum /*mode*/, GLsizei /*count*/, GLenum /*type*/, /*const*/ void* /*indices*/, GLsizei /*instancecount*/, GLint /*basevertex*/);
type proc_glDrawElementsInstancedBaseVertexBaseInstance = void(GLenum /*mode*/, GLsizei /*count*/, GLenum /*type*/, /*const*/ void* /*indices*/, GLsizei /*instancecount*/, GLint /*basevertex*/, GLuint /*baseinstance*/);
type proc_glDrawRangeElements                           = void(GLenum /*mode*/, GLuint /*start*/, GLuint /*end*/, GLsizei /*count*/, GLenum /*type*/, /*const*/ void* /*indices*/);
type proc_glDrawRangeElementsBaseVertex                 = void(GLenum /*mode*/, GLuint /*start*/, GLuint /*end*/, GLsizei /*count*/, GLenum /*type*/, /*const*/ void* /*indices*/, GLint /*basevertex*/);
type proc_glDrawTransformFeedback                       = void(GLenum /*mode*/, GLuint /*id*/);
type proc_glDrawTransformFeedbackInstanced              = void(GLenum /*mode*/, GLuint /*id*/, GLsizei /*instancecount*/);
type proc_glDrawTransformFeedbackStream                 = void(GLenum /*mode*/, GLuint /*id*/, GLuint /*stream*/);
type proc_glDrawTransformFeedbackStreamInstanced        = void(GLenum /*mode*/, GLuint /*id*/, GLuint /*stream*/, GLsizei /*instancecount*/);
type proc_glEnable                                      = void(GLenum /*cap*/);
type proc_glEnableVertexAttribArray                     = void(GLuint /*index*/);
type proc_glEnablei                                     = void(GLenum /*target*/, GLuint /*index*/);
type proc_glEndConditionalRender                        = void();
type proc_glEndQuery                                    = void(GLenum /*target*/);
type proc_glEndQueryIndexed                             = void(GLenum /*target*/, GLuint /*index*/);
type proc_glEndTransformFeedback                        = void();
type proc_glFenceSync                                   = GLsync(GLenum /*condition*/, GLbitfield /*flags*/);
type proc_glFinish                                      = void();
type proc_glFlush                                       = void();
type proc_glFlushMappedBufferRange                      = void(GLenum /*target*/, GLintptr /*offset*/, GLsizeiptr /*length*/);
type proc_glFramebufferParameteri                       = void(GLenum /*target*/, GLenum /*pname*/, GLint /*param*/);
type proc_glFramebufferRenderbuffer                     = void(GLenum /*target*/, GLenum /*attachment*/, GLenum /*renderbuffertarget*/, GLuint /*renderbuffer*/);
type proc_glFramebufferTexture                          = void(GLenum /*target*/, GLenum /*attachment*/, GLuint /*texture*/, GLint /*level*/);
type proc_glFramebufferTexture1D                        = void(GLenum /*target*/, GLenum /*attachment*/, GLenum /*textarget*/, GLuint /*texture*/, GLint /*level*/);
type proc_glFramebufferTexture2D                        = void(GLenum /*target*/, GLenum /*attachment*/, GLenum /*textarget*/, GLuint /*texture*/, GLint /*level*/);
type proc_glFramebufferTexture3D                        = void(GLenum /*target*/, GLenum /*attachment*/, GLenum /*textarget*/, GLuint /*texture*/, GLint /*level*/, GLint /*zoffset*/);
type proc_glFramebufferTextureLayer                     = void(GLenum /*target*/, GLenum /*attachment*/, GLuint /*texture*/, GLint /*level*/, GLint /*layer*/);
type proc_glFrontFace                                   = void(GLenum /*mode*/);
type proc_glGenBuffers                                  = void(GLsizei /*n*/, GLuint* /*buffers*/);
type proc_glGenFramebuffers                             = void(GLsizei /*n*/, GLuint* /*framebuffers*/);
type proc_glGenProgramPipelines                         = void(GLsizei /*n*/, GLuint* /*pipelines*/);
type proc_glGenQueries                                  = void(GLsizei /*n*/, GLuint* /*ids*/);
type proc_glGenRenderbuffers                            = void(GLsizei /*n*/, GLuint* /*renderbuffers*/);
type proc_glGenSamplers                                 = void(GLsizei /*count*/, GLuint* /*samplers*/);
type proc_glGenTextures                                 = void(GLsizei /*n*/, GLuint* /*textures*/);
type proc_glGenTransformFeedbacks                       = void(GLsizei /*n*/, GLuint* /*ids*/);
type proc_glGenVertexArrays                             = void(GLsizei /*n*/, GLuint* /*arrays*/);
type proc_glGenerateMipmap                              = void(GLenum /*target*/);
type proc_glGetActiveAtomicCounterBufferiv              = void(GLuint /*program*/, GLuint /*bufferIndex*/, GLenum /*pname*/, GLint* /*params*/);
type proc_glGetActiveAttrib                             = void(GLuint /*program*/, GLuint /*index*/, GLsizei /*bufSize*/, GLsizei* /*length*/, GLint* /*size*/, GLenum* /*type*/, GLchar* /*name*/);
type proc_glGetActiveSubroutineName                     = void(GLuint /*program*/, GLenum /*shadertype*/, GLuint /*index*/, GLsizei /*bufSize*/, GLsizei* /*length*/, GLchar* /*name*/);
type proc_glGetActiveSubroutineUniformName              = void(GLuint /*program*/, GLenum /*shadertype*/, GLuint /*index*/, GLsizei /*bufSize*/, GLsizei* /*length*/, GLchar* /*name*/);
type proc_glGetActiveSubroutineUniformiv                = void(GLuint /*program*/, GLenum /*shadertype*/, GLuint /*index*/, GLenum /*pname*/, GLint* /*values*/);
type proc_glGetActiveUniform                            = void(GLuint /*program*/, GLuint /*index*/, GLsizei /*bufSize*/, GLsizei* /*length*/, GLint* /*size*/, GLenum* /*type*/, GLchar* /*name*/);
type proc_glGetActiveUniformBlockName                   = void(GLuint /*program*/, GLuint /*uniformBlockIndex*/, GLsizei /*bufSize*/, GLsizei* /*length*/, GLchar* /*uniformBlockName*/);
type proc_glGetActiveUniformBlockiv                     = void(GLuint /*program*/, GLuint /*uniformBlockIndex*/, GLenum /*pname*/, GLint* /*params*/);
type proc_glGetActiveUniformName                        = void(GLuint /*program*/, GLuint /*uniformIndex*/, GLsizei /*bufSize*/, GLsizei* /*length*/, GLchar* /*uniformName*/);
type proc_glGetActiveUniformsiv                         = void(GLuint /*program*/, GLsizei /*uniformCount*/, /*const*/ GLuint* /*uniformIndices*/, GLenum /*pname*/, GLint* /*params*/);
type proc_glGetAttachedShaders                          = void(GLuint /*program*/, GLsizei /*maxCount*/, GLsizei* /*count*/, GLuint* /*shaders*/);
type proc_glGetAttribLocation                           = GLint(GLuint /*program*/, /*const*/ GLchar* /*name*/);
type proc_glGetBooleani_v                               = void(GLenum /*target*/, GLuint /*index*/, GLboolean* /*data*/);
type proc_glGetBooleanv                                 = void(GLenum /*pname*/, GLboolean* /*data*/);
type proc_glGetBufferParameteri64v                      = void(GLenum /*target*/, GLenum /*pname*/, GLint64* /*params*/);
type proc_glGetBufferParameteriv                        = void(GLenum /*target*/, GLenum /*pname*/, GLint* /*params*/);
type proc_glGetBufferPointerv                           = void(GLenum /*target*/, GLenum /*pname*/, void** /*params*/);
type proc_glGetBufferSubData                            = void(GLenum /*target*/, GLintptr /*offset*/, GLsizeiptr /*size*/, void* /*data*/);
type proc_glGetCompressedTexImage                       = void(GLenum /*target*/, GLint /*level*/, void* /*img*/);
type proc_glGetDebugMessageLog                          = GLuint(GLuint /*count*/, GLsizei /*bufSize*/, GLenum* /*sources*/, GLenum* /*types*/, GLuint* /*ids*/, GLenum* /*severities*/, GLsizei* /*lengths*/, GLchar* /*messageLog*/);
type proc_glGetDoublei_v                                = void(GLenum /*target*/, GLuint /*index*/, GLdouble* /*data*/);
type proc_glGetDoublev                                  = void(GLenum /*pname*/, GLdouble* /*data*/);
type proc_glGetError                                    = GLenum();
type proc_glGetFloati_v                                 = void(GLenum /*target*/, GLuint /*index*/, GLfloat* /*data*/);
type proc_glGetFloatv                                   = void(GLenum /*pname*/, GLfloat* /*data*/);
type proc_glGetFragDataIndex                            = GLint(GLuint /*program*/, /*const*/ GLchar* /*name*/);
type proc_glGetFragDataLocation                         = GLint(GLuint /*program*/, /*const*/ GLchar* /*name*/);
type proc_glGetFramebufferAttachmentParameteriv         = void(GLenum /*target*/, GLenum /*attachment*/, GLenum /*pname*/, GLint* /*params*/);
type proc_glGetFramebufferParameteriv                   = void(GLenum /*target*/, GLenum /*pname*/, GLint* /*params*/);
type proc_glGetInteger64i_v                             = void(GLenum /*target*/, GLuint /*index*/, GLint64* /*data*/);
type proc_glGetInteger64v                               = void(GLenum /*pname*/, GLint64* /*data*/);
type proc_glGetIntegeri_v                               = void(GLenum /*target*/, GLuint /*index*/, GLint* /*data*/);
type proc_glGetIntegerv                                 = void(GLenum /*pname*/, GLint* /*data*/);
type proc_glGetInternalformati64v                       = void(GLenum /*target*/, GLenum /*internalformat*/, GLenum /*pname*/, GLsizei /*count*/, GLint64* /*params*/);
type proc_glGetInternalformativ                         = void(GLenum /*target*/, GLenum /*internalformat*/, GLenum /*pname*/, GLsizei /*count*/, GLint* /*params*/);
type proc_glGetMultisamplefv                            = void(GLenum /*pname*/, GLuint /*index*/, GLfloat* /*val*/);
type proc_glGetObjectLabel                              = void(GLenum /*identifier*/, GLuint /*name*/, GLsizei /*bufSize*/, GLsizei* /*length*/, GLchar* /*label*/);
type proc_glGetObjectPtrLabel                           = void(/*const*/ void* /*ptr*/, GLsizei /*bufSize*/, GLsizei* /*length*/, GLchar* /*label*/);
type proc_glGetPointerv                                 = void(GLenum /*pname*/, void** /*params*/);
type proc_glGetProgramBinary                            = void(GLuint /*program*/, GLsizei /*bufSize*/, GLsizei* /*length*/, GLenum* /*binaryFormat*/, void* /*binary*/);
type proc_glGetProgramInfoLog                           = void(GLuint /*program*/, GLsizei /*bufSize*/, GLsizei* /*length*/, GLchar* /*infoLog*/);
type proc_glGetProgramInterfaceiv                       = void(GLuint /*program*/, GLenum /*programInterface*/, GLenum /*pname*/, GLint* /*params*/);
type proc_glGetProgramPipelineInfoLog                   = void(GLuint /*pipeline*/, GLsizei /*bufSize*/, GLsizei* /*length*/, GLchar* /*infoLog*/);
type proc_glGetProgramPipelineiv                        = void(GLuint /*pipeline*/, GLenum /*pname*/, GLint* /*params*/);
type proc_glGetProgramResourceIndex                     = GLuint(GLuint /*program*/, GLenum /*programInterface*/, /*const*/ GLchar* /*name*/);
type proc_glGetProgramResourceLocation                  = GLint(GLuint /*program*/, GLenum /*programInterface*/, /*const*/ GLchar* /*name*/);
type proc_glGetProgramResourceLocationIndex             = GLint(GLuint /*program*/, GLenum /*programInterface*/, /*const*/ GLchar* /*name*/);
type proc_glGetProgramResourceName                      = void(GLuint /*program*/, GLenum /*programInterface*/, GLuint /*index*/, GLsizei /*bufSize*/, GLsizei* /*length*/, GLchar* /*name*/);
type proc_glGetProgramResourceiv                        = void(GLuint /*program*/, GLenum /*programInterface*/, GLuint /*index*/, GLsizei /*propCount*/, /*const*/ GLenum* /*props*/, GLsizei /*count*/, GLsizei* /*length*/, GLint* /*params*/);
type proc_glGetProgramStageiv                           = void(GLuint /*program*/, GLenum /*shadertype*/, GLenum /*pname*/, GLint* /*values*/);
type proc_glGetProgramiv                                = void(GLuint /*program*/, GLenum /*pname*/, GLint* /*params*/);
type proc_glGetQueryIndexediv                           = void(GLenum /*target*/, GLuint /*index*/, GLenum /*pname*/, GLint* /*params*/);
type proc_glGetQueryObjecti64v                          = void(GLuint /*id*/, GLenum /*pname*/, GLint64* /*params*/);
type proc_glGetQueryObjectiv                            = void(GLuint /*id*/, GLenum /*pname*/, GLint* /*params*/);
type proc_glGetQueryObjectui64v                         = void(GLuint /*id*/, GLenum /*pname*/, GLuint64* /*params*/);
type proc_glGetQueryObjectuiv                           = void(GLuint /*id*/, GLenum /*pname*/, GLuint* /*params*/);
type proc_glGetQueryiv                                  = void(GLenum /*target*/, GLenum /*pname*/, GLint* /*params*/);
type proc_glGetRenderbufferParameteriv                  = void(GLenum /*target*/, GLenum /*pname*/, GLint* /*params*/);
type proc_glGetSamplerParameterIiv                      = void(GLuint /*sampler*/, GLenum /*pname*/, GLint* /*params*/);
type proc_glGetSamplerParameterIuiv                     = void(GLuint /*sampler*/, GLenum /*pname*/, GLuint* /*params*/);
type proc_glGetSamplerParameterfv                       = void(GLuint /*sampler*/, GLenum /*pname*/, GLfloat* /*params*/);
type proc_glGetSamplerParameteriv                       = void(GLuint /*sampler*/, GLenum /*pname*/, GLint* /*params*/);
type proc_glGetShaderInfoLog                            = void(GLuint /*shader*/, GLsizei /*bufSize*/, GLsizei* /*length*/, GLchar* /*infoLog*/);
type proc_glGetShaderPrecisionFormat                    = void(GLenum /*shadertype*/, GLenum /*precisiontype*/, GLint* /*range*/, GLint* /*precision*/);
type proc_glGetShaderSource                             = void(GLuint /*shader*/, GLsizei /*bufSize*/, GLsizei* /*length*/, GLchar* /*source*/);
type proc_glGetShaderiv                                 = void(GLuint /*shader*/, GLenum /*pname*/, GLint* /*params*/);
type proc_glGetString                                   = /*const*/ GLubyte*(GLenum /*name*/);
type proc_glGetStringi                                  = /*const*/ GLubyte*(GLenum /*name*/, GLuint /*index*/);
type proc_glGetSubroutineIndex                          = GLuint(GLuint /*program*/, GLenum /*shadertype*/, /*const*/ GLchar* /*name*/);
type proc_glGetSubroutineUniformLocation                = GLint(GLuint /*program*/, GLenum /*shadertype*/, /*const*/ GLchar* /*name*/);
type proc_glGetSynciv                                   = void(GLsync /*sync*/, GLenum /*pname*/, GLsizei /*count*/, GLsizei* /*length*/, GLint* /*values*/);
type proc_glGetTexImage                                 = void(GLenum /*target*/, GLint /*level*/, GLenum /*format*/, GLenum /*type*/, void* /*pixels*/);
type proc_glGetTexLevelParameterfv                      = void(GLenum /*target*/, GLint /*level*/, GLenum /*pname*/, GLfloat* /*params*/);
type proc_glGetTexLevelParameteriv                      = void(GLenum /*target*/, GLint /*level*/, GLenum /*pname*/, GLint* /*params*/);
type proc_glGetTexParameterIiv                          = void(GLenum /*target*/, GLenum /*pname*/, GLint* /*params*/);
type proc_glGetTexParameterIuiv                         = void(GLenum /*target*/, GLenum /*pname*/, GLuint* /*params*/);
type proc_glGetTexParameterfv                           = void(GLenum /*target*/, GLenum /*pname*/, GLfloat* /*params*/);
type proc_glGetTexParameteriv                           = void(GLenum /*target*/, GLenum /*pname*/, GLint* /*params*/);
type proc_glGetTransformFeedbackVarying                 = void(GLuint /*program*/, GLuint /*index*/, GLsizei /*bufSize*/, GLsizei* /*length*/, GLsizei* /*size*/, GLenum* /*type*/, GLchar* /*name*/);
type proc_glGetUniformBlockIndex                        = GLuint(GLuint /*program*/, /*const*/ GLchar* /*uniformBlockName*/);
type proc_glGetUniformIndices                           = void(GLuint /*program*/, GLsizei /*uniformCount*/, /*const*/ GLchar*/*const*/* /*uniformNames*/, GLuint* /*uniformIndices*/);
type proc_glGetUniformLocation                          = GLint(GLuint /*program*/, /*const*/ GLchar* /*name*/);
type proc_glGetUniformSubroutineuiv                     = void(GLenum /*shadertype*/, GLint /*location*/, GLuint* /*params*/);
type proc_glGetUniformdv                                = void(GLuint /*program*/, GLint /*location*/, GLdouble* /*params*/);
type proc_glGetUniformfv                                = void(GLuint /*program*/, GLint /*location*/, GLfloat* /*params*/);
type proc_glGetUniformiv                                = void(GLuint /*program*/, GLint /*location*/, GLint* /*params*/);
type proc_glGetUniformuiv                               = void(GLuint /*program*/, GLint /*location*/, GLuint* /*params*/);
type proc_glGetVertexAttribIiv                          = void(GLuint /*index*/, GLenum /*pname*/, GLint* /*params*/);
type proc_glGetVertexAttribIuiv                         = void(GLuint /*index*/, GLenum /*pname*/, GLuint* /*params*/);
type proc_glGetVertexAttribLdv                          = void(GLuint /*index*/, GLenum /*pname*/, GLdouble* /*params*/);
type proc_glGetVertexAttribPointerv                     = void(GLuint /*index*/, GLenum /*pname*/, void** /*pointer*/);
type proc_glGetVertexAttribdv                           = void(GLuint /*index*/, GLenum /*pname*/, GLdouble* /*params*/);
type proc_glGetVertexAttribfv                           = void(GLuint /*index*/, GLenum /*pname*/, GLfloat* /*params*/);
type proc_glGetVertexAttribiv                           = void(GLuint /*index*/, GLenum /*pname*/, GLint* /*params*/);
type proc_glHint                                        = void(GLenum /*target*/, GLenum /*mode*/);
type proc_glInvalidateBufferData                        = void(GLuint /*buffer*/);
type proc_glInvalidateBufferSubData                     = void(GLuint /*buffer*/, GLintptr /*offset*/, GLsizeiptr /*length*/);
type proc_glInvalidateFramebuffer                       = void(GLenum /*target*/, GLsizei /*numAttachments*/, /*const*/ GLenum* /*attachments*/);
type proc_glInvalidateSubFramebuffer                    = void(GLenum /*target*/, GLsizei /*numAttachments*/, /*const*/ GLenum* /*attachments*/, GLint /*x*/, GLint /*y*/, GLsizei /*width*/, GLsizei /*height*/);
type proc_glInvalidateTexImage                          = void(GLuint /*texture*/, GLint /*level*/);
type proc_glInvalidateTexSubImage                       = void(GLuint /*texture*/, GLint /*level*/, GLint /*xoffset*/, GLint /*yoffset*/, GLint /*zoffset*/, GLsizei /*width*/, GLsizei /*height*/, GLsizei /*depth*/);
type proc_glIsBuffer                                    = GLboolean(GLuint /*buffer*/);
type proc_glIsEnabled                                   = GLboolean(GLenum /*cap*/);
type proc_glIsEnabledi                                  = GLboolean(GLenum /*target*/, GLuint /*index*/);
type proc_glIsFramebuffer                               = GLboolean(GLuint /*framebuffer*/);
type proc_glIsProgram                                   = GLboolean(GLuint /*program*/);
type proc_glIsProgramPipeline                           = GLboolean(GLuint /*pipeline*/);
type proc_glIsQuery                                     = GLboolean(GLuint /*id*/);
type proc_glIsRenderbuffer                              = GLboolean(GLuint /*renderbuffer*/);
type proc_glIsSampler                                   = GLboolean(GLuint /*sampler*/);
type proc_glIsShader                                    = GLboolean(GLuint /*shader*/);
type proc_glIsSync                                      = GLboolean(GLsync /*sync*/);
type proc_glIsTexture                                   = GLboolean(GLuint /*texture*/);
type proc_glIsTransformFeedback                         = GLboolean(GLuint /*id*/);
type proc_glIsVertexArray                               = GLboolean(GLuint /*array*/);
type proc_glLineWidth                                   = void(GLfloat /*width*/);
type proc_glLinkProgram                                 = void(GLuint /*program*/);
type proc_glLogicOp                                     = void(GLenum /*opcode*/);
type proc_glMapBuffer                                   = void*(GLenum /*target*/, GLenum /*access*/);
type proc_glMapBufferRange                              = void*(GLenum /*target*/, GLintptr /*offset*/, GLsizeiptr /*length*/, GLbitfield /*access*/);
type proc_glMemoryBarrier                               = void(GLbitfield /*barriers*/);
type proc_glMinSampleShading                            = void(GLfloat /*value*/);
type proc_glMultiDrawArrays                             = void(GLenum /*mode*/, /*const*/ GLint* /*first*/, /*const*/ GLsizei* /*count*/, GLsizei /*drawcount*/);
type proc_glMultiDrawArraysIndirect                     = void(GLenum /*mode*/, /*const*/ void* /*indirect*/, GLsizei /*drawcount*/, GLsizei /*stride*/);
type proc_glMultiDrawElements                           = void(GLenum /*mode*/, /*const*/ GLsizei* /*count*/, GLenum /*type*/, /*const*/ void*/*const*/* /*indices*/, GLsizei /*drawcount*/);
type proc_glMultiDrawElementsBaseVertex                 = void(GLenum /*mode*/, /*const*/ GLsizei* /*count*/, GLenum /*type*/, /*const*/ void*/*const*/* /*indices*/, GLsizei /*drawcount*/, /*const*/ GLint* /*basevertex*/);
type proc_glMultiDrawElementsIndirect                   = void(GLenum /*mode*/, GLenum /*type*/, /*const*/ void* /*indirect*/, GLsizei /*drawcount*/, GLsizei /*stride*/);
type proc_glObjectLabel                                 = void(GLenum /*identifier*/, GLuint /*name*/, GLsizei /*length*/, /*const*/ GLchar* /*label*/);
type proc_glObjectPtrLabel                              = void(/*const*/ void* /*ptr*/, GLsizei /*length*/, /*const*/ GLchar* /*label*/);
type proc_glPatchParameterfv                            = void(GLenum /*pname*/, /*const*/ GLfloat* /*values*/);
type proc_glPatchParameteri                             = void(GLenum /*pname*/, GLint /*value*/);
type proc_glPauseTransformFeedback                      = void();
type proc_glPixelStoref                                 = void(GLenum /*pname*/, GLfloat /*param*/);
type proc_glPixelStorei                                 = void(GLenum /*pname*/, GLint /*param*/);
type proc_glPointParameterf                             = void(GLenum /*pname*/, GLfloat /*param*/);
type proc_glPointParameterfv                            = void(GLenum /*pname*/, /*const*/ GLfloat* /*params*/);
type proc_glPointParameteri                             = void(GLenum /*pname*/, GLint /*param*/);
type proc_glPointParameteriv                            = void(GLenum /*pname*/, /*const*/ GLint* /*params*/);
type proc_glPointSize                                   = void(GLfloat /*size*/);
type proc_glPolygonMode                                 = void(GLenum /*face*/, GLenum /*mode*/);
type proc_glPolygonOffset                               = void(GLfloat /*factor*/, GLfloat /*units*/);
type proc_glPopDebugGroup                               = void();
type proc_glPrimitiveRestartIndex                       = void(GLuint /*index*/);
type proc_glProgramBinary                               = void(GLuint /*program*/, GLenum /*binaryFormat*/, /*const*/ void* /*binary*/, GLsizei /*length*/);
type proc_glProgramParameteri                           = void(GLuint /*program*/, GLenum /*pname*/, GLint /*value*/);
type proc_glProgramUniform1d                            = void(GLuint /*program*/, GLint /*location*/, GLdouble /*v0*/);
type proc_glProgramUniform1dv                           = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLdouble* /*value*/);
type proc_glProgramUniform1f                            = void(GLuint /*program*/, GLint /*location*/, GLfloat /*v0*/);
type proc_glProgramUniform1fv                           = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLfloat* /*value*/);
type proc_glProgramUniform1i                            = void(GLuint /*program*/, GLint /*location*/, GLint /*v0*/);
type proc_glProgramUniform1iv                           = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLint* /*value*/);
type proc_glProgramUniform1ui                           = void(GLuint /*program*/, GLint /*location*/, GLuint /*v0*/);
type proc_glProgramUniform1uiv                          = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLuint* /*value*/);
type proc_glProgramUniform2d                            = void(GLuint /*program*/, GLint /*location*/, GLdouble /*v0*/, GLdouble /*v1*/);
type proc_glProgramUniform2dv                           = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLdouble* /*value*/);
type proc_glProgramUniform2f                            = void(GLuint /*program*/, GLint /*location*/, GLfloat /*v0*/, GLfloat /*v1*/);
type proc_glProgramUniform2fv                           = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLfloat* /*value*/);
type proc_glProgramUniform2i                            = void(GLuint /*program*/, GLint /*location*/, GLint /*v0*/, GLint /*v1*/);
type proc_glProgramUniform2iv                           = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLint* /*value*/);
type proc_glProgramUniform2ui                           = void(GLuint /*program*/, GLint /*location*/, GLuint /*v0*/, GLuint /*v1*/);
type proc_glProgramUniform2uiv                          = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLuint* /*value*/);
type proc_glProgramUniform3d                            = void(GLuint /*program*/, GLint /*location*/, GLdouble /*v0*/, GLdouble /*v1*/, GLdouble /*v2*/);
type proc_glProgramUniform3dv                           = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLdouble* /*value*/);
type proc_glProgramUniform3f                            = void(GLuint /*program*/, GLint /*location*/, GLfloat /*v0*/, GLfloat /*v1*/, GLfloat /*v2*/);
type proc_glProgramUniform3fv                           = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLfloat* /*value*/);
type proc_glProgramUniform3i                            = void(GLuint /*program*/, GLint /*location*/, GLint /*v0*/, GLint /*v1*/, GLint /*v2*/);
type proc_glProgramUniform3iv                           = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLint* /*value*/);
type proc_glProgramUniform3ui                           = void(GLuint /*program*/, GLint /*location*/, GLuint /*v0*/, GLuint /*v1*/, GLuint /*v2*/);
type proc_glProgramUniform3uiv                          = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLuint* /*value*/);
type proc_glProgramUniform4d                            = void(GLuint /*program*/, GLint /*location*/, GLdouble /*v0*/, GLdouble /*v1*/, GLdouble /*v2*/, GLdouble /*v3*/);
type proc_glProgramUniform4dv                           = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLdouble* /*value*/);
type proc_glProgramUniform4f                            = void(GLuint /*program*/, GLint /*location*/, GLfloat /*v0*/, GLfloat /*v1*/, GLfloat /*v2*/, GLfloat /*v3*/);
type proc_glProgramUniform4fv                           = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLfloat* /*value*/);
type proc_glProgramUniform4i                            = void(GLuint /*program*/, GLint /*location*/, GLint /*v0*/, GLint /*v1*/, GLint /*v2*/, GLint /*v3*/);
type proc_glProgramUniform4iv                           = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLint* /*value*/);
type proc_glProgramUniform4ui                           = void(GLuint /*program*/, GLint /*location*/, GLuint /*v0*/, GLuint /*v1*/, GLuint /*v2*/, GLuint /*v3*/);
type proc_glProgramUniform4uiv                          = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLuint* /*value*/);
type proc_glProgramUniformMatrix2dv                     = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
type proc_glProgramUniformMatrix2fv                     = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
type proc_glProgramUniformMatrix2x3dv                   = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
type proc_glProgramUniformMatrix2x3fv                   = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
type proc_glProgramUniformMatrix2x4dv                   = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
type proc_glProgramUniformMatrix2x4fv                   = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
type proc_glProgramUniformMatrix3dv                     = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
type proc_glProgramUniformMatrix3fv                     = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
type proc_glProgramUniformMatrix3x2dv                   = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
type proc_glProgramUniformMatrix3x2fv                   = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
type proc_glProgramUniformMatrix3x4dv                   = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
type proc_glProgramUniformMatrix3x4fv                   = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
type proc_glProgramUniformMatrix4dv                     = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
type proc_glProgramUniformMatrix4fv                     = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
type proc_glProgramUniformMatrix4x2dv                   = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
type proc_glProgramUniformMatrix4x2fv                   = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
type proc_glProgramUniformMatrix4x3dv                   = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
type proc_glProgramUniformMatrix4x3fv                   = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
type proc_glProvokingVertex                             = void(GLenum /*mode*/);
type proc_glPushDebugGroup                              = void(GLenum /*source*/, GLuint /*id*/, GLsizei /*length*/, /*const*/ GLchar* /*message*/);
type proc_glQueryCounter                                = void(GLuint /*id*/, GLenum /*target*/);
type proc_glReadBuffer                                  = void(GLenum /*src*/);
type proc_glReadPixels                                  = void(GLint /*x*/, GLint /*y*/, GLsizei /*width*/, GLsizei /*height*/, GLenum /*format*/, GLenum /*type*/, void* /*pixels*/);
type proc_glReleaseShaderCompiler                       = void();
type proc_glRenderbufferStorage                         = void(GLenum /*target*/, GLenum /*internalformat*/, GLsizei /*width*/, GLsizei /*height*/);
type proc_glRenderbufferStorageMultisample              = void(GLenum /*target*/, GLsizei /*samples*/, GLenum /*internalformat*/, GLsizei /*width*/, GLsizei /*height*/);
type proc_glResumeTransformFeedback                     = void();
type proc_glSampleCoverage                              = void(GLfloat /*value*/, GLboolean /*invert*/);
type proc_glSampleMaski                                 = void(GLuint /*maskNumber*/, GLbitfield /*mask*/);
type proc_glSamplerParameterIiv                         = void(GLuint /*sampler*/, GLenum /*pname*/, /*const*/ GLint* /*param*/);
type proc_glSamplerParameterIuiv                        = void(GLuint /*sampler*/, GLenum /*pname*/, /*const*/ GLuint* /*param*/);
type proc_glSamplerParameterf                           = void(GLuint /*sampler*/, GLenum /*pname*/, GLfloat /*param*/);
type proc_glSamplerParameterfv                          = void(GLuint /*sampler*/, GLenum /*pname*/, /*const*/ GLfloat* /*param*/);
type proc_glSamplerParameteri                           = void(GLuint /*sampler*/, GLenum /*pname*/, GLint /*param*/);
type proc_glSamplerParameteriv                          = void(GLuint /*sampler*/, GLenum /*pname*/, /*const*/ GLint* /*param*/);
type proc_glScissor                                     = void(GLint /*x*/, GLint /*y*/, GLsizei /*width*/, GLsizei /*height*/);
type proc_glScissorArrayv                               = void(GLuint /*first*/, GLsizei /*count*/, /*const*/ GLint* /*v*/);
type proc_glScissorIndexed                              = void(GLuint /*index*/, GLint /*left*/, GLint /*bottom*/, GLsizei /*width*/, GLsizei /*height*/);
type proc_glScissorIndexedv                             = void(GLuint /*index*/, /*const*/ GLint* /*v*/);
type proc_glShaderBinary                                = void(GLsizei /*count*/, /*const*/ GLuint* /*shaders*/, GLenum /*binaryFormat*/, /*const*/ void* /*binary*/, GLsizei /*length*/);
type proc_glShaderSource                                = void(GLuint /*shader*/, GLsizei /*count*/, /*const*/ GLchar*/*const*/* /*string*/, /*const*/ GLint* /*length*/);
type proc_glShaderStorageBlockBinding                   = void(GLuint /*program*/, GLuint /*storageBlockIndex*/, GLuint /*storageBlockBinding*/);
type proc_glStencilFunc                                 = void(GLenum /*func*/, GLint /*ref*/, GLuint /*mask*/);
type proc_glStencilFuncSeparate                         = void(GLenum /*face*/, GLenum /*func*/, GLint /*ref*/, GLuint /*mask*/);
type proc_glStencilMask                                 = void(GLuint /*mask*/);
type proc_glStencilMaskSeparate                         = void(GLenum /*face*/, GLuint /*mask*/);
type proc_glStencilOp                                   = void(GLenum /*fail*/, GLenum /*zfail*/, GLenum /*zpass*/);
type proc_glStencilOpSeparate                           = void(GLenum /*face*/, GLenum /*sfail*/, GLenum /*dpfail*/, GLenum /*dppass*/);
type proc_glTexBuffer                                   = void(GLenum /*target*/, GLenum /*internalformat*/, GLuint /*buffer*/);
type proc_glTexBufferRange                              = void(GLenum /*target*/, GLenum /*internalformat*/, GLuint /*buffer*/, GLintptr /*offset*/, GLsizeiptr /*size*/);
type proc_glTexImage1D                                  = void(GLenum /*target*/, GLint /*level*/, GLint /*internalformat*/, GLsizei /*width*/, GLint /*border*/, GLenum /*format*/, GLenum /*type*/, /*const*/ void* /*pixels*/);
type proc_glTexImage2D                                  = void(GLenum /*target*/, GLint /*level*/, GLint /*internalformat*/, GLsizei /*width*/, GLsizei /*height*/, GLint /*border*/, GLenum /*format*/, GLenum /*type*/, /*const*/ void* /*pixels*/);
type proc_glTexImage2DMultisample                       = void(GLenum /*target*/, GLsizei /*samples*/, GLenum /*internalformat*/, GLsizei /*width*/, GLsizei /*height*/, GLboolean /*fixedsamplelocations*/);
type proc_glTexImage3D                                  = void(GLenum /*target*/, GLint /*level*/, GLint /*internalformat*/, GLsizei /*width*/, GLsizei /*height*/, GLsizei /*depth*/, GLint /*border*/, GLenum /*format*/, GLenum /*type*/, /*const*/ void* /*pixels*/);
type proc_glTexImage3DMultisample                       = void(GLenum /*target*/, GLsizei /*samples*/, GLenum /*internalformat*/, GLsizei /*width*/, GLsizei /*height*/, GLsizei /*depth*/, GLboolean /*fixedsamplelocations*/);
type proc_glTexParameterIiv                             = void(GLenum /*target*/, GLenum /*pname*/, /*const*/ GLint* /*params*/);
type proc_glTexParameterIuiv                            = void(GLenum /*target*/, GLenum /*pname*/, /*const*/ GLuint* /*params*/);
type proc_glTexParameterf                               = void(GLenum /*target*/, GLenum /*pname*/, GLfloat /*param*/);
type proc_glTexParameterfv                              = void(GLenum /*target*/, GLenum /*pname*/, /*const*/ GLfloat* /*params*/);
type proc_glTexParameteri                               = void(GLenum /*target*/, GLenum /*pname*/, GLint /*param*/);
type proc_glTexParameteriv                              = void(GLenum /*target*/, GLenum /*pname*/, /*const*/ GLint* /*params*/);
type proc_glTexStorage1D                                = void(GLenum /*target*/, GLsizei /*levels*/, GLenum /*internalformat*/, GLsizei /*width*/);
type proc_glTexStorage2D                                = void(GLenum /*target*/, GLsizei /*levels*/, GLenum /*internalformat*/, GLsizei /*width*/, GLsizei /*height*/);
type proc_glTexStorage2DMultisample                     = void(GLenum /*target*/, GLsizei /*samples*/, GLenum /*internalformat*/, GLsizei /*width*/, GLsizei /*height*/, GLboolean /*fixedsamplelocations*/);
type proc_glTexStorage3D                                = void(GLenum /*target*/, GLsizei /*levels*/, GLenum /*internalformat*/, GLsizei /*width*/, GLsizei /*height*/, GLsizei /*depth*/);
type proc_glTexStorage3DMultisample                     = void(GLenum /*target*/, GLsizei /*samples*/, GLenum /*internalformat*/, GLsizei /*width*/, GLsizei /*height*/, GLsizei /*depth*/, GLboolean /*fixedsamplelocations*/);
type proc_glTexSubImage1D                               = void(GLenum /*target*/, GLint /*level*/, GLint /*xoffset*/, GLsizei /*width*/, GLenum /*format*/, GLenum /*type*/, /*const*/ void* /*pixels*/);
type proc_glTexSubImage2D                               = void(GLenum /*target*/, GLint /*level*/, GLint /*xoffset*/, GLint /*yoffset*/, GLsizei /*width*/, GLsizei /*height*/, GLenum /*format*/, GLenum /*type*/, /*const*/ void* /*pixels*/);
type proc_glTexSubImage3D                               = void(GLenum /*target*/, GLint /*level*/, GLint /*xoffset*/, GLint /*yoffset*/, GLint /*zoffset*/, GLsizei /*width*/, GLsizei /*height*/, GLsizei /*depth*/, GLenum /*format*/, GLenum /*type*/, /*const*/ void* /*pixels*/);
type proc_glTextureView                                 = void(GLuint /*texture*/, GLenum /*target*/, GLuint /*origtexture*/, GLenum /*internalformat*/, GLuint /*minlevel*/, GLuint /*numlevels*/, GLuint /*minlayer*/, GLuint /*numlayers*/);
type proc_glTransformFeedbackVaryings                   = void(GLuint /*program*/, GLsizei /*count*/, /*const*/ GLchar*/*const*/* /*varyings*/, GLenum /*bufferMode*/);
type proc_glUniform1d                                   = void(GLint /*location*/, GLdouble /*x*/);
type proc_glUniform1dv                                  = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLdouble* /*value*/);
type proc_glUniform1f                                   = void(GLint /*location*/, GLfloat /*v0*/);
type proc_glUniform1fv                                  = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLfloat* /*value*/);
type proc_glUniform1i                                   = void(GLint /*location*/, GLint /*v0*/);
type proc_glUniform1iv                                  = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLint* /*value*/);
type proc_glUniform1ui                                  = void(GLint /*location*/, GLuint /*v0*/);
type proc_glUniform1uiv                                 = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLuint* /*value*/);
type proc_glUniform2d                                   = void(GLint /*location*/, GLdouble /*x*/, GLdouble /*y*/);
type proc_glUniform2dv                                  = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLdouble* /*value*/);
type proc_glUniform2f                                   = void(GLint /*location*/, GLfloat /*v0*/, GLfloat /*v1*/);
type proc_glUniform2fv                                  = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLfloat* /*value*/);
type proc_glUniform2i                                   = void(GLint /*location*/, GLint /*v0*/, GLint /*v1*/);
type proc_glUniform2iv                                  = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLint* /*value*/);
type proc_glUniform2ui                                  = void(GLint /*location*/, GLuint /*v0*/, GLuint /*v1*/);
type proc_glUniform2uiv                                 = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLuint* /*value*/);
type proc_glUniform3d                                   = void(GLint /*location*/, GLdouble /*x*/, GLdouble /*y*/, GLdouble /*z*/);
type proc_glUniform3dv                                  = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLdouble* /*value*/);
type proc_glUniform3f                                   = void(GLint /*location*/, GLfloat /*v0*/, GLfloat /*v1*/, GLfloat /*v2*/);
type proc_glUniform3fv                                  = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLfloat* /*value*/);
type proc_glUniform3i                                   = void(GLint /*location*/, GLint /*v0*/, GLint /*v1*/, GLint /*v2*/);
type proc_glUniform3iv                                  = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLint* /*value*/);
type proc_glUniform3ui                                  = void(GLint /*location*/, GLuint /*v0*/, GLuint /*v1*/, GLuint /*v2*/);
type proc_glUniform3uiv                                 = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLuint* /*value*/);
type proc_glUniform4d                                   = void(GLint /*location*/, GLdouble /*x*/, GLdouble /*y*/, GLdouble /*z*/, GLdouble /*w*/);
type proc_glUniform4dv                                  = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLdouble* /*value*/);
type proc_glUniform4f                                   = void(GLint /*location*/, GLfloat /*v0*/, GLfloat /*v1*/, GLfloat /*v2*/, GLfloat /*v3*/);
type proc_glUniform4fv                                  = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLfloat* /*value*/);
type proc_glUniform4i                                   = void(GLint /*location*/, GLint /*v0*/, GLint /*v1*/, GLint /*v2*/, GLint /*v3*/);
type proc_glUniform4iv                                  = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLint* /*value*/);
type proc_glUniform4ui                                  = void(GLint /*location*/, GLuint /*v0*/, GLuint /*v1*/, GLuint /*v2*/, GLuint /*v3*/);
type proc_glUniform4uiv                                 = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLuint* /*value*/);
type proc_glUniformBlockBinding                         = void(GLuint /*program*/, GLuint /*uniformBlockIndex*/, GLuint /*uniformBlockBinding*/);
type proc_glUniformMatrix2dv                            = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
type proc_glUniformMatrix2fv                            = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
type proc_glUniformMatrix2x3dv                          = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
type proc_glUniformMatrix2x3fv                          = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
type proc_glUniformMatrix2x4dv                          = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
type proc_glUniformMatrix2x4fv                          = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
type proc_glUniformMatrix3dv                            = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
type proc_glUniformMatrix3fv                            = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
type proc_glUniformMatrix3x2dv                          = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
type proc_glUniformMatrix3x2fv                          = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
type proc_glUniformMatrix3x4dv                          = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
type proc_glUniformMatrix3x4fv                          = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
type proc_glUniformMatrix4dv                            = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
type proc_glUniformMatrix4fv                            = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
type proc_glUniformMatrix4x2dv                          = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
type proc_glUniformMatrix4x2fv                          = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
type proc_glUniformMatrix4x3dv                          = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
type proc_glUniformMatrix4x3fv                          = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
type proc_glUniformSubroutinesuiv                       = void(GLenum /*shadertype*/, GLsizei /*count*/, /*const*/ GLuint* /*indices*/);
type proc_glUnmapBuffer                                 = GLboolean(GLenum /*target*/);
type proc_glUseProgram                                  = void(GLuint /*program*/);
type proc_glUseProgramStages                            = void(GLuint /*pipeline*/, GLbitfield /*stages*/, GLuint /*program*/);
type proc_glValidateProgram                             = void(GLuint /*program*/);
type proc_glValidateProgramPipeline                     = void(GLuint /*pipeline*/);
type proc_glVertexAttrib1d                              = void(GLuint /*index*/, GLdouble /*x*/);
type proc_glVertexAttrib1dv                             = void(GLuint /*index*/, /*const*/ GLdouble* /*v*/);
type proc_glVertexAttrib1f                              = void(GLuint /*index*/, GLfloat /*x*/);
type proc_glVertexAttrib1fv                             = void(GLuint /*index*/, /*const*/ GLfloat* /*v*/);
type proc_glVertexAttrib1s                              = void(GLuint /*index*/, GLshort /*x*/);
type proc_glVertexAttrib1sv                             = void(GLuint /*index*/, /*const*/ GLshort* /*v*/);
type proc_glVertexAttrib2d                              = void(GLuint /*index*/, GLdouble /*x*/, GLdouble /*y*/);
type proc_glVertexAttrib2dv                             = void(GLuint /*index*/, /*const*/ GLdouble* /*v*/);
type proc_glVertexAttrib2f                              = void(GLuint /*index*/, GLfloat /*x*/, GLfloat /*y*/);
type proc_glVertexAttrib2fv                             = void(GLuint /*index*/, /*const*/ GLfloat* /*v*/);
type proc_glVertexAttrib2s                              = void(GLuint /*index*/, GLshort /*x*/, GLshort /*y*/);
type proc_glVertexAttrib2sv                             = void(GLuint /*index*/, /*const*/ GLshort* /*v*/);
type proc_glVertexAttrib3d                              = void(GLuint /*index*/, GLdouble /*x*/, GLdouble /*y*/, GLdouble /*z*/);
type proc_glVertexAttrib3dv                             = void(GLuint /*index*/, /*const*/ GLdouble* /*v*/);
type proc_glVertexAttrib3f                              = void(GLuint /*index*/, GLfloat /*x*/, GLfloat /*y*/, GLfloat /*z*/);
type proc_glVertexAttrib3fv                             = void(GLuint /*index*/, /*const*/ GLfloat* /*v*/);
type proc_glVertexAttrib3s                              = void(GLuint /*index*/, GLshort /*x*/, GLshort /*y*/, GLshort /*z*/);
type proc_glVertexAttrib3sv                             = void(GLuint /*index*/, /*const*/ GLshort* /*v*/);
type proc_glVertexAttrib4Nbv                            = void(GLuint /*index*/, /*const*/ GLbyte* /*v*/);
type proc_glVertexAttrib4Niv                            = void(GLuint /*index*/, /*const*/ GLint* /*v*/);
type proc_glVertexAttrib4Nsv                            = void(GLuint /*index*/, /*const*/ GLshort* /*v*/);
type proc_glVertexAttrib4Nub                            = void(GLuint /*index*/, GLubyte /*x*/, GLubyte /*y*/, GLubyte /*z*/, GLubyte /*w*/);
type proc_glVertexAttrib4Nubv                           = void(GLuint /*index*/, /*const*/ GLubyte* /*v*/);
type proc_glVertexAttrib4Nuiv                           = void(GLuint /*index*/, /*const*/ GLuint* /*v*/);
type proc_glVertexAttrib4Nusv                           = void(GLuint /*index*/, /*const*/ GLushort* /*v*/);
type proc_glVertexAttrib4bv                             = void(GLuint /*index*/, /*const*/ GLbyte* /*v*/);
type proc_glVertexAttrib4d                              = void(GLuint /*index*/, GLdouble /*x*/, GLdouble /*y*/, GLdouble /*z*/, GLdouble /*w*/);
type proc_glVertexAttrib4dv                             = void(GLuint /*index*/, /*const*/ GLdouble* /*v*/);
type proc_glVertexAttrib4f                              = void(GLuint /*index*/, GLfloat /*x*/, GLfloat /*y*/, GLfloat /*z*/, GLfloat /*w*/);
type proc_glVertexAttrib4fv                             = void(GLuint /*index*/, /*const*/ GLfloat* /*v*/);
type proc_glVertexAttrib4iv                             = void(GLuint /*index*/, /*const*/ GLint* /*v*/);
type proc_glVertexAttrib4s                              = void(GLuint /*index*/, GLshort /*x*/, GLshort /*y*/, GLshort /*z*/, GLshort /*w*/);
type proc_glVertexAttrib4sv                             = void(GLuint /*index*/, /*const*/ GLshort* /*v*/);
type proc_glVertexAttrib4ubv                            = void(GLuint /*index*/, /*const*/ GLubyte* /*v*/);
type proc_glVertexAttrib4uiv                            = void(GLuint /*index*/, /*const*/ GLuint* /*v*/);
type proc_glVertexAttrib4usv                            = void(GLuint /*index*/, /*const*/ GLushort* /*v*/);
type proc_glVertexAttribBinding                         = void(GLuint /*attribindex*/, GLuint /*bindingindex*/);
type proc_glVertexAttribDivisor                         = void(GLuint /*index*/, GLuint /*divisor*/);
type proc_glVertexAttribFormat                          = void(GLuint /*attribindex*/, GLint /*size*/, GLenum /*type*/, GLboolean /*normalized*/, GLuint /*relativeoffset*/);
type proc_glVertexAttribI1i                             = void(GLuint /*index*/, GLint /*x*/);
type proc_glVertexAttribI1iv                            = void(GLuint /*index*/, /*const*/ GLint* /*v*/);
type proc_glVertexAttribI1ui                            = void(GLuint /*index*/, GLuint /*x*/);
type proc_glVertexAttribI1uiv                           = void(GLuint /*index*/, /*const*/ GLuint* /*v*/);
type proc_glVertexAttribI2i                             = void(GLuint /*index*/, GLint /*x*/, GLint /*y*/);
type proc_glVertexAttribI2iv                            = void(GLuint /*index*/, /*const*/ GLint* /*v*/);
type proc_glVertexAttribI2ui                            = void(GLuint /*index*/, GLuint /*x*/, GLuint /*y*/);
type proc_glVertexAttribI2uiv                           = void(GLuint /*index*/, /*const*/ GLuint* /*v*/);
type proc_glVertexAttribI3i                             = void(GLuint /*index*/, GLint /*x*/, GLint /*y*/, GLint /*z*/);
type proc_glVertexAttribI3iv                            = void(GLuint /*index*/, /*const*/ GLint* /*v*/);
type proc_glVertexAttribI3ui                            = void(GLuint /*index*/, GLuint /*x*/, GLuint /*y*/, GLuint /*z*/);
type proc_glVertexAttribI3uiv                           = void(GLuint /*index*/, /*const*/ GLuint* /*v*/);
type proc_glVertexAttribI4bv                            = void(GLuint /*index*/, /*const*/ GLbyte* /*v*/);
type proc_glVertexAttribI4i                             = void(GLuint /*index*/, GLint /*x*/, GLint /*y*/, GLint /*z*/, GLint /*w*/);
type proc_glVertexAttribI4iv                            = void(GLuint /*index*/, /*const*/ GLint* /*v*/);
type proc_glVertexAttribI4sv                            = void(GLuint /*index*/, /*const*/ GLshort* /*v*/);
type proc_glVertexAttribI4ubv                           = void(GLuint /*index*/, /*const*/ GLubyte* /*v*/);
type proc_glVertexAttribI4ui                            = void(GLuint /*index*/, GLuint /*x*/, GLuint /*y*/, GLuint /*z*/, GLuint /*w*/);
type proc_glVertexAttribI4uiv                           = void(GLuint /*index*/, /*const*/ GLuint* /*v*/);
type proc_glVertexAttribI4usv                           = void(GLuint /*index*/, /*const*/ GLushort* /*v*/);
type proc_glVertexAttribIFormat                         = void(GLuint /*attribindex*/, GLint /*size*/, GLenum /*type*/, GLuint /*relativeoffset*/);
type proc_glVertexAttribIPointer                        = void(GLuint /*index*/, GLint /*size*/, GLenum /*type*/, GLsizei /*stride*/, /*const*/ void* /*pointer*/);
type proc_glVertexAttribL1d                             = void(GLuint /*index*/, GLdouble /*x*/);
type proc_glVertexAttribL1dv                            = void(GLuint /*index*/, /*const*/ GLdouble* /*v*/);
type proc_glVertexAttribL2d                             = void(GLuint /*index*/, GLdouble /*x*/, GLdouble /*y*/);
type proc_glVertexAttribL2dv                            = void(GLuint /*index*/, /*const*/ GLdouble* /*v*/);
type proc_glVertexAttribL3d                             = void(GLuint /*index*/, GLdouble /*x*/, GLdouble /*y*/, GLdouble /*z*/);
type proc_glVertexAttribL3dv                            = void(GLuint /*index*/, /*const*/ GLdouble* /*v*/);
type proc_glVertexAttribL4d                             = void(GLuint /*index*/, GLdouble /*x*/, GLdouble /*y*/, GLdouble /*z*/, GLdouble /*w*/);
type proc_glVertexAttribL4dv                            = void(GLuint /*index*/, /*const*/ GLdouble* /*v*/);
type proc_glVertexAttribLFormat                         = void(GLuint /*attribindex*/, GLint /*size*/, GLenum /*type*/, GLuint /*relativeoffset*/);
type proc_glVertexAttribLPointer                        = void(GLuint /*index*/, GLint /*size*/, GLenum /*type*/, GLsizei /*stride*/, /*const*/ void* /*pointer*/);
type proc_glVertexAttribP1ui                            = void(GLuint /*index*/, GLenum /*type*/, GLboolean /*normalized*/, GLuint /*value*/);
type proc_glVertexAttribP1uiv                           = void(GLuint /*index*/, GLenum /*type*/, GLboolean /*normalized*/, /*const*/ GLuint* /*value*/);
type proc_glVertexAttribP2ui                            = void(GLuint /*index*/, GLenum /*type*/, GLboolean /*normalized*/, GLuint /*value*/);
type proc_glVertexAttribP2uiv                           = void(GLuint /*index*/, GLenum /*type*/, GLboolean /*normalized*/, /*const*/ GLuint* /*value*/);
type proc_glVertexAttribP3ui                            = void(GLuint /*index*/, GLenum /*type*/, GLboolean /*normalized*/, GLuint /*value*/);
type proc_glVertexAttribP3uiv                           = void(GLuint /*index*/, GLenum /*type*/, GLboolean /*normalized*/, /*const*/ GLuint* /*value*/);
type proc_glVertexAttribP4ui                            = void(GLuint /*index*/, GLenum /*type*/, GLboolean /*normalized*/, GLuint /*value*/);
type proc_glVertexAttribP4uiv                           = void(GLuint /*index*/, GLenum /*type*/, GLboolean /*normalized*/, /*const*/ GLuint* /*value*/);
type proc_glVertexAttribPointer                         = void(GLuint /*index*/, GLint /*size*/, GLenum /*type*/, GLboolean /*normalized*/, GLsizei /*stride*/, /*const*/ void* /*pointer*/);
type proc_glVertexBindingDivisor                        = void(GLuint /*bindingindex*/, GLuint /*divisor*/);
type proc_glViewport                                    = void(GLint /*x*/, GLint /*y*/, GLsizei /*width*/, GLsizei /*height*/);
type proc_glViewportArrayv                              = void(GLuint /*first*/, GLsizei /*count*/, /*const*/ GLfloat* /*v*/);
type proc_glViewportIndexedf                            = void(GLuint /*index*/, GLfloat /*x*/, GLfloat /*y*/, GLfloat /*w*/, GLfloat /*h*/);
type proc_glViewportIndexedfv                           = void(GLuint /*index*/, /*const*/ GLfloat* /*v*/);
type proc_glWaitSync                                    = void(GLsync /*sync*/, GLbitfield /*flags*/, GLuint64 /*timeout*/);


proc_glActiveShaderProgram glActiveShaderProgram = null;
proc_glActiveTexture glActiveTexture = null;
proc_glAttachShader glAttachShader = null;
proc_glBeginConditionalRender glBeginConditionalRender = null;
proc_glBeginQuery glBeginQuery = null;
proc_glBeginQueryIndexed glBeginQueryIndexed = null;
proc_glBeginTransformFeedback glBeginTransformFeedback = null;
proc_glBindAttribLocation glBindAttribLocation = null;
proc_glBindBuffer glBindBuffer = null;
proc_glBindBufferBase glBindBufferBase = null;
proc_glBindBufferRange glBindBufferRange = null;
proc_glBindFragDataLocation glBindFragDataLocation = null;
proc_glBindFragDataLocationIndexed glBindFragDataLocationIndexed = null;
proc_glBindFramebuffer glBindFramebuffer = null;
proc_glBindImageTexture glBindImageTexture = null;
proc_glBindProgramPipeline glBindProgramPipeline = null;
proc_glBindRenderbuffer glBindRenderbuffer = null;
proc_glBindSampler glBindSampler = null;
proc_glBindTexture glBindTexture = null;
proc_glBindTransformFeedback glBindTransformFeedback = null;
proc_glBindVertexArray glBindVertexArray = null;
proc_glBindVertexBuffer glBindVertexBuffer = null;
proc_glBlendColor glBlendColor = null;
proc_glBlendEquation glBlendEquation = null;
proc_glBlendEquationSeparate glBlendEquationSeparate = null;
proc_glBlendEquationSeparatei glBlendEquationSeparatei = null;
proc_glBlendEquationi glBlendEquationi = null;
proc_glBlendFunc glBlendFunc = null;
proc_glBlendFuncSeparate glBlendFuncSeparate = null;
proc_glBlendFuncSeparatei glBlendFuncSeparatei = null;
proc_glBlendFunci glBlendFunci = null;
proc_glBlitFramebuffer glBlitFramebuffer = null;
proc_glBufferData glBufferData = null;
proc_glBufferSubData glBufferSubData = null;
proc_glCheckFramebufferStatus glCheckFramebufferStatus = null;
proc_glClampColor glClampColor = null;
proc_glClear glClear = null;
proc_glClearBufferData glClearBufferData = null;
proc_glClearBufferSubData glClearBufferSubData = null;
proc_glClearBufferfi glClearBufferfi = null;
proc_glClearBufferfv glClearBufferfv = null;
proc_glClearBufferiv glClearBufferiv = null;
proc_glClearBufferuiv glClearBufferuiv = null;
proc_glClearColor glClearColor = null;
proc_glClearDepth glClearDepth = null;
proc_glClearDepthf glClearDepthf = null;
proc_glClearStencil glClearStencil = null;
proc_glClientWaitSync glClientWaitSync = null;
proc_glColorMask glColorMask = null;
proc_glColorMaski glColorMaski = null;
proc_glCompileShader glCompileShader = null;
proc_glCompressedTexImage1D glCompressedTexImage1D = null;
proc_glCompressedTexImage2D glCompressedTexImage2D = null;
proc_glCompressedTexImage3D glCompressedTexImage3D = null;
proc_glCompressedTexSubImage1D glCompressedTexSubImage1D = null;
proc_glCompressedTexSubImage2D glCompressedTexSubImage2D = null;
proc_glCompressedTexSubImage3D glCompressedTexSubImage3D = null;
proc_glCopyBufferSubData glCopyBufferSubData = null;
proc_glCopyImageSubData glCopyImageSubData = null;
proc_glCopyTexImage1D glCopyTexImage1D = null;
proc_glCopyTexImage2D glCopyTexImage2D = null;
proc_glCopyTexSubImage1D glCopyTexSubImage1D = null;
proc_glCopyTexSubImage2D glCopyTexSubImage2D = null;
proc_glCopyTexSubImage3D glCopyTexSubImage3D = null;
proc_glCreateProgram glCreateProgram = null;
proc_glCreateShader glCreateShader = null;
proc_glCreateShaderProgramv glCreateShaderProgramv = null;
proc_glCullFace glCullFace = null;
proc_glDebugMessageCallback glDebugMessageCallback = null;
proc_glDebugMessageControl glDebugMessageControl = null;
proc_glDebugMessageInsert glDebugMessageInsert = null;
proc_glDeleteBuffers glDeleteBuffers = null;
proc_glDeleteFramebuffers glDeleteFramebuffers = null;
proc_glDeleteProgram glDeleteProgram = null;
proc_glDeleteProgramPipelines glDeleteProgramPipelines = null;
proc_glDeleteQueries glDeleteQueries = null;
proc_glDeleteRenderbuffers glDeleteRenderbuffers = null;
proc_glDeleteSamplers glDeleteSamplers = null;
proc_glDeleteShader glDeleteShader = null;
proc_glDeleteSync glDeleteSync = null;
proc_glDeleteTextures glDeleteTextures = null;
proc_glDeleteTransformFeedbacks glDeleteTransformFeedbacks = null;
proc_glDeleteVertexArrays glDeleteVertexArrays = null;
proc_glDepthFunc glDepthFunc = null;
proc_glDepthMask glDepthMask = null;
proc_glDepthRange glDepthRange = null;
proc_glDepthRangeArrayv glDepthRangeArrayv = null;
proc_glDepthRangeIndexed glDepthRangeIndexed = null;
proc_glDepthRangef glDepthRangef = null;
proc_glDetachShader glDetachShader = null;
proc_glDisable glDisable = null;
proc_glDisableVertexAttribArray glDisableVertexAttribArray = null;
proc_glDisablei glDisablei = null;
proc_glDispatchCompute glDispatchCompute = null;
proc_glDispatchComputeIndirect glDispatchComputeIndirect = null;
proc_glDrawArrays glDrawArrays = null;
proc_glDrawArraysIndirect glDrawArraysIndirect = null;
proc_glDrawArraysInstanced glDrawArraysInstanced = null;
proc_glDrawArraysInstancedBaseInstance glDrawArraysInstancedBaseInstance = null;
proc_glDrawBuffer glDrawBuffer = null;
proc_glDrawBuffers glDrawBuffers = null;
proc_glDrawElements glDrawElements = null;
proc_glDrawElementsBaseVertex glDrawElementsBaseVertex = null;
proc_glDrawElementsIndirect glDrawElementsIndirect = null;
proc_glDrawElementsInstanced glDrawElementsInstanced = null;
proc_glDrawElementsInstancedBaseInstance glDrawElementsInstancedBaseInstance = null;
proc_glDrawElementsInstancedBaseVertex glDrawElementsInstancedBaseVertex = null;
proc_glDrawElementsInstancedBaseVertexBaseInstance glDrawElementsInstancedBaseVertexBaseInstance = null;
proc_glDrawRangeElements glDrawRangeElements = null;
proc_glDrawRangeElementsBaseVertex glDrawRangeElementsBaseVertex = null;
proc_glDrawTransformFeedback glDrawTransformFeedback = null;
proc_glDrawTransformFeedbackInstanced glDrawTransformFeedbackInstanced = null;
proc_glDrawTransformFeedbackStream glDrawTransformFeedbackStream = null;
proc_glDrawTransformFeedbackStreamInstanced glDrawTransformFeedbackStreamInstanced = null;
proc_glEnable glEnable = null;
proc_glEnableVertexAttribArray glEnableVertexAttribArray = null;
proc_glEnablei glEnablei = null;
proc_glEndConditionalRender glEndConditionalRender = null;
proc_glEndQuery glEndQuery = null;
proc_glEndQueryIndexed glEndQueryIndexed = null;
proc_glEndTransformFeedback glEndTransformFeedback = null;
proc_glFenceSync glFenceSync = null;
proc_glFinish glFinish = null;
proc_glFlush glFlush = null;
proc_glFlushMappedBufferRange glFlushMappedBufferRange = null;
proc_glFramebufferParameteri glFramebufferParameteri = null;
proc_glFramebufferRenderbuffer glFramebufferRenderbuffer = null;
proc_glFramebufferTexture glFramebufferTexture = null;
proc_glFramebufferTexture1D glFramebufferTexture1D = null;
proc_glFramebufferTexture2D glFramebufferTexture2D = null;
proc_glFramebufferTexture3D glFramebufferTexture3D = null;
proc_glFramebufferTextureLayer glFramebufferTextureLayer = null;
proc_glFrontFace glFrontFace = null;
proc_glGenBuffers glGenBuffers = null;
proc_glGenFramebuffers glGenFramebuffers = null;
proc_glGenProgramPipelines glGenProgramPipelines = null;
proc_glGenQueries glGenQueries = null;
proc_glGenRenderbuffers glGenRenderbuffers = null;
proc_glGenSamplers glGenSamplers = null;
proc_glGenTextures glGenTextures = null;
proc_glGenTransformFeedbacks glGenTransformFeedbacks = null;
proc_glGenVertexArrays glGenVertexArrays = null;
proc_glGenerateMipmap glGenerateMipmap = null;
proc_glGetActiveAtomicCounterBufferiv glGetActiveAtomicCounterBufferiv = null;
proc_glGetActiveAttrib glGetActiveAttrib = null;
proc_glGetActiveSubroutineName glGetActiveSubroutineName = null;
proc_glGetActiveSubroutineUniformName glGetActiveSubroutineUniformName = null;
proc_glGetActiveSubroutineUniformiv glGetActiveSubroutineUniformiv = null;
proc_glGetActiveUniform glGetActiveUniform = null;
proc_glGetActiveUniformBlockName glGetActiveUniformBlockName = null;
proc_glGetActiveUniformBlockiv glGetActiveUniformBlockiv = null;
proc_glGetActiveUniformName glGetActiveUniformName = null;
proc_glGetActiveUniformsiv glGetActiveUniformsiv = null;
proc_glGetAttachedShaders glGetAttachedShaders = null;
proc_glGetAttribLocation glGetAttribLocation = null;
proc_glGetBooleani_v glGetBooleani_v = null;
proc_glGetBooleanv glGetBooleanv = null;
proc_glGetBufferParameteri64v glGetBufferParameteri64v = null;
proc_glGetBufferParameteriv glGetBufferParameteriv = null;
proc_glGetBufferPointerv glGetBufferPointerv = null;
proc_glGetBufferSubData glGetBufferSubData = null;
proc_glGetCompressedTexImage glGetCompressedTexImage = null;
proc_glGetDebugMessageLog glGetDebugMessageLog = null;
proc_glGetDoublei_v glGetDoublei_v = null;
proc_glGetDoublev glGetDoublev = null;
proc_glGetError glGetError = null;
proc_glGetFloati_v glGetFloati_v = null;
proc_glGetFloatv glGetFloatv = null;
proc_glGetFragDataIndex glGetFragDataIndex = null;
proc_glGetFragDataLocation glGetFragDataLocation = null;
proc_glGetFramebufferAttachmentParameteriv glGetFramebufferAttachmentParameteriv = null;
proc_glGetFramebufferParameteriv glGetFramebufferParameteriv = null;
proc_glGetInteger64i_v glGetInteger64i_v = null;
proc_glGetInteger64v glGetInteger64v = null;
proc_glGetIntegeri_v glGetIntegeri_v = null;
proc_glGetIntegerv glGetIntegerv = null;
proc_glGetInternalformati64v glGetInternalformati64v = null;
proc_glGetInternalformativ glGetInternalformativ = null;
proc_glGetMultisamplefv glGetMultisamplefv = null;
proc_glGetObjectLabel glGetObjectLabel = null;
proc_glGetObjectPtrLabel glGetObjectPtrLabel = null;
proc_glGetPointerv glGetPointerv = null;
proc_glGetProgramBinary glGetProgramBinary = null;
proc_glGetProgramInfoLog glGetProgramInfoLog = null;
proc_glGetProgramInterfaceiv glGetProgramInterfaceiv = null;
proc_glGetProgramPipelineInfoLog glGetProgramPipelineInfoLog = null;
proc_glGetProgramPipelineiv glGetProgramPipelineiv = null;
proc_glGetProgramResourceIndex glGetProgramResourceIndex = null;
proc_glGetProgramResourceLocation glGetProgramResourceLocation = null;
proc_glGetProgramResourceLocationIndex glGetProgramResourceLocationIndex = null;
proc_glGetProgramResourceName glGetProgramResourceName = null;
proc_glGetProgramResourceiv glGetProgramResourceiv = null;
proc_glGetProgramStageiv glGetProgramStageiv = null;
proc_glGetProgramiv glGetProgramiv = null;
proc_glGetQueryIndexediv glGetQueryIndexediv = null;
proc_glGetQueryObjecti64v glGetQueryObjecti64v = null;
proc_glGetQueryObjectiv glGetQueryObjectiv = null;
proc_glGetQueryObjectui64v glGetQueryObjectui64v = null;
proc_glGetQueryObjectuiv glGetQueryObjectuiv = null;
proc_glGetQueryiv glGetQueryiv = null;
proc_glGetRenderbufferParameteriv glGetRenderbufferParameteriv = null;
proc_glGetSamplerParameterIiv glGetSamplerParameterIiv = null;
proc_glGetSamplerParameterIuiv glGetSamplerParameterIuiv = null;
proc_glGetSamplerParameterfv glGetSamplerParameterfv = null;
proc_glGetSamplerParameteriv glGetSamplerParameteriv = null;
proc_glGetShaderInfoLog glGetShaderInfoLog = null;
proc_glGetShaderPrecisionFormat glGetShaderPrecisionFormat = null;
proc_glGetShaderSource glGetShaderSource = null;
proc_glGetShaderiv glGetShaderiv = null;
proc_glGetString glGetString = null;
proc_glGetStringi glGetStringi = null;
proc_glGetSubroutineIndex glGetSubroutineIndex = null;
proc_glGetSubroutineUniformLocation glGetSubroutineUniformLocation = null;
proc_glGetSynciv glGetSynciv = null;
proc_glGetTexImage glGetTexImage = null;
proc_glGetTexLevelParameterfv glGetTexLevelParameterfv = null;
proc_glGetTexLevelParameteriv glGetTexLevelParameteriv = null;
proc_glGetTexParameterIiv glGetTexParameterIiv = null;
proc_glGetTexParameterIuiv glGetTexParameterIuiv = null;
proc_glGetTexParameterfv glGetTexParameterfv = null;
proc_glGetTexParameteriv glGetTexParameteriv = null;
proc_glGetTransformFeedbackVarying glGetTransformFeedbackVarying = null;
proc_glGetUniformBlockIndex glGetUniformBlockIndex = null;
proc_glGetUniformIndices glGetUniformIndices = null;
proc_glGetUniformLocation glGetUniformLocation = null;
proc_glGetUniformSubroutineuiv glGetUniformSubroutineuiv = null;
proc_glGetUniformdv glGetUniformdv = null;
proc_glGetUniformfv glGetUniformfv = null;
proc_glGetUniformiv glGetUniformiv = null;
proc_glGetUniformuiv glGetUniformuiv = null;
proc_glGetVertexAttribIiv glGetVertexAttribIiv = null;
proc_glGetVertexAttribIuiv glGetVertexAttribIuiv = null;
proc_glGetVertexAttribLdv glGetVertexAttribLdv = null;
proc_glGetVertexAttribPointerv glGetVertexAttribPointerv = null;
proc_glGetVertexAttribdv glGetVertexAttribdv = null;
proc_glGetVertexAttribfv glGetVertexAttribfv = null;
proc_glGetVertexAttribiv glGetVertexAttribiv = null;
proc_glHint glHint = null;
proc_glInvalidateBufferData glInvalidateBufferData = null;
proc_glInvalidateBufferSubData glInvalidateBufferSubData = null;
proc_glInvalidateFramebuffer glInvalidateFramebuffer = null;
proc_glInvalidateSubFramebuffer glInvalidateSubFramebuffer = null;
proc_glInvalidateTexImage glInvalidateTexImage = null;
proc_glInvalidateTexSubImage glInvalidateTexSubImage = null;
proc_glIsBuffer glIsBuffer = null;
proc_glIsEnabled glIsEnabled = null;
proc_glIsEnabledi glIsEnabledi = null;
proc_glIsFramebuffer glIsFramebuffer = null;
proc_glIsProgram glIsProgram = null;
proc_glIsProgramPipeline glIsProgramPipeline = null;
proc_glIsQuery glIsQuery = null;
proc_glIsRenderbuffer glIsRenderbuffer = null;
proc_glIsSampler glIsSampler = null;
proc_glIsShader glIsShader = null;
proc_glIsSync glIsSync = null;
proc_glIsTexture glIsTexture = null;
proc_glIsTransformFeedback glIsTransformFeedback = null;
proc_glIsVertexArray glIsVertexArray = null;
proc_glLineWidth glLineWidth = null;
proc_glLinkProgram glLinkProgram = null;
proc_glLogicOp glLogicOp = null;
proc_glMapBuffer glMapBuffer = null;
proc_glMapBufferRange glMapBufferRange = null;
proc_glMemoryBarrier glMemoryBarrier = null;
proc_glMinSampleShading glMinSampleShading = null;
proc_glMultiDrawArrays glMultiDrawArrays = null;
proc_glMultiDrawArraysIndirect glMultiDrawArraysIndirect = null;
proc_glMultiDrawElements glMultiDrawElements = null;
proc_glMultiDrawElementsBaseVertex glMultiDrawElementsBaseVertex = null;
proc_glMultiDrawElementsIndirect glMultiDrawElementsIndirect = null;
proc_glObjectLabel glObjectLabel = null;
proc_glObjectPtrLabel glObjectPtrLabel = null;
proc_glPatchParameterfv glPatchParameterfv = null;
proc_glPatchParameteri glPatchParameteri = null;
proc_glPauseTransformFeedback glPauseTransformFeedback = null;
proc_glPixelStoref glPixelStoref = null;
proc_glPixelStorei glPixelStorei = null;
proc_glPointParameterf glPointParameterf = null;
proc_glPointParameterfv glPointParameterfv = null;
proc_glPointParameteri glPointParameteri = null;
proc_glPointParameteriv glPointParameteriv = null;
proc_glPointSize glPointSize = null;
proc_glPolygonMode glPolygonMode = null;
proc_glPolygonOffset glPolygonOffset = null;
proc_glPopDebugGroup glPopDebugGroup = null;
proc_glPrimitiveRestartIndex glPrimitiveRestartIndex = null;
proc_glProgramBinary glProgramBinary = null;
proc_glProgramParameteri glProgramParameteri = null;
proc_glProgramUniform1d glProgramUniform1d = null;
proc_glProgramUniform1dv glProgramUniform1dv = null;
proc_glProgramUniform1f glProgramUniform1f = null;
proc_glProgramUniform1fv glProgramUniform1fv = null;
proc_glProgramUniform1i glProgramUniform1i = null;
proc_glProgramUniform1iv glProgramUniform1iv = null;
proc_glProgramUniform1ui glProgramUniform1ui = null;
proc_glProgramUniform1uiv glProgramUniform1uiv = null;
proc_glProgramUniform2d glProgramUniform2d = null;
proc_glProgramUniform2dv glProgramUniform2dv = null;
proc_glProgramUniform2f glProgramUniform2f = null;
proc_glProgramUniform2fv glProgramUniform2fv = null;
proc_glProgramUniform2i glProgramUniform2i = null;
proc_glProgramUniform2iv glProgramUniform2iv = null;
proc_glProgramUniform2ui glProgramUniform2ui = null;
proc_glProgramUniform2uiv glProgramUniform2uiv = null;
proc_glProgramUniform3d glProgramUniform3d = null;
proc_glProgramUniform3dv glProgramUniform3dv = null;
proc_glProgramUniform3f glProgramUniform3f = null;
proc_glProgramUniform3fv glProgramUniform3fv = null;
proc_glProgramUniform3i glProgramUniform3i = null;
proc_glProgramUniform3iv glProgramUniform3iv = null;
proc_glProgramUniform3ui glProgramUniform3ui = null;
proc_glProgramUniform3uiv glProgramUniform3uiv = null;
proc_glProgramUniform4d glProgramUniform4d = null;
proc_glProgramUniform4dv glProgramUniform4dv = null;
proc_glProgramUniform4f glProgramUniform4f = null;
proc_glProgramUniform4fv glProgramUniform4fv = null;
proc_glProgramUniform4i glProgramUniform4i = null;
proc_glProgramUniform4iv glProgramUniform4iv = null;
proc_glProgramUniform4ui glProgramUniform4ui = null;
proc_glProgramUniform4uiv glProgramUniform4uiv = null;
proc_glProgramUniformMatrix2dv glProgramUniformMatrix2dv = null;
proc_glProgramUniformMatrix2fv glProgramUniformMatrix2fv = null;
proc_glProgramUniformMatrix2x3dv glProgramUniformMatrix2x3dv = null;
proc_glProgramUniformMatrix2x3fv glProgramUniformMatrix2x3fv = null;
proc_glProgramUniformMatrix2x4dv glProgramUniformMatrix2x4dv = null;
proc_glProgramUniformMatrix2x4fv glProgramUniformMatrix2x4fv = null;
proc_glProgramUniformMatrix3dv glProgramUniformMatrix3dv = null;
proc_glProgramUniformMatrix3fv glProgramUniformMatrix3fv = null;
proc_glProgramUniformMatrix3x2dv glProgramUniformMatrix3x2dv = null;
proc_glProgramUniformMatrix3x2fv glProgramUniformMatrix3x2fv = null;
proc_glProgramUniformMatrix3x4dv glProgramUniformMatrix3x4dv = null;
proc_glProgramUniformMatrix3x4fv glProgramUniformMatrix3x4fv = null;
proc_glProgramUniformMatrix4dv glProgramUniformMatrix4dv = null;
proc_glProgramUniformMatrix4fv glProgramUniformMatrix4fv = null;
proc_glProgramUniformMatrix4x2dv glProgramUniformMatrix4x2dv = null;
proc_glProgramUniformMatrix4x2fv glProgramUniformMatrix4x2fv = null;
proc_glProgramUniformMatrix4x3dv glProgramUniformMatrix4x3dv = null;
proc_glProgramUniformMatrix4x3fv glProgramUniformMatrix4x3fv = null;
proc_glProvokingVertex glProvokingVertex = null;
proc_glPushDebugGroup glPushDebugGroup = null;
proc_glQueryCounter glQueryCounter = null;
proc_glReadBuffer glReadBuffer = null;
proc_glReadPixels glReadPixels = null;
proc_glReleaseShaderCompiler glReleaseShaderCompiler = null;
proc_glRenderbufferStorage glRenderbufferStorage = null;
proc_glRenderbufferStorageMultisample glRenderbufferStorageMultisample = null;
proc_glResumeTransformFeedback glResumeTransformFeedback = null;
proc_glSampleCoverage glSampleCoverage = null;
proc_glSampleMaski glSampleMaski = null;
proc_glSamplerParameterIiv glSamplerParameterIiv = null;
proc_glSamplerParameterIuiv glSamplerParameterIuiv = null;
proc_glSamplerParameterf glSamplerParameterf = null;
proc_glSamplerParameterfv glSamplerParameterfv = null;
proc_glSamplerParameteri glSamplerParameteri = null;
proc_glSamplerParameteriv glSamplerParameteriv = null;
proc_glScissor glScissor = null;
proc_glScissorArrayv glScissorArrayv = null;
proc_glScissorIndexed glScissorIndexed = null;
proc_glScissorIndexedv glScissorIndexedv = null;
proc_glShaderBinary glShaderBinary = null;
proc_glShaderSource glShaderSource = null;
proc_glShaderStorageBlockBinding glShaderStorageBlockBinding = null;
proc_glStencilFunc glStencilFunc = null;
proc_glStencilFuncSeparate glStencilFuncSeparate = null;
proc_glStencilMask glStencilMask = null;
proc_glStencilMaskSeparate glStencilMaskSeparate = null;
proc_glStencilOp glStencilOp = null;
proc_glStencilOpSeparate glStencilOpSeparate = null;
proc_glTexBuffer glTexBuffer = null;
proc_glTexBufferRange glTexBufferRange = null;
proc_glTexImage1D glTexImage1D = null;
proc_glTexImage2D glTexImage2D = null;
proc_glTexImage2DMultisample glTexImage2DMultisample = null;
proc_glTexImage3D glTexImage3D = null;
proc_glTexImage3DMultisample glTexImage3DMultisample = null;
proc_glTexParameterIiv glTexParameterIiv = null;
proc_glTexParameterIuiv glTexParameterIuiv = null;
proc_glTexParameterf glTexParameterf = null;
proc_glTexParameterfv glTexParameterfv = null;
proc_glTexParameteri glTexParameteri = null;
proc_glTexParameteriv glTexParameteriv = null;
proc_glTexStorage1D glTexStorage1D = null;
proc_glTexStorage2D glTexStorage2D = null;
proc_glTexStorage2DMultisample glTexStorage2DMultisample = null;
proc_glTexStorage3D glTexStorage3D = null;
proc_glTexStorage3DMultisample glTexStorage3DMultisample = null;
proc_glTexSubImage1D glTexSubImage1D = null;
proc_glTexSubImage2D glTexSubImage2D = null;
proc_glTexSubImage3D glTexSubImage3D = null;
proc_glTextureView glTextureView = null;
proc_glTransformFeedbackVaryings glTransformFeedbackVaryings = null;
proc_glUniform1d glUniform1d = null;
proc_glUniform1dv glUniform1dv = null;
proc_glUniform1f glUniform1f = null;
proc_glUniform1fv glUniform1fv = null;
proc_glUniform1i glUniform1i = null;
proc_glUniform1iv glUniform1iv = null;
proc_glUniform1ui glUniform1ui = null;
proc_glUniform1uiv glUniform1uiv = null;
proc_glUniform2d glUniform2d = null;
proc_glUniform2dv glUniform2dv = null;
proc_glUniform2f glUniform2f = null;
proc_glUniform2fv glUniform2fv = null;
proc_glUniform2i glUniform2i = null;
proc_glUniform2iv glUniform2iv = null;
proc_glUniform2ui glUniform2ui = null;
proc_glUniform2uiv glUniform2uiv = null;
proc_glUniform3d glUniform3d = null;
proc_glUniform3dv glUniform3dv = null;
proc_glUniform3f glUniform3f = null;
proc_glUniform3fv glUniform3fv = null;
proc_glUniform3i glUniform3i = null;
proc_glUniform3iv glUniform3iv = null;
proc_glUniform3ui glUniform3ui = null;
proc_glUniform3uiv glUniform3uiv = null;
proc_glUniform4d glUniform4d = null;
proc_glUniform4dv glUniform4dv = null;
proc_glUniform4f glUniform4f = null;
proc_glUniform4fv glUniform4fv = null;
proc_glUniform4i glUniform4i = null;
proc_glUniform4iv glUniform4iv = null;
proc_glUniform4ui glUniform4ui = null;
proc_glUniform4uiv glUniform4uiv = null;
proc_glUniformBlockBinding glUniformBlockBinding = null;
proc_glUniformMatrix2dv glUniformMatrix2dv = null;
proc_glUniformMatrix2fv glUniformMatrix2fv = null;
proc_glUniformMatrix2x3dv glUniformMatrix2x3dv = null;
proc_glUniformMatrix2x3fv glUniformMatrix2x3fv = null;
proc_glUniformMatrix2x4dv glUniformMatrix2x4dv = null;
proc_glUniformMatrix2x4fv glUniformMatrix2x4fv = null;
proc_glUniformMatrix3dv glUniformMatrix3dv = null;
proc_glUniformMatrix3fv glUniformMatrix3fv = null;
proc_glUniformMatrix3x2dv glUniformMatrix3x2dv = null;
proc_glUniformMatrix3x2fv glUniformMatrix3x2fv = null;
proc_glUniformMatrix3x4dv glUniformMatrix3x4dv = null;
proc_glUniformMatrix3x4fv glUniformMatrix3x4fv = null;
proc_glUniformMatrix4dv glUniformMatrix4dv = null;
proc_glUniformMatrix4fv glUniformMatrix4fv = null;
proc_glUniformMatrix4x2dv glUniformMatrix4x2dv = null;
proc_glUniformMatrix4x2fv glUniformMatrix4x2fv = null;
proc_glUniformMatrix4x3dv glUniformMatrix4x3dv = null;
proc_glUniformMatrix4x3fv glUniformMatrix4x3fv = null;
proc_glUniformSubroutinesuiv glUniformSubroutinesuiv = null;
proc_glUnmapBuffer glUnmapBuffer = null;
proc_glUseProgram glUseProgram = null;
proc_glUseProgramStages glUseProgramStages = null;
proc_glValidateProgram glValidateProgram = null;
proc_glValidateProgramPipeline glValidateProgramPipeline = null;
proc_glVertexAttrib1d glVertexAttrib1d = null;
proc_glVertexAttrib1dv glVertexAttrib1dv = null;
proc_glVertexAttrib1f glVertexAttrib1f = null;
proc_glVertexAttrib1fv glVertexAttrib1fv = null;
proc_glVertexAttrib1s glVertexAttrib1s = null;
proc_glVertexAttrib1sv glVertexAttrib1sv = null;
proc_glVertexAttrib2d glVertexAttrib2d = null;
proc_glVertexAttrib2dv glVertexAttrib2dv = null;
proc_glVertexAttrib2f glVertexAttrib2f = null;
proc_glVertexAttrib2fv glVertexAttrib2fv = null;
proc_glVertexAttrib2s glVertexAttrib2s = null;
proc_glVertexAttrib2sv glVertexAttrib2sv = null;
proc_glVertexAttrib3d glVertexAttrib3d = null;
proc_glVertexAttrib3dv glVertexAttrib3dv = null;
proc_glVertexAttrib3f glVertexAttrib3f = null;
proc_glVertexAttrib3fv glVertexAttrib3fv = null;
proc_glVertexAttrib3s glVertexAttrib3s = null;
proc_glVertexAttrib3sv glVertexAttrib3sv = null;
proc_glVertexAttrib4Nbv glVertexAttrib4Nbv = null;
proc_glVertexAttrib4Niv glVertexAttrib4Niv = null;
proc_glVertexAttrib4Nsv glVertexAttrib4Nsv = null;
proc_glVertexAttrib4Nub glVertexAttrib4Nub = null;
proc_glVertexAttrib4Nubv glVertexAttrib4Nubv = null;
proc_glVertexAttrib4Nuiv glVertexAttrib4Nuiv = null;
proc_glVertexAttrib4Nusv glVertexAttrib4Nusv = null;
proc_glVertexAttrib4bv glVertexAttrib4bv = null;
proc_glVertexAttrib4d glVertexAttrib4d = null;
proc_glVertexAttrib4dv glVertexAttrib4dv = null;
proc_glVertexAttrib4f glVertexAttrib4f = null;
proc_glVertexAttrib4fv glVertexAttrib4fv = null;
proc_glVertexAttrib4iv glVertexAttrib4iv = null;
proc_glVertexAttrib4s glVertexAttrib4s = null;
proc_glVertexAttrib4sv glVertexAttrib4sv = null;
proc_glVertexAttrib4ubv glVertexAttrib4ubv = null;
proc_glVertexAttrib4uiv glVertexAttrib4uiv = null;
proc_glVertexAttrib4usv glVertexAttrib4usv = null;
proc_glVertexAttribBinding glVertexAttribBinding = null;
proc_glVertexAttribDivisor glVertexAttribDivisor = null;
proc_glVertexAttribFormat glVertexAttribFormat = null;
proc_glVertexAttribI1i glVertexAttribI1i = null;
proc_glVertexAttribI1iv glVertexAttribI1iv = null;
proc_glVertexAttribI1ui glVertexAttribI1ui = null;
proc_glVertexAttribI1uiv glVertexAttribI1uiv = null;
proc_glVertexAttribI2i glVertexAttribI2i = null;
proc_glVertexAttribI2iv glVertexAttribI2iv = null;
proc_glVertexAttribI2ui glVertexAttribI2ui = null;
proc_glVertexAttribI2uiv glVertexAttribI2uiv = null;
proc_glVertexAttribI3i glVertexAttribI3i = null;
proc_glVertexAttribI3iv glVertexAttribI3iv = null;
proc_glVertexAttribI3ui glVertexAttribI3ui = null;
proc_glVertexAttribI3uiv glVertexAttribI3uiv = null;
proc_glVertexAttribI4bv glVertexAttribI4bv = null;
proc_glVertexAttribI4i glVertexAttribI4i = null;
proc_glVertexAttribI4iv glVertexAttribI4iv = null;
proc_glVertexAttribI4sv glVertexAttribI4sv = null;
proc_glVertexAttribI4ubv glVertexAttribI4ubv = null;
proc_glVertexAttribI4ui glVertexAttribI4ui = null;
proc_glVertexAttribI4uiv glVertexAttribI4uiv = null;
proc_glVertexAttribI4usv glVertexAttribI4usv = null;
proc_glVertexAttribIFormat glVertexAttribIFormat = null;
proc_glVertexAttribIPointer glVertexAttribIPointer = null;
proc_glVertexAttribL1d glVertexAttribL1d = null;
proc_glVertexAttribL1dv glVertexAttribL1dv = null;
proc_glVertexAttribL2d glVertexAttribL2d = null;
proc_glVertexAttribL2dv glVertexAttribL2dv = null;
proc_glVertexAttribL3d glVertexAttribL3d = null;
proc_glVertexAttribL3dv glVertexAttribL3dv = null;
proc_glVertexAttribL4d glVertexAttribL4d = null;
proc_glVertexAttribL4dv glVertexAttribL4dv = null;
proc_glVertexAttribLFormat glVertexAttribLFormat = null;
proc_glVertexAttribLPointer glVertexAttribLPointer = null;
proc_glVertexAttribP1ui glVertexAttribP1ui = null;
proc_glVertexAttribP1uiv glVertexAttribP1uiv = null;
proc_glVertexAttribP2ui glVertexAttribP2ui = null;
proc_glVertexAttribP2uiv glVertexAttribP2uiv = null;
proc_glVertexAttribP3ui glVertexAttribP3ui = null;
proc_glVertexAttribP3uiv glVertexAttribP3uiv = null;
proc_glVertexAttribP4ui glVertexAttribP4ui = null;
proc_glVertexAttribP4uiv glVertexAttribP4uiv = null;
proc_glVertexAttribPointer glVertexAttribPointer = null;
proc_glVertexBindingDivisor glVertexBindingDivisor = null;
proc_glViewport glViewport = null;
proc_glViewportArrayv glViewportArrayv = null;
proc_glViewportIndexedf glViewportIndexedf = null;
proc_glViewportIndexedfv glViewportIndexedfv = null;
proc_glWaitSync glWaitSync = null;


void load_opengl(void()(char*) getProcAddress) {
    glActiveShaderProgram                         = getProcAddress("glActiveShaderProgram")                         as proc_glActiveShaderProgram;
    glActiveTexture                               = getProcAddress("glActiveTexture")                               as proc_glActiveTexture;
    glAttachShader                                = getProcAddress("glAttachShader")                                as proc_glAttachShader;
    glBeginConditionalRender                      = getProcAddress("glBeginConditionalRender")                      as proc_glBeginConditionalRender;
    glBeginQuery                                  = getProcAddress("glBeginQuery")                                  as proc_glBeginQuery;
    glBeginQueryIndexed                           = getProcAddress("glBeginQueryIndexed")                           as proc_glBeginQueryIndexed;
    glBeginTransformFeedback                      = getProcAddress("glBeginTransformFeedback")                      as proc_glBeginTransformFeedback;
    glBindAttribLocation                          = getProcAddress("glBindAttribLocation")                          as proc_glBindAttribLocation;
    glBindBuffer                                  = getProcAddress("glBindBuffer")                                  as proc_glBindBuffer;
    glBindBufferBase                              = getProcAddress("glBindBufferBase")                              as proc_glBindBufferBase;
    glBindBufferRange                             = getProcAddress("glBindBufferRange")                             as proc_glBindBufferRange;
    glBindFragDataLocation                        = getProcAddress("glBindFragDataLocation")                        as proc_glBindFragDataLocation;
    glBindFragDataLocationIndexed                 = getProcAddress("glBindFragDataLocationIndexed")                 as proc_glBindFragDataLocationIndexed;
    glBindFramebuffer                             = getProcAddress("glBindFramebuffer")                             as proc_glBindFramebuffer;
    glBindImageTexture                            = getProcAddress("glBindImageTexture")                            as proc_glBindImageTexture;
    glBindProgramPipeline                         = getProcAddress("glBindProgramPipeline")                         as proc_glBindProgramPipeline;
    glBindRenderbuffer                            = getProcAddress("glBindRenderbuffer")                            as proc_glBindRenderbuffer;
    glBindSampler                                 = getProcAddress("glBindSampler")                                 as proc_glBindSampler;
    glBindTexture                                 = getProcAddress("glBindTexture")                                 as proc_glBindTexture;
    glBindTransformFeedback                       = getProcAddress("glBindTransformFeedback")                       as proc_glBindTransformFeedback;
    glBindVertexArray                             = getProcAddress("glBindVertexArray")                             as proc_glBindVertexArray;
    glBindVertexBuffer                            = getProcAddress("glBindVertexBuffer")                            as proc_glBindVertexBuffer;
    glBlendColor                                  = getProcAddress("glBlendColor")                                  as proc_glBlendColor;
    glBlendEquation                               = getProcAddress("glBlendEquation")                               as proc_glBlendEquation;
    glBlendEquationSeparate                       = getProcAddress("glBlendEquationSeparate")                       as proc_glBlendEquationSeparate;
    glBlendEquationSeparatei                      = getProcAddress("glBlendEquationSeparatei")                      as proc_glBlendEquationSeparatei;
    glBlendEquationi                              = getProcAddress("glBlendEquationi")                              as proc_glBlendEquationi;
    glBlendFunc                                   = getProcAddress("glBlendFunc")                                   as proc_glBlendFunc;
    glBlendFuncSeparate                           = getProcAddress("glBlendFuncSeparate")                           as proc_glBlendFuncSeparate;
    glBlendFuncSeparatei                          = getProcAddress("glBlendFuncSeparatei")                          as proc_glBlendFuncSeparatei;
    glBlendFunci                                  = getProcAddress("glBlendFunci")                                  as proc_glBlendFunci;
    glBlitFramebuffer                             = getProcAddress("glBlitFramebuffer")                             as proc_glBlitFramebuffer;
    glBufferData                                  = getProcAddress("glBufferData")                                  as proc_glBufferData;
    glBufferSubData                               = getProcAddress("glBufferSubData")                               as proc_glBufferSubData;
    glCheckFramebufferStatus                      = getProcAddress("glCheckFramebufferStatus")                      as proc_glCheckFramebufferStatus;
    glClampColor                                  = getProcAddress("glClampColor")                                  as proc_glClampColor;
    glClear                                       = getProcAddress("glClear")                                       as proc_glClear;
    glClearBufferData                             = getProcAddress("glClearBufferData")                             as proc_glClearBufferData;
    glClearBufferSubData                          = getProcAddress("glClearBufferSubData")                          as proc_glClearBufferSubData;
    glClearBufferfi                               = getProcAddress("glClearBufferfi")                               as proc_glClearBufferfi;
    glClearBufferfv                               = getProcAddress("glClearBufferfv")                               as proc_glClearBufferfv;
    glClearBufferiv                               = getProcAddress("glClearBufferiv")                               as proc_glClearBufferiv;
    glClearBufferuiv                              = getProcAddress("glClearBufferuiv")                              as proc_glClearBufferuiv;
    glClearColor                                  = getProcAddress("glClearColor")                                  as proc_glClearColor;
    glClearDepth                                  = getProcAddress("glClearDepth")                                  as proc_glClearDepth;
    glClearDepthf                                 = getProcAddress("glClearDepthf")                                 as proc_glClearDepthf;
    glClearStencil                                = getProcAddress("glClearStencil")                                as proc_glClearStencil;
    glClientWaitSync                              = getProcAddress("glClientWaitSync")                              as proc_glClientWaitSync;
    glColorMask                                   = getProcAddress("glColorMask")                                   as proc_glColorMask;
    glColorMaski                                  = getProcAddress("glColorMaski")                                  as proc_glColorMaski;
    glCompileShader                               = getProcAddress("glCompileShader")                               as proc_glCompileShader;
    glCompressedTexImage1D                        = getProcAddress("glCompressedTexImage1D")                        as proc_glCompressedTexImage1D;
    glCompressedTexImage2D                        = getProcAddress("glCompressedTexImage2D")                        as proc_glCompressedTexImage2D;
    glCompressedTexImage3D                        = getProcAddress("glCompressedTexImage3D")                        as proc_glCompressedTexImage3D;
    glCompressedTexSubImage1D                     = getProcAddress("glCompressedTexSubImage1D")                     as proc_glCompressedTexSubImage1D;
    glCompressedTexSubImage2D                     = getProcAddress("glCompressedTexSubImage2D")                     as proc_glCompressedTexSubImage2D;
    glCompressedTexSubImage3D                     = getProcAddress("glCompressedTexSubImage3D")                     as proc_glCompressedTexSubImage3D;
    glCopyBufferSubData                           = getProcAddress("glCopyBufferSubData")                           as proc_glCopyBufferSubData;
    glCopyImageSubData                            = getProcAddress("glCopyImageSubData")                            as proc_glCopyImageSubData;
    glCopyTexImage1D                              = getProcAddress("glCopyTexImage1D")                              as proc_glCopyTexImage1D;
    glCopyTexImage2D                              = getProcAddress("glCopyTexImage2D")                              as proc_glCopyTexImage2D;
    glCopyTexSubImage1D                           = getProcAddress("glCopyTexSubImage1D")                           as proc_glCopyTexSubImage1D;
    glCopyTexSubImage2D                           = getProcAddress("glCopyTexSubImage2D")                           as proc_glCopyTexSubImage2D;
    glCopyTexSubImage3D                           = getProcAddress("glCopyTexSubImage3D")                           as proc_glCopyTexSubImage3D;
    glCreateProgram                               = getProcAddress("glCreateProgram")                               as proc_glCreateProgram;
    glCreateShader                                = getProcAddress("glCreateShader")                                as proc_glCreateShader;
    glCreateShaderProgramv                        = getProcAddress("glCreateShaderProgramv")                        as proc_glCreateShaderProgramv;
    glCullFace                                    = getProcAddress("glCullFace")                                    as proc_glCullFace;
    glDebugMessageCallback                        = getProcAddress("glDebugMessageCallback")                        as proc_glDebugMessageCallback;
    glDebugMessageControl                         = getProcAddress("glDebugMessageControl")                         as proc_glDebugMessageControl;
    glDebugMessageInsert                          = getProcAddress("glDebugMessageInsert")                          as proc_glDebugMessageInsert;
    glDeleteBuffers                               = getProcAddress("glDeleteBuffers")                               as proc_glDeleteBuffers;
    glDeleteFramebuffers                          = getProcAddress("glDeleteFramebuffers")                          as proc_glDeleteFramebuffers;
    glDeleteProgram                               = getProcAddress("glDeleteProgram")                               as proc_glDeleteProgram;
    glDeleteProgramPipelines                      = getProcAddress("glDeleteProgramPipelines")                      as proc_glDeleteProgramPipelines;
    glDeleteQueries                               = getProcAddress("glDeleteQueries")                               as proc_glDeleteQueries;
    glDeleteRenderbuffers                         = getProcAddress("glDeleteRenderbuffers")                         as proc_glDeleteRenderbuffers;
    glDeleteSamplers                              = getProcAddress("glDeleteSamplers")                              as proc_glDeleteSamplers;
    glDeleteShader                                = getProcAddress("glDeleteShader")                                as proc_glDeleteShader;
    glDeleteSync                                  = getProcAddress("glDeleteSync")                                  as proc_glDeleteSync;
    glDeleteTextures                              = getProcAddress("glDeleteTextures")                              as proc_glDeleteTextures;
    glDeleteTransformFeedbacks                    = getProcAddress("glDeleteTransformFeedbacks")                    as proc_glDeleteTransformFeedbacks;
    glDeleteVertexArrays                          = getProcAddress("glDeleteVertexArrays")                          as proc_glDeleteVertexArrays;
    glDepthFunc                                   = getProcAddress("glDepthFunc")                                   as proc_glDepthFunc;
    glDepthMask                                   = getProcAddress("glDepthMask")                                   as proc_glDepthMask;
    glDepthRange                                  = getProcAddress("glDepthRange")                                  as proc_glDepthRange;
    glDepthRangeArrayv                            = getProcAddress("glDepthRangeArrayv")                            as proc_glDepthRangeArrayv;
    glDepthRangeIndexed                           = getProcAddress("glDepthRangeIndexed")                           as proc_glDepthRangeIndexed;
    glDepthRangef                                 = getProcAddress("glDepthRangef")                                 as proc_glDepthRangef;
    glDetachShader                                = getProcAddress("glDetachShader")                                as proc_glDetachShader;
    glDisable                                     = getProcAddress("glDisable")                                     as proc_glDisable;
    glDisableVertexAttribArray                    = getProcAddress("glDisableVertexAttribArray")                    as proc_glDisableVertexAttribArray;
    glDisablei                                    = getProcAddress("glDisablei")                                    as proc_glDisablei;
    glDispatchCompute                             = getProcAddress("glDispatchCompute")                             as proc_glDispatchCompute;
    glDispatchComputeIndirect                     = getProcAddress("glDispatchComputeIndirect")                     as proc_glDispatchComputeIndirect;
    glDrawArrays                                  = getProcAddress("glDrawArrays")                                  as proc_glDrawArrays;
    glDrawArraysIndirect                          = getProcAddress("glDrawArraysIndirect")                          as proc_glDrawArraysIndirect;
    glDrawArraysInstanced                         = getProcAddress("glDrawArraysInstanced")                         as proc_glDrawArraysInstanced;
    glDrawArraysInstancedBaseInstance             = getProcAddress("glDrawArraysInstancedBaseInstance")             as proc_glDrawArraysInstancedBaseInstance;
    glDrawBuffer                                  = getProcAddress("glDrawBuffer")                                  as proc_glDrawBuffer;
    glDrawBuffers                                 = getProcAddress("glDrawBuffers")                                 as proc_glDrawBuffers;
    glDrawElements                                = getProcAddress("glDrawElements")                                as proc_glDrawElements;
    glDrawElementsBaseVertex                      = getProcAddress("glDrawElementsBaseVertex")                      as proc_glDrawElementsBaseVertex;
    glDrawElementsIndirect                        = getProcAddress("glDrawElementsIndirect")                        as proc_glDrawElementsIndirect;
    glDrawElementsInstanced                       = getProcAddress("glDrawElementsInstanced")                       as proc_glDrawElementsInstanced;
    glDrawElementsInstancedBaseInstance           = getProcAddress("glDrawElementsInstancedBaseInstance")           as proc_glDrawElementsInstancedBaseInstance;
    glDrawElementsInstancedBaseVertex             = getProcAddress("glDrawElementsInstancedBaseVertex")             as proc_glDrawElementsInstancedBaseVertex;
    glDrawElementsInstancedBaseVertexBaseInstance = getProcAddress("glDrawElementsInstancedBaseVertexBaseInstance") as proc_glDrawElementsInstancedBaseVertexBaseInstance;
    glDrawRangeElements                           = getProcAddress("glDrawRangeElements")                           as proc_glDrawRangeElements;
    glDrawRangeElementsBaseVertex                 = getProcAddress("glDrawRangeElementsBaseVertex")                 as proc_glDrawRangeElementsBaseVertex;
    glDrawTransformFeedback                       = getProcAddress("glDrawTransformFeedback")                       as proc_glDrawTransformFeedback;
    glDrawTransformFeedbackInstanced              = getProcAddress("glDrawTransformFeedbackInstanced")              as proc_glDrawTransformFeedbackInstanced;
    glDrawTransformFeedbackStream                 = getProcAddress("glDrawTransformFeedbackStream")                 as proc_glDrawTransformFeedbackStream;
    glDrawTransformFeedbackStreamInstanced        = getProcAddress("glDrawTransformFeedbackStreamInstanced")        as proc_glDrawTransformFeedbackStreamInstanced;
    glEnable                                      = getProcAddress("glEnable")                                      as proc_glEnable;
    glEnableVertexAttribArray                     = getProcAddress("glEnableVertexAttribArray")                     as proc_glEnableVertexAttribArray;
    glEnablei                                     = getProcAddress("glEnablei")                                     as proc_glEnablei;
    glEndConditionalRender                        = getProcAddress("glEndConditionalRender")                        as proc_glEndConditionalRender;
    glEndQuery                                    = getProcAddress("glEndQuery")                                    as proc_glEndQuery;
    glEndQueryIndexed                             = getProcAddress("glEndQueryIndexed")                             as proc_glEndQueryIndexed;
    glEndTransformFeedback                        = getProcAddress("glEndTransformFeedback")                        as proc_glEndTransformFeedback;
    glFenceSync                                   = getProcAddress("glFenceSync")                                   as proc_glFenceSync;
    glFinish                                      = getProcAddress("glFinish")                                      as proc_glFinish;
    glFlush                                       = getProcAddress("glFlush")                                       as proc_glFlush;
    glFlushMappedBufferRange                      = getProcAddress("glFlushMappedBufferRange")                      as proc_glFlushMappedBufferRange;
    glFramebufferParameteri                       = getProcAddress("glFramebufferParameteri")                       as proc_glFramebufferParameteri;
    glFramebufferRenderbuffer                     = getProcAddress("glFramebufferRenderbuffer")                     as proc_glFramebufferRenderbuffer;
    glFramebufferTexture                          = getProcAddress("glFramebufferTexture")                          as proc_glFramebufferTexture;
    glFramebufferTexture1D                        = getProcAddress("glFramebufferTexture1D")                        as proc_glFramebufferTexture1D;
    glFramebufferTexture2D                        = getProcAddress("glFramebufferTexture2D")                        as proc_glFramebufferTexture2D;
    glFramebufferTexture3D                        = getProcAddress("glFramebufferTexture3D")                        as proc_glFramebufferTexture3D;
    glFramebufferTextureLayer                     = getProcAddress("glFramebufferTextureLayer")                     as proc_glFramebufferTextureLayer;
    glFrontFace                                   = getProcAddress("glFrontFace")                                   as proc_glFrontFace;
    glGenBuffers                                  = getProcAddress("glGenBuffers")                                  as proc_glGenBuffers;
    glGenFramebuffers                             = getProcAddress("glGenFramebuffers")                             as proc_glGenFramebuffers;
    glGenProgramPipelines                         = getProcAddress("glGenProgramPipelines")                         as proc_glGenProgramPipelines;
    glGenQueries                                  = getProcAddress("glGenQueries")                                  as proc_glGenQueries;
    glGenRenderbuffers                            = getProcAddress("glGenRenderbuffers")                            as proc_glGenRenderbuffers;
    glGenSamplers                                 = getProcAddress("glGenSamplers")                                 as proc_glGenSamplers;
    glGenTextures                                 = getProcAddress("glGenTextures")                                 as proc_glGenTextures;
    glGenTransformFeedbacks                       = getProcAddress("glGenTransformFeedbacks")                       as proc_glGenTransformFeedbacks;
    glGenVertexArrays                             = getProcAddress("glGenVertexArrays")                             as proc_glGenVertexArrays;
    glGenerateMipmap                              = getProcAddress("glGenerateMipmap")                              as proc_glGenerateMipmap;
    glGetActiveAtomicCounterBufferiv              = getProcAddress("glGetActiveAtomicCounterBufferiv")              as proc_glGetActiveAtomicCounterBufferiv;
    glGetActiveAttrib                             = getProcAddress("glGetActiveAttrib")                             as proc_glGetActiveAttrib;
    glGetActiveSubroutineName                     = getProcAddress("glGetActiveSubroutineName")                     as proc_glGetActiveSubroutineName;
    glGetActiveSubroutineUniformName              = getProcAddress("glGetActiveSubroutineUniformName")              as proc_glGetActiveSubroutineUniformName;
    glGetActiveSubroutineUniformiv                = getProcAddress("glGetActiveSubroutineUniformiv")                as proc_glGetActiveSubroutineUniformiv;
    glGetActiveUniform                            = getProcAddress("glGetActiveUniform")                            as proc_glGetActiveUniform;
    glGetActiveUniformBlockName                   = getProcAddress("glGetActiveUniformBlockName")                   as proc_glGetActiveUniformBlockName;
    glGetActiveUniformBlockiv                     = getProcAddress("glGetActiveUniformBlockiv")                     as proc_glGetActiveUniformBlockiv;
    glGetActiveUniformName                        = getProcAddress("glGetActiveUniformName")                        as proc_glGetActiveUniformName;
    glGetActiveUniformsiv                         = getProcAddress("glGetActiveUniformsiv")                         as proc_glGetActiveUniformsiv;
    glGetAttachedShaders                          = getProcAddress("glGetAttachedShaders")                          as proc_glGetAttachedShaders;
    glGetAttribLocation                           = getProcAddress("glGetAttribLocation")                           as proc_glGetAttribLocation;
    glGetBooleani_v                               = getProcAddress("glGetBooleani_v")                               as proc_glGetBooleani_v;
    glGetBooleanv                                 = getProcAddress("glGetBooleanv")                                 as proc_glGetBooleanv;
    glGetBufferParameteri64v                      = getProcAddress("glGetBufferParameteri64v")                      as proc_glGetBufferParameteri64v;
    glGetBufferParameteriv                        = getProcAddress("glGetBufferParameteriv")                        as proc_glGetBufferParameteriv;
    glGetBufferPointerv                           = getProcAddress("glGetBufferPointerv")                           as proc_glGetBufferPointerv;
    glGetBufferSubData                            = getProcAddress("glGetBufferSubData")                            as proc_glGetBufferSubData;
    glGetCompressedTexImage                       = getProcAddress("glGetCompressedTexImage")                       as proc_glGetCompressedTexImage;
    glGetDebugMessageLog                          = getProcAddress("glGetDebugMessageLog")                          as proc_glGetDebugMessageLog;
    glGetDoublei_v                                = getProcAddress("glGetDoublei_v")                                as proc_glGetDoublei_v;
    glGetDoublev                                  = getProcAddress("glGetDoublev")                                  as proc_glGetDoublev;
    glGetError                                    = getProcAddress("glGetError")                                    as proc_glGetError;
    glGetFloati_v                                 = getProcAddress("glGetFloati_v")                                 as proc_glGetFloati_v;
    glGetFloatv                                   = getProcAddress("glGetFloatv")                                   as proc_glGetFloatv;
    glGetFragDataIndex                            = getProcAddress("glGetFragDataIndex")                            as proc_glGetFragDataIndex;
    glGetFragDataLocation                         = getProcAddress("glGetFragDataLocation")                         as proc_glGetFragDataLocation;
    glGetFramebufferAttachmentParameteriv         = getProcAddress("glGetFramebufferAttachmentParameteriv")         as proc_glGetFramebufferAttachmentParameteriv;
    glGetFramebufferParameteriv                   = getProcAddress("glGetFramebufferParameteriv")                   as proc_glGetFramebufferParameteriv;
    glGetInteger64i_v                             = getProcAddress("glGetInteger64i_v")                             as proc_glGetInteger64i_v;
    glGetInteger64v                               = getProcAddress("glGetInteger64v")                               as proc_glGetInteger64v;
    glGetIntegeri_v                               = getProcAddress("glGetIntegeri_v")                               as proc_glGetIntegeri_v;
    glGetIntegerv                                 = getProcAddress("glGetIntegerv")                                 as proc_glGetIntegerv;
    glGetInternalformati64v                       = getProcAddress("glGetInternalformati64v")                       as proc_glGetInternalformati64v;
    glGetInternalformativ                         = getProcAddress("glGetInternalformativ")                         as proc_glGetInternalformativ;
    glGetMultisamplefv                            = getProcAddress("glGetMultisamplefv")                            as proc_glGetMultisamplefv;
    glGetObjectLabel                              = getProcAddress("glGetObjectLabel")                              as proc_glGetObjectLabel;
    glGetObjectPtrLabel                           = getProcAddress("glGetObjectPtrLabel")                           as proc_glGetObjectPtrLabel;
    glGetPointerv                                 = getProcAddress("glGetPointerv")                                 as proc_glGetPointerv;
    glGetProgramBinary                            = getProcAddress("glGetProgramBinary")                            as proc_glGetProgramBinary;
    glGetProgramInfoLog                           = getProcAddress("glGetProgramInfoLog")                           as proc_glGetProgramInfoLog;
    glGetProgramInterfaceiv                       = getProcAddress("glGetProgramInterfaceiv")                       as proc_glGetProgramInterfaceiv;
    glGetProgramPipelineInfoLog                   = getProcAddress("glGetProgramPipelineInfoLog")                   as proc_glGetProgramPipelineInfoLog;
    glGetProgramPipelineiv                        = getProcAddress("glGetProgramPipelineiv")                        as proc_glGetProgramPipelineiv;
    glGetProgramResourceIndex                     = getProcAddress("glGetProgramResourceIndex")                     as proc_glGetProgramResourceIndex;
    glGetProgramResourceLocation                  = getProcAddress("glGetProgramResourceLocation")                  as proc_glGetProgramResourceLocation;
    glGetProgramResourceLocationIndex             = getProcAddress("glGetProgramResourceLocationIndex")             as proc_glGetProgramResourceLocationIndex;
    glGetProgramResourceName                      = getProcAddress("glGetProgramResourceName")                      as proc_glGetProgramResourceName;
    glGetProgramResourceiv                        = getProcAddress("glGetProgramResourceiv")                        as proc_glGetProgramResourceiv;
    glGetProgramStageiv                           = getProcAddress("glGetProgramStageiv")                           as proc_glGetProgramStageiv;
    glGetProgramiv                                = getProcAddress("glGetProgramiv")                                as proc_glGetProgramiv;
    glGetQueryIndexediv                           = getProcAddress("glGetQueryIndexediv")                           as proc_glGetQueryIndexediv;
    glGetQueryObjecti64v                          = getProcAddress("glGetQueryObjecti64v")                          as proc_glGetQueryObjecti64v;
    glGetQueryObjectiv                            = getProcAddress("glGetQueryObjectiv")                            as proc_glGetQueryObjectiv;
    glGetQueryObjectui64v                         = getProcAddress("glGetQueryObjectui64v")                         as proc_glGetQueryObjectui64v;
    glGetQueryObjectuiv                           = getProcAddress("glGetQueryObjectuiv")                           as proc_glGetQueryObjectuiv;
    glGetQueryiv                                  = getProcAddress("glGetQueryiv")                                  as proc_glGetQueryiv;
    glGetRenderbufferParameteriv                  = getProcAddress("glGetRenderbufferParameteriv")                  as proc_glGetRenderbufferParameteriv;
    glGetSamplerParameterIiv                      = getProcAddress("glGetSamplerParameterIiv")                      as proc_glGetSamplerParameterIiv;
    glGetSamplerParameterIuiv                     = getProcAddress("glGetSamplerParameterIuiv")                     as proc_glGetSamplerParameterIuiv;
    glGetSamplerParameterfv                       = getProcAddress("glGetSamplerParameterfv")                       as proc_glGetSamplerParameterfv;
    glGetSamplerParameteriv                       = getProcAddress("glGetSamplerParameteriv")                       as proc_glGetSamplerParameteriv;
    glGetShaderInfoLog                            = getProcAddress("glGetShaderInfoLog")                            as proc_glGetShaderInfoLog;
    glGetShaderPrecisionFormat                    = getProcAddress("glGetShaderPrecisionFormat")                    as proc_glGetShaderPrecisionFormat;
    glGetShaderSource                             = getProcAddress("glGetShaderSource")                             as proc_glGetShaderSource;
    glGetShaderiv                                 = getProcAddress("glGetShaderiv")                                 as proc_glGetShaderiv;
    glGetString                                   = getProcAddress("glGetString")                                   as proc_glGetString;
    glGetStringi                                  = getProcAddress("glGetStringi")                                  as proc_glGetStringi;
    glGetSubroutineIndex                          = getProcAddress("glGetSubroutineIndex")                          as proc_glGetSubroutineIndex;
    glGetSubroutineUniformLocation                = getProcAddress("glGetSubroutineUniformLocation")                as proc_glGetSubroutineUniformLocation;
    glGetSynciv                                   = getProcAddress("glGetSynciv")                                   as proc_glGetSynciv;
    glGetTexImage                                 = getProcAddress("glGetTexImage")                                 as proc_glGetTexImage;
    glGetTexLevelParameterfv                      = getProcAddress("glGetTexLevelParameterfv")                      as proc_glGetTexLevelParameterfv;
    glGetTexLevelParameteriv                      = getProcAddress("glGetTexLevelParameteriv")                      as proc_glGetTexLevelParameteriv;
    glGetTexParameterIiv                          = getProcAddress("glGetTexParameterIiv")                          as proc_glGetTexParameterIiv;
    glGetTexParameterIuiv                         = getProcAddress("glGetTexParameterIuiv")                         as proc_glGetTexParameterIuiv;
    glGetTexParameterfv                           = getProcAddress("glGetTexParameterfv")                           as proc_glGetTexParameterfv;
    glGetTexParameteriv                           = getProcAddress("glGetTexParameteriv")                           as proc_glGetTexParameteriv;
    glGetTransformFeedbackVarying                 = getProcAddress("glGetTransformFeedbackVarying")                 as proc_glGetTransformFeedbackVarying;
    glGetUniformBlockIndex                        = getProcAddress("glGetUniformBlockIndex")                        as proc_glGetUniformBlockIndex;
    glGetUniformIndices                           = getProcAddress("glGetUniformIndices")                           as proc_glGetUniformIndices;
    glGetUniformLocation                          = getProcAddress("glGetUniformLocation")                          as proc_glGetUniformLocation;
    glGetUniformSubroutineuiv                     = getProcAddress("glGetUniformSubroutineuiv")                     as proc_glGetUniformSubroutineuiv;
    glGetUniformdv                                = getProcAddress("glGetUniformdv")                                as proc_glGetUniformdv;
    glGetUniformfv                                = getProcAddress("glGetUniformfv")                                as proc_glGetUniformfv;
    glGetUniformiv                                = getProcAddress("glGetUniformiv")                                as proc_glGetUniformiv;
    glGetUniformuiv                               = getProcAddress("glGetUniformuiv")                               as proc_glGetUniformuiv;
    glGetVertexAttribIiv                          = getProcAddress("glGetVertexAttribIiv")                          as proc_glGetVertexAttribIiv;
    glGetVertexAttribIuiv                         = getProcAddress("glGetVertexAttribIuiv")                         as proc_glGetVertexAttribIuiv;
    glGetVertexAttribLdv                          = getProcAddress("glGetVertexAttribLdv")                          as proc_glGetVertexAttribLdv;
    glGetVertexAttribPointerv                     = getProcAddress("glGetVertexAttribPointerv")                     as proc_glGetVertexAttribPointerv;
    glGetVertexAttribdv                           = getProcAddress("glGetVertexAttribdv")                           as proc_glGetVertexAttribdv;
    glGetVertexAttribfv                           = getProcAddress("glGetVertexAttribfv")                           as proc_glGetVertexAttribfv;
    glGetVertexAttribiv                           = getProcAddress("glGetVertexAttribiv")                           as proc_glGetVertexAttribiv;
    glHint                                        = getProcAddress("glHint")                                        as proc_glHint;
    glInvalidateBufferData                        = getProcAddress("glInvalidateBufferData")                        as proc_glInvalidateBufferData;
    glInvalidateBufferSubData                     = getProcAddress("glInvalidateBufferSubData")                     as proc_glInvalidateBufferSubData;
    glInvalidateFramebuffer                       = getProcAddress("glInvalidateFramebuffer")                       as proc_glInvalidateFramebuffer;
    glInvalidateSubFramebuffer                    = getProcAddress("glInvalidateSubFramebuffer")                    as proc_glInvalidateSubFramebuffer;
    glInvalidateTexImage                          = getProcAddress("glInvalidateTexImage")                          as proc_glInvalidateTexImage;
    glInvalidateTexSubImage                       = getProcAddress("glInvalidateTexSubImage")                       as proc_glInvalidateTexSubImage;
    glIsBuffer                                    = getProcAddress("glIsBuffer")                                    as proc_glIsBuffer;
    glIsEnabled                                   = getProcAddress("glIsEnabled")                                   as proc_glIsEnabled;
    glIsEnabledi                                  = getProcAddress("glIsEnabledi")                                  as proc_glIsEnabledi;
    glIsFramebuffer                               = getProcAddress("glIsFramebuffer")                               as proc_glIsFramebuffer;
    glIsProgram                                   = getProcAddress("glIsProgram")                                   as proc_glIsProgram;
    glIsProgramPipeline                           = getProcAddress("glIsProgramPipeline")                           as proc_glIsProgramPipeline;
    glIsQuery                                     = getProcAddress("glIsQuery")                                     as proc_glIsQuery;
    glIsRenderbuffer                              = getProcAddress("glIsRenderbuffer")                              as proc_glIsRenderbuffer;
    glIsSampler                                   = getProcAddress("glIsSampler")                                   as proc_glIsSampler;
    glIsShader                                    = getProcAddress("glIsShader")                                    as proc_glIsShader;
    glIsSync                                      = getProcAddress("glIsSync")                                      as proc_glIsSync;
    glIsTexture                                   = getProcAddress("glIsTexture")                                   as proc_glIsTexture;
    glIsTransformFeedback                         = getProcAddress("glIsTransformFeedback")                         as proc_glIsTransformFeedback;
    glIsVertexArray                               = getProcAddress("glIsVertexArray")                               as proc_glIsVertexArray;
    glLineWidth                                   = getProcAddress("glLineWidth")                                   as proc_glLineWidth;
    glLinkProgram                                 = getProcAddress("glLinkProgram")                                 as proc_glLinkProgram;
    glLogicOp                                     = getProcAddress("glLogicOp")                                     as proc_glLogicOp;
    glMapBuffer                                   = getProcAddress("glMapBuffer")                                   as proc_glMapBuffer;
    glMapBufferRange                              = getProcAddress("glMapBufferRange")                              as proc_glMapBufferRange;
    glMemoryBarrier                               = getProcAddress("glMemoryBarrier")                               as proc_glMemoryBarrier;
    glMinSampleShading                            = getProcAddress("glMinSampleShading")                            as proc_glMinSampleShading;
    glMultiDrawArrays                             = getProcAddress("glMultiDrawArrays")                             as proc_glMultiDrawArrays;
    glMultiDrawArraysIndirect                     = getProcAddress("glMultiDrawArraysIndirect")                     as proc_glMultiDrawArraysIndirect;
    glMultiDrawElements                           = getProcAddress("glMultiDrawElements")                           as proc_glMultiDrawElements;
    glMultiDrawElementsBaseVertex                 = getProcAddress("glMultiDrawElementsBaseVertex")                 as proc_glMultiDrawElementsBaseVertex;
    glMultiDrawElementsIndirect                   = getProcAddress("glMultiDrawElementsIndirect")                   as proc_glMultiDrawElementsIndirect;
    glObjectLabel                                 = getProcAddress("glObjectLabel")                                 as proc_glObjectLabel;
    glObjectPtrLabel                              = getProcAddress("glObjectPtrLabel")                              as proc_glObjectPtrLabel;
    glPatchParameterfv                            = getProcAddress("glPatchParameterfv")                            as proc_glPatchParameterfv;
    glPatchParameteri                             = getProcAddress("glPatchParameteri")                             as proc_glPatchParameteri;
    glPauseTransformFeedback                      = getProcAddress("glPauseTransformFeedback")                      as proc_glPauseTransformFeedback;
    glPixelStoref                                 = getProcAddress("glPixelStoref")                                 as proc_glPixelStoref;
    glPixelStorei                                 = getProcAddress("glPixelStorei")                                 as proc_glPixelStorei;
    glPointParameterf                             = getProcAddress("glPointParameterf")                             as proc_glPointParameterf;
    glPointParameterfv                            = getProcAddress("glPointParameterfv")                            as proc_glPointParameterfv;
    glPointParameteri                             = getProcAddress("glPointParameteri")                             as proc_glPointParameteri;
    glPointParameteriv                            = getProcAddress("glPointParameteriv")                            as proc_glPointParameteriv;
    glPointSize                                   = getProcAddress("glPointSize")                                   as proc_glPointSize;
    glPolygonMode                                 = getProcAddress("glPolygonMode")                                 as proc_glPolygonMode;
    glPolygonOffset                               = getProcAddress("glPolygonOffset")                               as proc_glPolygonOffset;
    glPopDebugGroup                               = getProcAddress("glPopDebugGroup")                               as proc_glPopDebugGroup;
    glPrimitiveRestartIndex                       = getProcAddress("glPrimitiveRestartIndex")                       as proc_glPrimitiveRestartIndex;
    glProgramBinary                               = getProcAddress("glProgramBinary")                               as proc_glProgramBinary;
    glProgramParameteri                           = getProcAddress("glProgramParameteri")                           as proc_glProgramParameteri;
    glProgramUniform1d                            = getProcAddress("glProgramUniform1d")                            as proc_glProgramUniform1d;
    glProgramUniform1dv                           = getProcAddress("glProgramUniform1dv")                           as proc_glProgramUniform1dv;
    glProgramUniform1f                            = getProcAddress("glProgramUniform1f")                            as proc_glProgramUniform1f;
    glProgramUniform1fv                           = getProcAddress("glProgramUniform1fv")                           as proc_glProgramUniform1fv;
    glProgramUniform1i                            = getProcAddress("glProgramUniform1i")                            as proc_glProgramUniform1i;
    glProgramUniform1iv                           = getProcAddress("glProgramUniform1iv")                           as proc_glProgramUniform1iv;
    glProgramUniform1ui                           = getProcAddress("glProgramUniform1ui")                           as proc_glProgramUniform1ui;
    glProgramUniform1uiv                          = getProcAddress("glProgramUniform1uiv")                          as proc_glProgramUniform1uiv;
    glProgramUniform2d                            = getProcAddress("glProgramUniform2d")                            as proc_glProgramUniform2d;
    glProgramUniform2dv                           = getProcAddress("glProgramUniform2dv")                           as proc_glProgramUniform2dv;
    glProgramUniform2f                            = getProcAddress("glProgramUniform2f")                            as proc_glProgramUniform2f;
    glProgramUniform2fv                           = getProcAddress("glProgramUniform2fv")                           as proc_glProgramUniform2fv;
    glProgramUniform2i                            = getProcAddress("glProgramUniform2i")                            as proc_glProgramUniform2i;
    glProgramUniform2iv                           = getProcAddress("glProgramUniform2iv")                           as proc_glProgramUniform2iv;
    glProgramUniform2ui                           = getProcAddress("glProgramUniform2ui")                           as proc_glProgramUniform2ui;
    glProgramUniform2uiv                          = getProcAddress("glProgramUniform2uiv")                          as proc_glProgramUniform2uiv;
    glProgramUniform3d                            = getProcAddress("glProgramUniform3d")                            as proc_glProgramUniform3d;
    glProgramUniform3dv                           = getProcAddress("glProgramUniform3dv")                           as proc_glProgramUniform3dv;
    glProgramUniform3f                            = getProcAddress("glProgramUniform3f")                            as proc_glProgramUniform3f;
    glProgramUniform3fv                           = getProcAddress("glProgramUniform3fv")                           as proc_glProgramUniform3fv;
    glProgramUniform3i                            = getProcAddress("glProgramUniform3i")                            as proc_glProgramUniform3i;
    glProgramUniform3iv                           = getProcAddress("glProgramUniform3iv")                           as proc_glProgramUniform3iv;
    glProgramUniform3ui                           = getProcAddress("glProgramUniform3ui")                           as proc_glProgramUniform3ui;
    glProgramUniform3uiv                          = getProcAddress("glProgramUniform3uiv")                          as proc_glProgramUniform3uiv;
    glProgramUniform4d                            = getProcAddress("glProgramUniform4d")                            as proc_glProgramUniform4d;
    glProgramUniform4dv                           = getProcAddress("glProgramUniform4dv")                           as proc_glProgramUniform4dv;
    glProgramUniform4f                            = getProcAddress("glProgramUniform4f")                            as proc_glProgramUniform4f;
    glProgramUniform4fv                           = getProcAddress("glProgramUniform4fv")                           as proc_glProgramUniform4fv;
    glProgramUniform4i                            = getProcAddress("glProgramUniform4i")                            as proc_glProgramUniform4i;
    glProgramUniform4iv                           = getProcAddress("glProgramUniform4iv")                           as proc_glProgramUniform4iv;
    glProgramUniform4ui                           = getProcAddress("glProgramUniform4ui")                           as proc_glProgramUniform4ui;
    glProgramUniform4uiv                          = getProcAddress("glProgramUniform4uiv")                          as proc_glProgramUniform4uiv;
    glProgramUniformMatrix2dv                     = getProcAddress("glProgramUniformMatrix2dv")                     as proc_glProgramUniformMatrix2dv;
    glProgramUniformMatrix2fv                     = getProcAddress("glProgramUniformMatrix2fv")                     as proc_glProgramUniformMatrix2fv;
    glProgramUniformMatrix2x3dv                   = getProcAddress("glProgramUniformMatrix2x3dv")                   as proc_glProgramUniformMatrix2x3dv;
    glProgramUniformMatrix2x3fv                   = getProcAddress("glProgramUniformMatrix2x3fv")                   as proc_glProgramUniformMatrix2x3fv;
    glProgramUniformMatrix2x4dv                   = getProcAddress("glProgramUniformMatrix2x4dv")                   as proc_glProgramUniformMatrix2x4dv;
    glProgramUniformMatrix2x4fv                   = getProcAddress("glProgramUniformMatrix2x4fv")                   as proc_glProgramUniformMatrix2x4fv;
    glProgramUniformMatrix3dv                     = getProcAddress("glProgramUniformMatrix3dv")                     as proc_glProgramUniformMatrix3dv;
    glProgramUniformMatrix3fv                     = getProcAddress("glProgramUniformMatrix3fv")                     as proc_glProgramUniformMatrix3fv;
    glProgramUniformMatrix3x2dv                   = getProcAddress("glProgramUniformMatrix3x2dv")                   as proc_glProgramUniformMatrix3x2dv;
    glProgramUniformMatrix3x2fv                   = getProcAddress("glProgramUniformMatrix3x2fv")                   as proc_glProgramUniformMatrix3x2fv;
    glProgramUniformMatrix3x4dv                   = getProcAddress("glProgramUniformMatrix3x4dv")                   as proc_glProgramUniformMatrix3x4dv;
    glProgramUniformMatrix3x4fv                   = getProcAddress("glProgramUniformMatrix3x4fv")                   as proc_glProgramUniformMatrix3x4fv;
    glProgramUniformMatrix4dv                     = getProcAddress("glProgramUniformMatrix4dv")                     as proc_glProgramUniformMatrix4dv;
    glProgramUniformMatrix4fv                     = getProcAddress("glProgramUniformMatrix4fv")                     as proc_glProgramUniformMatrix4fv;
    glProgramUniformMatrix4x2dv                   = getProcAddress("glProgramUniformMatrix4x2dv")                   as proc_glProgramUniformMatrix4x2dv;
    glProgramUniformMatrix4x2fv                   = getProcAddress("glProgramUniformMatrix4x2fv")                   as proc_glProgramUniformMatrix4x2fv;
    glProgramUniformMatrix4x3dv                   = getProcAddress("glProgramUniformMatrix4x3dv")                   as proc_glProgramUniformMatrix4x3dv;
    glProgramUniformMatrix4x3fv                   = getProcAddress("glProgramUniformMatrix4x3fv")                   as proc_glProgramUniformMatrix4x3fv;
    glProvokingVertex                             = getProcAddress("glProvokingVertex")                             as proc_glProvokingVertex;
    glPushDebugGroup                              = getProcAddress("glPushDebugGroup")                              as proc_glPushDebugGroup;
    glQueryCounter                                = getProcAddress("glQueryCounter")                                as proc_glQueryCounter;
    glReadBuffer                                  = getProcAddress("glReadBuffer")                                  as proc_glReadBuffer;
    glReadPixels                                  = getProcAddress("glReadPixels")                                  as proc_glReadPixels;
    glReleaseShaderCompiler                       = getProcAddress("glReleaseShaderCompiler")                       as proc_glReleaseShaderCompiler;
    glRenderbufferStorage                         = getProcAddress("glRenderbufferStorage")                         as proc_glRenderbufferStorage;
    glRenderbufferStorageMultisample              = getProcAddress("glRenderbufferStorageMultisample")              as proc_glRenderbufferStorageMultisample;
    glResumeTransformFeedback                     = getProcAddress("glResumeTransformFeedback")                     as proc_glResumeTransformFeedback;
    glSampleCoverage                              = getProcAddress("glSampleCoverage")                              as proc_glSampleCoverage;
    glSampleMaski                                 = getProcAddress("glSampleMaski")                                 as proc_glSampleMaski;
    glSamplerParameterIiv                         = getProcAddress("glSamplerParameterIiv")                         as proc_glSamplerParameterIiv;
    glSamplerParameterIuiv                        = getProcAddress("glSamplerParameterIuiv")                        as proc_glSamplerParameterIuiv;
    glSamplerParameterf                           = getProcAddress("glSamplerParameterf")                           as proc_glSamplerParameterf;
    glSamplerParameterfv                          = getProcAddress("glSamplerParameterfv")                          as proc_glSamplerParameterfv;
    glSamplerParameteri                           = getProcAddress("glSamplerParameteri")                           as proc_glSamplerParameteri;
    glSamplerParameteriv                          = getProcAddress("glSamplerParameteriv")                          as proc_glSamplerParameteriv;
    glScissor                                     = getProcAddress("glScissor")                                     as proc_glScissor;
    glScissorArrayv                               = getProcAddress("glScissorArrayv")                               as proc_glScissorArrayv;
    glScissorIndexed                              = getProcAddress("glScissorIndexed")                              as proc_glScissorIndexed;
    glScissorIndexedv                             = getProcAddress("glScissorIndexedv")                             as proc_glScissorIndexedv;
    glShaderBinary                                = getProcAddress("glShaderBinary")                                as proc_glShaderBinary;
    glShaderSource                                = getProcAddress("glShaderSource")                                as proc_glShaderSource;
    glShaderStorageBlockBinding                   = getProcAddress("glShaderStorageBlockBinding")                   as proc_glShaderStorageBlockBinding;
    glStencilFunc                                 = getProcAddress("glStencilFunc")                                 as proc_glStencilFunc;
    glStencilFuncSeparate                         = getProcAddress("glStencilFuncSeparate")                         as proc_glStencilFuncSeparate;
    glStencilMask                                 = getProcAddress("glStencilMask")                                 as proc_glStencilMask;
    glStencilMaskSeparate                         = getProcAddress("glStencilMaskSeparate")                         as proc_glStencilMaskSeparate;
    glStencilOp                                   = getProcAddress("glStencilOp")                                   as proc_glStencilOp;
    glStencilOpSeparate                           = getProcAddress("glStencilOpSeparate")                           as proc_glStencilOpSeparate;
    glTexBuffer                                   = getProcAddress("glTexBuffer")                                   as proc_glTexBuffer;
    glTexBufferRange                              = getProcAddress("glTexBufferRange")                              as proc_glTexBufferRange;
    glTexImage1D                                  = getProcAddress("glTexImage1D")                                  as proc_glTexImage1D;
    glTexImage2D                                  = getProcAddress("glTexImage2D")                                  as proc_glTexImage2D;
    glTexImage2DMultisample                       = getProcAddress("glTexImage2DMultisample")                       as proc_glTexImage2DMultisample;
    glTexImage3D                                  = getProcAddress("glTexImage3D")                                  as proc_glTexImage3D;
    glTexImage3DMultisample                       = getProcAddress("glTexImage3DMultisample")                       as proc_glTexImage3DMultisample;
    glTexParameterIiv                             = getProcAddress("glTexParameterIiv")                             as proc_glTexParameterIiv;
    glTexParameterIuiv                            = getProcAddress("glTexParameterIuiv")                            as proc_glTexParameterIuiv;
    glTexParameterf                               = getProcAddress("glTexParameterf")                               as proc_glTexParameterf;
    glTexParameterfv                              = getProcAddress("glTexParameterfv")                              as proc_glTexParameterfv;
    glTexParameteri                               = getProcAddress("glTexParameteri")                               as proc_glTexParameteri;
    glTexParameteriv                              = getProcAddress("glTexParameteriv")                              as proc_glTexParameteriv;
    glTexStorage1D                                = getProcAddress("glTexStorage1D")                                as proc_glTexStorage1D;
    glTexStorage2D                                = getProcAddress("glTexStorage2D")                                as proc_glTexStorage2D;
    glTexStorage2DMultisample                     = getProcAddress("glTexStorage2DMultisample")                     as proc_glTexStorage2DMultisample;
    glTexStorage3D                                = getProcAddress("glTexStorage3D")                                as proc_glTexStorage3D;
    glTexStorage3DMultisample                     = getProcAddress("glTexStorage3DMultisample")                     as proc_glTexStorage3DMultisample;
    glTexSubImage1D                               = getProcAddress("glTexSubImage1D")                               as proc_glTexSubImage1D;
    glTexSubImage2D                               = getProcAddress("glTexSubImage2D")                               as proc_glTexSubImage2D;
    glTexSubImage3D                               = getProcAddress("glTexSubImage3D")                               as proc_glTexSubImage3D;
    glTextureView                                 = getProcAddress("glTextureView")                                 as proc_glTextureView;
    glTransformFeedbackVaryings                   = getProcAddress("glTransformFeedbackVaryings")                   as proc_glTransformFeedbackVaryings;
    glUniform1d                                   = getProcAddress("glUniform1d")                                   as proc_glUniform1d;
    glUniform1dv                                  = getProcAddress("glUniform1dv")                                  as proc_glUniform1dv;
    glUniform1f                                   = getProcAddress("glUniform1f")                                   as proc_glUniform1f;
    glUniform1fv                                  = getProcAddress("glUniform1fv")                                  as proc_glUniform1fv;
    glUniform1i                                   = getProcAddress("glUniform1i")                                   as proc_glUniform1i;
    glUniform1iv                                  = getProcAddress("glUniform1iv")                                  as proc_glUniform1iv;
    glUniform1ui                                  = getProcAddress("glUniform1ui")                                  as proc_glUniform1ui;
    glUniform1uiv                                 = getProcAddress("glUniform1uiv")                                 as proc_glUniform1uiv;
    glUniform2d                                   = getProcAddress("glUniform2d")                                   as proc_glUniform2d;
    glUniform2dv                                  = getProcAddress("glUniform2dv")                                  as proc_glUniform2dv;
    glUniform2f                                   = getProcAddress("glUniform2f")                                   as proc_glUniform2f;
    glUniform2fv                                  = getProcAddress("glUniform2fv")                                  as proc_glUniform2fv;
    glUniform2i                                   = getProcAddress("glUniform2i")                                   as proc_glUniform2i;
    glUniform2iv                                  = getProcAddress("glUniform2iv")                                  as proc_glUniform2iv;
    glUniform2ui                                  = getProcAddress("glUniform2ui")                                  as proc_glUniform2ui;
    glUniform2uiv                                 = getProcAddress("glUniform2uiv")                                 as proc_glUniform2uiv;
    glUniform3d                                   = getProcAddress("glUniform3d")                                   as proc_glUniform3d;
    glUniform3dv                                  = getProcAddress("glUniform3dv")                                  as proc_glUniform3dv;
    glUniform3f                                   = getProcAddress("glUniform3f")                                   as proc_glUniform3f;
    glUniform3fv                                  = getProcAddress("glUniform3fv")                                  as proc_glUniform3fv;
    glUniform3i                                   = getProcAddress("glUniform3i")                                   as proc_glUniform3i;
    glUniform3iv                                  = getProcAddress("glUniform3iv")                                  as proc_glUniform3iv;
    glUniform3ui                                  = getProcAddress("glUniform3ui")                                  as proc_glUniform3ui;
    glUniform3uiv                                 = getProcAddress("glUniform3uiv")                                 as proc_glUniform3uiv;
    glUniform4d                                   = getProcAddress("glUniform4d")                                   as proc_glUniform4d;
    glUniform4dv                                  = getProcAddress("glUniform4dv")                                  as proc_glUniform4dv;
    glUniform4f                                   = getProcAddress("glUniform4f")                                   as proc_glUniform4f;
    glUniform4fv                                  = getProcAddress("glUniform4fv")                                  as proc_glUniform4fv;
    glUniform4i                                   = getProcAddress("glUniform4i")                                   as proc_glUniform4i;
    glUniform4iv                                  = getProcAddress("glUniform4iv")                                  as proc_glUniform4iv;
    glUniform4ui                                  = getProcAddress("glUniform4ui")                                  as proc_glUniform4ui;
    glUniform4uiv                                 = getProcAddress("glUniform4uiv")                                 as proc_glUniform4uiv;
    glUniformBlockBinding                         = getProcAddress("glUniformBlockBinding")                         as proc_glUniformBlockBinding;
    glUniformMatrix2dv                            = getProcAddress("glUniformMatrix2dv")                            as proc_glUniformMatrix2dv;
    glUniformMatrix2fv                            = getProcAddress("glUniformMatrix2fv")                            as proc_glUniformMatrix2fv;
    glUniformMatrix2x3dv                          = getProcAddress("glUniformMatrix2x3dv")                          as proc_glUniformMatrix2x3dv;
    glUniformMatrix2x3fv                          = getProcAddress("glUniformMatrix2x3fv")                          as proc_glUniformMatrix2x3fv;
    glUniformMatrix2x4dv                          = getProcAddress("glUniformMatrix2x4dv")                          as proc_glUniformMatrix2x4dv;
    glUniformMatrix2x4fv                          = getProcAddress("glUniformMatrix2x4fv")                          as proc_glUniformMatrix2x4fv;
    glUniformMatrix3dv                            = getProcAddress("glUniformMatrix3dv")                            as proc_glUniformMatrix3dv;
    glUniformMatrix3fv                            = getProcAddress("glUniformMatrix3fv")                            as proc_glUniformMatrix3fv;
    glUniformMatrix3x2dv                          = getProcAddress("glUniformMatrix3x2dv")                          as proc_glUniformMatrix3x2dv;
    glUniformMatrix3x2fv                          = getProcAddress("glUniformMatrix3x2fv")                          as proc_glUniformMatrix3x2fv;
    glUniformMatrix3x4dv                          = getProcAddress("glUniformMatrix3x4dv")                          as proc_glUniformMatrix3x4dv;
    glUniformMatrix3x4fv                          = getProcAddress("glUniformMatrix3x4fv")                          as proc_glUniformMatrix3x4fv;
    glUniformMatrix4dv                            = getProcAddress("glUniformMatrix4dv")                            as proc_glUniformMatrix4dv;
    glUniformMatrix4fv                            = getProcAddress("glUniformMatrix4fv")                            as proc_glUniformMatrix4fv;
    glUniformMatrix4x2dv                          = getProcAddress("glUniformMatrix4x2dv")                          as proc_glUniformMatrix4x2dv;
    glUniformMatrix4x2fv                          = getProcAddress("glUniformMatrix4x2fv")                          as proc_glUniformMatrix4x2fv;
    glUniformMatrix4x3dv                          = getProcAddress("glUniformMatrix4x3dv")                          as proc_glUniformMatrix4x3dv;
    glUniformMatrix4x3fv                          = getProcAddress("glUniformMatrix4x3fv")                          as proc_glUniformMatrix4x3fv;
    glUniformSubroutinesuiv                       = getProcAddress("glUniformSubroutinesuiv")                       as proc_glUniformSubroutinesuiv;
    glUnmapBuffer                                 = getProcAddress("glUnmapBuffer")                                 as proc_glUnmapBuffer;
    glUseProgram                                  = getProcAddress("glUseProgram")                                  as proc_glUseProgram;
    glUseProgramStages                            = getProcAddress("glUseProgramStages")                            as proc_glUseProgramStages;
    glValidateProgram                             = getProcAddress("glValidateProgram")                             as proc_glValidateProgram;
    glValidateProgramPipeline                     = getProcAddress("glValidateProgramPipeline")                     as proc_glValidateProgramPipeline;
    glVertexAttrib1d                              = getProcAddress("glVertexAttrib1d")                              as proc_glVertexAttrib1d;
    glVertexAttrib1dv                             = getProcAddress("glVertexAttrib1dv")                             as proc_glVertexAttrib1dv;
    glVertexAttrib1f                              = getProcAddress("glVertexAttrib1f")                              as proc_glVertexAttrib1f;
    glVertexAttrib1fv                             = getProcAddress("glVertexAttrib1fv")                             as proc_glVertexAttrib1fv;
    glVertexAttrib1s                              = getProcAddress("glVertexAttrib1s")                              as proc_glVertexAttrib1s;
    glVertexAttrib1sv                             = getProcAddress("glVertexAttrib1sv")                             as proc_glVertexAttrib1sv;
    glVertexAttrib2d                              = getProcAddress("glVertexAttrib2d")                              as proc_glVertexAttrib2d;
    glVertexAttrib2dv                             = getProcAddress("glVertexAttrib2dv")                             as proc_glVertexAttrib2dv;
    glVertexAttrib2f                              = getProcAddress("glVertexAttrib2f")                              as proc_glVertexAttrib2f;
    glVertexAttrib2fv                             = getProcAddress("glVertexAttrib2fv")                             as proc_glVertexAttrib2fv;
    glVertexAttrib2s                              = getProcAddress("glVertexAttrib2s")                              as proc_glVertexAttrib2s;
    glVertexAttrib2sv                             = getProcAddress("glVertexAttrib2sv")                             as proc_glVertexAttrib2sv;
    glVertexAttrib3d                              = getProcAddress("glVertexAttrib3d")                              as proc_glVertexAttrib3d;
    glVertexAttrib3dv                             = getProcAddress("glVertexAttrib3dv")                             as proc_glVertexAttrib3dv;
    glVertexAttrib3f                              = getProcAddress("glVertexAttrib3f")                              as proc_glVertexAttrib3f;
    glVertexAttrib3fv                             = getProcAddress("glVertexAttrib3fv")                             as proc_glVertexAttrib3fv;
    glVertexAttrib3s                              = getProcAddress("glVertexAttrib3s")                              as proc_glVertexAttrib3s;
    glVertexAttrib3sv                             = getProcAddress("glVertexAttrib3sv")                             as proc_glVertexAttrib3sv;
    glVertexAttrib4Nbv                            = getProcAddress("glVertexAttrib4Nbv")                            as proc_glVertexAttrib4Nbv;
    glVertexAttrib4Niv                            = getProcAddress("glVertexAttrib4Niv")                            as proc_glVertexAttrib4Niv;
    glVertexAttrib4Nsv                            = getProcAddress("glVertexAttrib4Nsv")                            as proc_glVertexAttrib4Nsv;
    glVertexAttrib4Nub                            = getProcAddress("glVertexAttrib4Nub")                            as proc_glVertexAttrib4Nub;
    glVertexAttrib4Nubv                           = getProcAddress("glVertexAttrib4Nubv")                           as proc_glVertexAttrib4Nubv;
    glVertexAttrib4Nuiv                           = getProcAddress("glVertexAttrib4Nuiv")                           as proc_glVertexAttrib4Nuiv;
    glVertexAttrib4Nusv                           = getProcAddress("glVertexAttrib4Nusv")                           as proc_glVertexAttrib4Nusv;
    glVertexAttrib4bv                             = getProcAddress("glVertexAttrib4bv")                             as proc_glVertexAttrib4bv;
    glVertexAttrib4d                              = getProcAddress("glVertexAttrib4d")                              as proc_glVertexAttrib4d;
    glVertexAttrib4dv                             = getProcAddress("glVertexAttrib4dv")                             as proc_glVertexAttrib4dv;
    glVertexAttrib4f                              = getProcAddress("glVertexAttrib4f")                              as proc_glVertexAttrib4f;
    glVertexAttrib4fv                             = getProcAddress("glVertexAttrib4fv")                             as proc_glVertexAttrib4fv;
    glVertexAttrib4iv                             = getProcAddress("glVertexAttrib4iv")                             as proc_glVertexAttrib4iv;
    glVertexAttrib4s                              = getProcAddress("glVertexAttrib4s")                              as proc_glVertexAttrib4s;
    glVertexAttrib4sv                             = getProcAddress("glVertexAttrib4sv")                             as proc_glVertexAttrib4sv;
    glVertexAttrib4ubv                            = getProcAddress("glVertexAttrib4ubv")                            as proc_glVertexAttrib4ubv;
    glVertexAttrib4uiv                            = getProcAddress("glVertexAttrib4uiv")                            as proc_glVertexAttrib4uiv;
    glVertexAttrib4usv                            = getProcAddress("glVertexAttrib4usv")                            as proc_glVertexAttrib4usv;
    glVertexAttribBinding                         = getProcAddress("glVertexAttribBinding")                         as proc_glVertexAttribBinding;
    glVertexAttribDivisor                         = getProcAddress("glVertexAttribDivisor")                         as proc_glVertexAttribDivisor;
    glVertexAttribFormat                          = getProcAddress("glVertexAttribFormat")                          as proc_glVertexAttribFormat;
    glVertexAttribI1i                             = getProcAddress("glVertexAttribI1i")                             as proc_glVertexAttribI1i;
    glVertexAttribI1iv                            = getProcAddress("glVertexAttribI1iv")                            as proc_glVertexAttribI1iv;
    glVertexAttribI1ui                            = getProcAddress("glVertexAttribI1ui")                            as proc_glVertexAttribI1ui;
    glVertexAttribI1uiv                           = getProcAddress("glVertexAttribI1uiv")                           as proc_glVertexAttribI1uiv;
    glVertexAttribI2i                             = getProcAddress("glVertexAttribI2i")                             as proc_glVertexAttribI2i;
    glVertexAttribI2iv                            = getProcAddress("glVertexAttribI2iv")                            as proc_glVertexAttribI2iv;
    glVertexAttribI2ui                            = getProcAddress("glVertexAttribI2ui")                            as proc_glVertexAttribI2ui;
    glVertexAttribI2uiv                           = getProcAddress("glVertexAttribI2uiv")                           as proc_glVertexAttribI2uiv;
    glVertexAttribI3i                             = getProcAddress("glVertexAttribI3i")                             as proc_glVertexAttribI3i;
    glVertexAttribI3iv                            = getProcAddress("glVertexAttribI3iv")                            as proc_glVertexAttribI3iv;
    glVertexAttribI3ui                            = getProcAddress("glVertexAttribI3ui")                            as proc_glVertexAttribI3ui;
    glVertexAttribI3uiv                           = getProcAddress("glVertexAttribI3uiv")                           as proc_glVertexAttribI3uiv;
    glVertexAttribI4bv                            = getProcAddress("glVertexAttribI4bv")                            as proc_glVertexAttribI4bv;
    glVertexAttribI4i                             = getProcAddress("glVertexAttribI4i")                             as proc_glVertexAttribI4i;
    glVertexAttribI4iv                            = getProcAddress("glVertexAttribI4iv")                            as proc_glVertexAttribI4iv;
    glVertexAttribI4sv                            = getProcAddress("glVertexAttribI4sv")                            as proc_glVertexAttribI4sv;
    glVertexAttribI4ubv                           = getProcAddress("glVertexAttribI4ubv")                           as proc_glVertexAttribI4ubv;
    glVertexAttribI4ui                            = getProcAddress("glVertexAttribI4ui")                            as proc_glVertexAttribI4ui;
    glVertexAttribI4uiv                           = getProcAddress("glVertexAttribI4uiv")                           as proc_glVertexAttribI4uiv;
    glVertexAttribI4usv                           = getProcAddress("glVertexAttribI4usv")                           as proc_glVertexAttribI4usv;
    glVertexAttribIFormat                         = getProcAddress("glVertexAttribIFormat")                         as proc_glVertexAttribIFormat;
    glVertexAttribIPointer                        = getProcAddress("glVertexAttribIPointer")                        as proc_glVertexAttribIPointer;
    glVertexAttribL1d                             = getProcAddress("glVertexAttribL1d")                             as proc_glVertexAttribL1d;
    glVertexAttribL1dv                            = getProcAddress("glVertexAttribL1dv")                            as proc_glVertexAttribL1dv;
    glVertexAttribL2d                             = getProcAddress("glVertexAttribL2d")                             as proc_glVertexAttribL2d;
    glVertexAttribL2dv                            = getProcAddress("glVertexAttribL2dv")                            as proc_glVertexAttribL2dv;
    glVertexAttribL3d                             = getProcAddress("glVertexAttribL3d")                             as proc_glVertexAttribL3d;
    glVertexAttribL3dv                            = getProcAddress("glVertexAttribL3dv")                            as proc_glVertexAttribL3dv;
    glVertexAttribL4d                             = getProcAddress("glVertexAttribL4d")                             as proc_glVertexAttribL4d;
    glVertexAttribL4dv                            = getProcAddress("glVertexAttribL4dv")                            as proc_glVertexAttribL4dv;
    glVertexAttribLFormat                         = getProcAddress("glVertexAttribLFormat")                         as proc_glVertexAttribLFormat;
    glVertexAttribLPointer                        = getProcAddress("glVertexAttribLPointer")                        as proc_glVertexAttribLPointer;
    glVertexAttribP1ui                            = getProcAddress("glVertexAttribP1ui")                            as proc_glVertexAttribP1ui;
    glVertexAttribP1uiv                           = getProcAddress("glVertexAttribP1uiv")                           as proc_glVertexAttribP1uiv;
    glVertexAttribP2ui                            = getProcAddress("glVertexAttribP2ui")                            as proc_glVertexAttribP2ui;
    glVertexAttribP2uiv                           = getProcAddress("glVertexAttribP2uiv")                           as proc_glVertexAttribP2uiv;
    glVertexAttribP3ui                            = getProcAddress("glVertexAttribP3ui")                            as proc_glVertexAttribP3ui;
    glVertexAttribP3uiv                           = getProcAddress("glVertexAttribP3uiv")                           as proc_glVertexAttribP3uiv;
    glVertexAttribP4ui                            = getProcAddress("glVertexAttribP4ui")                            as proc_glVertexAttribP4ui;
    glVertexAttribP4uiv                           = getProcAddress("glVertexAttribP4uiv")                           as proc_glVertexAttribP4uiv;
    glVertexAttribPointer                         = getProcAddress("glVertexAttribPointer")                         as proc_glVertexAttribPointer;
    glVertexBindingDivisor                        = getProcAddress("glVertexBindingDivisor")                        as proc_glVertexBindingDivisor;
    glViewport                                    = getProcAddress("glViewport")                                    as proc_glViewport;
    glViewportArrayv                              = getProcAddress("glViewportArrayv")                              as proc_glViewportArrayv;
    glViewportIndexedf                            = getProcAddress("glViewportIndexedf")                            as proc_glViewportIndexedf;
    glViewportIndexedfv                           = getProcAddress("glViewportIndexedfv")                           as proc_glViewportIndexedfv;
    glWaitSync                                    = getProcAddress("glWaitSync")                                    as proc_glWaitSync;
}

