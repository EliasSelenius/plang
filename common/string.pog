

struct string {
    char* chars;
    uint32 length;
}


/*
    it should be easy to implement this, just check if the pointer lies within the static memory region
    bool is_static_string(string str)
    bool is_static_string(char* str)
    this is a very cool function because we can check the ownership of a pice of memory at runtime

*/


string make_string(char* c_str) {
    string str = { c_str, strlen(c_str) };
    return str;
}

// TODO: shouldnt this be a pow overload in math.pog
uint64 pow_uint64(uint64 x, uint64 y) {
    uint64 res = 1;
    for 0 .. y  res *= x;
    return res;
}

uint64 parse_int(string str) {
    uint64 res = 0;
    for i : 0 .. str.length {
        let c = str.chars[i] - '0';
        res += c * pow_uint64(10, (str.length - i - 1) as uint64);
    }
    return res;
}

uint64 parse_int(char* c_str) {
    uint32 len;
    return parse_int(c_str, *len);
}
uint64 parse_int(char* c_str, uint32* length) {
    char* c = c_str;
    while is_digit(@c)  c++;

    @length = (c - c_str) as uint32;

    string str = { c_str, @length };
    return parse_int(str);
}

float64 parse_float(char* c_str) {
    uint32 len;
    return parse_float(c_str, *len);
}
float64 parse_float(char* c_str, uint32* length) {

    char* start = c_str;

    float64 sign = 1;
    if c_str[0] == '-' {
        sign = -1;
        c_str++;
    }

    uint32 len;
    let int_part = parse_int(c_str, *len) as float64;
    c_str += len;

    if @c_str != '.' {
        @length = (c_str - start) as uint32;
        return int_part * sign;
    }

    c_str++;
    let frac_part = parse_int(c_str, *len) as float64;
    let denom = pow_uint64(10, len) as float64;

    @length = (c_str - start) as uint32 + len;
    return (int_part + (frac_part / denom)) * sign;
}


// TODO: make signed overloads
string to_string(uint32 num) { return to_string(num as uint64); }
string to_string(uint64 num) {

    // TODO: make this a fixed array, so we dont have to malloc
    // static char* num_str = malloc(21); // 20 is max char size for 64 bit integer
    static char[21] num_str = {};

    if num == 0 return {"0", 1} as string;
    uint32 i = 20;

    while num != 0 {
        let r = (num % 10) as uint8;
        num /= 10;
        num_str[--i] = '0' + r as char;
    }

    return { *num_str[i], 20 - i } as string;
}


bool string_equals(string a, string b) {
    if a.length != b.length return false;
    for i : 0 .. a.length if a.chars[i] != b.chars[i] return false;
    return true;
}

bool starts_with(char* text, char* start) {
    int32 i = 0;
    while start[i] {
        if start[i] != text[i] return false;
        i++;
    }

    return true;
}

string substr_until(char* str, char delim) {
    string res = { str, 0 };

    uint32 i = 0;
    while str[i] and str[i] != delim  i++;

    res.length = i;
    if str[res.length] == delim  res.length++; // resulting string contains delim, but not zero-term
    return res;
}

string substr_until(string str, char delim) {
    string res = str;

    for uint32 it : 0 .. str.length {
        if str.chars[it] == delim {
            res.length = it + 1;
            break;
        }
    }

    return res;
}

string substr_to_end(string str, char start) {
    int64 i = str.length - 1;
    while (i >= 0 and str.chars[i] != start) i--;
    return { *str.chars[i], str.length - i };
}

// string[2] split_once(string str, char delim) {
//     string[2] res = {};
//     res[0] = str;
//     for 0 .. str.length {
//         if str.chars[it] == delim {

//         }
//     }

//     return res;
// }

char* trim_starting_whitespace(char* c_str) {
    while is_whitespace(@c_str) c_str++;
    return c_str;
}

string trim_start(string str, uint32 len) { return { str.chars + len, str.length - len }; }
string trim_end(string str, uint32 len) { return { str.chars, str.length - len }; }
string trim(string str, uint32 len) { return { str.chars + len, str.length - len*2 }; }

string trim_start(string str, char c) {
    uint32 count = 0;
    while str.chars[count] == c  count++;
    return trim_start(str, count);
}

string trim_end(string str, char c) {
    uint32 count = 0;
    while str.chars[str.length-1 - count] == c  count++;
    return trim_end(str, count);
}

string trim(string str, char c) {
    return trim_start(trim_end(str, c), c);
}

bool is_whitespace(char c) { return c == ' ' or c == '\n' or c == '\t'; }
bool is_whitespace_or_null(char c) { return is_whitespace(c) or c == 0; }
bool is_upper_case_letter(char c) { return c >= 'A' and c <= 'Z'; }
bool is_lower_case_letter(char c) { return c >= 'a' and c <= 'z'; }
bool is_letter(char c) { return is_lower_case_letter(c) or is_upper_case_letter(c); }
bool is_digit(char c) { return c >= '0' and c <= '9'; }
bool is_hexdigit(char c) { return is_digit(c) or (c >= 'a' and c <= 'f') or (c >= 'A' and c <= 'F'); }
bool is_alphanumeric(char c) { return is_letter(c) or is_digit(c); }
bool is_punctuation(char c) {
    return (c >= '!' and c <= '/')
        or (c >= ':' and c <= '@')
        or (c >= '[' and c <= '`')
        or (c >= '{' and c <= '~');
}

bool is_whitespace_or_empty(string str) {
    for 0 .. str.length {
        if !is_whitespace(str.chars[it]) return false;
    }

    return true;
}

string alloc_string_copy(char* str) { return alloc_string_copy(make_string(str)); }
string alloc_string_copy(string str) {
    string res = {};
    res.length = str.length;
    res.chars = malloc(str.length + 1);

    for 0 .. str.length {
        res.chars[it] = str.chars[it];
    }
    res.chars[str.length] = 0 as char;

    return res;
}


// Levenshtein edit distance
//   naive implementation
//   TODO: maybe implement Wagner-Fischer algorithm
uint32 lev(string a, string b) {
    string tail(string str) {
        return { str.chars + 1, str.length - 1 };
    }

    if a.length == 0 return b.length;
    if b.length == 0 return a.length;

    if a.chars[0] == b.chars[0] return lev(tail(a), tail(b));

    uint32 i = lev(tail(a), b);
    i = min(i, lev(a, tail(b)));
    i = min(i, lev(tail(a), tail(b)));

    return i + 1;
}





// ------------String-Builder-------------------

struct StringBuilder {
    char* content;
    uint32 capacity;
    uint32 length;
}

string to_string(StringBuilder sb)  return {sb.content, sb.length};
string to_string(StringBuilder* sb) return {sb.content, sb.length};


StringBuilder* alloc_temp_builders(uint32 count) {
    StringBuilder* temps = malloc(count * sizeof StringBuilder);
    for 0 .. count {
        temps[it] = sb_create();
    }
    return temps;
}

StringBuilder* temp_builder() {
    const builder_count = 8;
    static StringBuilder* temps = alloc_temp_builders(builder_count);
    static uint32 rotation = 0;
    let sb = *temps[rotation++ % builder_count];
    sb_clear(sb);
    return sb;
}


/* TODO: all these overloads are stupid. something like this would be better:
    char* concat(any[] params...) {
        let sb = temp_builder();
        for 0 .. params.length   sb_append(sb, params[it]);
        return sb.content;
    }
*/

char* concat(char* a, b)        { let sb = temp_builder(); sb_append(sb, a); sb_append(sb, b); return sb.content; }
char* concat(char* a, string b) { let sb = temp_builder(); sb_append(sb, a); sb_append(sb, b); return sb.content; }
char* concat(string a, char* b) { let sb = temp_builder(); sb_append(sb, a); sb_append(sb, b); return sb.content; }
char* concat(string a, b)       { let sb = temp_builder(); sb_append(sb, a); sb_append(sb, b); return sb.content; }

char* concat(char* a, b, c) { let sb = temp_builder(); sb_append(sb, a); sb_append(sb, b); sb_append(sb, c); return sb.content; }
char* concat(string a, b, c) { let sb = temp_builder(); sb_append(sb, a); sb_append(sb, b); sb_append(sb, c); return sb.content; }
char* concat(char* a, string b, char* c) { let sb = temp_builder(); sb_append(sb, a); sb_append(sb, b); sb_append(sb, c); return sb.content; }

StringBuilder sb_create() {
    StringBuilder sb = {};
    sb.length = 0;
    sb.capacity = 16;

    sb.content = malloc(sb.capacity);
    sb.content[0] = 0 as char; // TODO: ambint should be assignable to char

    return sb;
}

void sb_free(StringBuilder sb) {
    free(sb.content);
}

void sb_grow(StringBuilder* sb, uint32 len) {
    len += sb.length;

    // note that the <= here is so that we have space for null termination
    if sb.capacity <= len {
        sb.capacity *= 2;
        while sb.capacity <= len   sb.capacity *= 2;

        sb.content = realloc(sb.content, sb.capacity);
    }
}

void sb_append(StringBuilder* sb, char* str) sb_append(sb, make_string(str));
void sb_append(StringBuilder* sb, string str) {
    sb_grow(sb, str.length);
    for i : 0 .. str.length  sb.content[sb.length++] = str.chars[i];
    sb.content[sb.length] = 0 as char;
}

void sb_append(StringBuilder* sb, char c) {
    sb_grow(sb, 1);
    sb.content[sb.length++] = c;
    sb.content[sb.length] = 0 as char;
}

void sb_append(StringBuilder* sb, float32 f) {
    uint32 bits = @(*f as uint32*);
    // print("float: ", f, " bits: ", bits, "\n");

    if bits&0x8000_0000  sb_append(sb, "-");

    if bits == 0x7f80_0000 or bits == 0xff80_0000 {
        sb_append(sb, "Infinity");
    } else if is_nan(f) {
        sb_append(sb, "NaN");
    } else {
        sb_append(sb, to_string(abs(f) as uint64));
        sb_append(sb, ".");

        let frac = to_string(round(fract(abs(f)) * 1_000_000) as uint64);
        for 0 .. 6 - frac.length   sb_append(sb, '0');
        sb_append(sb, frac);
    }
}

void sb_append(StringBuilder* sb, vec2 v) {
    sb_append(sb, v.x);
    sb_append(sb, ", ");
    sb_append(sb, v.y);
}

void sb_insert(StringBuilder* sb, uint32 loc, string str) {
    sb_grow(sb, str.length);

    int64 i = sb.length;
    while i >= loc {
        sb.content[i + str.length] = sb.content[i];
        i--;
    }

    sb.length += str.length;

    for n : 0 .. str.length {
        sb.content[loc + n] = str.chars[n];
    }
}

void sb_remove(StringBuilder* sb, uint32 loc, uint32 num_chars) {
    uint32 i = loc;
    while i <= sb.length {
        sb.content[i] = sb.content[i + num_chars];
        i++;
    }

    // for uint32 i : loc .. sb.length+1 {}

    // for uint32 i = loc, i <= sb.length, i++ {
    //     sb.content[i] = sb.content[i + num_chars];
    // }

    sb.length -= num_chars;
}

void sb_truncate_length(StringBuilder* sb, uint32 new_len) {
    sb.length = new_len;
    sb.content[new_len] = 0 as char;
}

void sb_clear(StringBuilder* sb) {
    sb.length = 0;
    sb.content[0] = 0 as char;
}


// ------------String-Reader---(generic-tokenizer)----------------

struct StringReader {
    char* current;
    uint32 line;
    uint32 column;
}

struct SR_Token {
    string str;
    uint32 line;
    uint32 column;
}

// SR_Token read_token(with StringReader* sr) {
//     if @sr.current == 0  return 
// }