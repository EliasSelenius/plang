

struct string {
    char* chars;
    uint32 length;
}

string make_string(char* c_str) {
    string str = { c_str, strlen(c_str) };
    return str;
}

uint64 pow_uint64(uint64 x, uint64 y) {
    uint64 res = 1;
    for 0 .. y  res *= x;
    return res;
}

uint64 parse_int(string str) {
    uint64 res = 0;
    for i : 0 .. str.length {
        let c = str.chars[i] as uint8 - '0';
        res += c * pow_uint64(10, str.length - i - 1);
    }
    return res;
}

uint64 parse_int(char* c_str) {
    uint32 len;
    return parse_int(c_str, *len);
}
uint64 parse_int(char* c_str, uint32* length) {
    char* c = c_str;
    while is_digit(@c)  c++;

    @length = c - c_str;

    string str = { c_str, @length };
    return parse_int(str);
}

float64 parse_float(char* c_str) {
    uint32 len;
    let int_part = parse_int(c_str, *len) as float64;
    c_str += len;
    if @c_str != '.' return int_part;
    c_str++;
    let frac_part = parse_int(c_str, *len) as float64;
    let denom = pow_uint64(10, len) as float64;
    return int_part + (frac_part / denom);
}


string to_string(uint64 num) {

    // TODO: make this a fixed array, so we dont have to malloc
    static char* num_str = malloc(20); // 20 is max char size for 64 bit integer

    if num == 0 return {"0", 1} as string;
    uint32 i = 20;

    while num != 0 {
        let r = (num % 10) as uint8;
        num /= 10;
        num_str[--i] = '0' + r as char;
    }

    return { *num_str[i], 20 - i } as string;
}


// TODO: dont use int32 as boolean, implement bool type in compiler
int32 string_equals(string a, string b) {
    if a.length != b.length return false;
    for i : 0 .. a.length if a.chars[i] != b.chars[i] return false;
    return true;
}

int32 starts_with(char* text, char* start) {
    int32 i = 0;
    while start[i] {
        if start[i] != text[i] return false;
        i++;
    }

    return true;
}

string substr_until(char* str, char delim) {
    string res = { str, 0 };

    uint32 i = 0;
    while str[i] and str[i] != delim  i++;

    res.length = i;
    return res;
}

char* trim_starting_whitespace(char* c_str) {
    while is_whitespace(@c_str) c_str++;
    return c_str;
}

int32 is_whitespace(char c) { return c == ' ' or c == '\n' or c == '\t'; }
int32 is_upper_case_letter(char c) { return c >= 'A' and c <= 'Z'; }
int32 is_lower_case_letter(char c) { return c >= 'a' and c <= 'z'; }
int32 is_letter(char c) { return is_lower_case_letter(c) or is_upper_case_letter(c); }
int32 is_digit(char c) { return c >= '0' and c <= '9'; }
int32 is_hexdigit(char c) { return is_digit(c) or (c >= 'a' and c <= 'f') or (c >= 'A' and c <= 'F'); }
int32 is_alphanumeric(char c) { return is_letter(c) or is_digit(c); }
int32 is_punctuation(char c) {
    return (c >= '!' and c <= '/')
        or (c >= ':' and c <= '@')
        or (c >= '[' and c <= '`')
        or (c >= '{' and c <= '~');
}

int32 is_whitespace_or_empty(string str) {
    for 0 .. str.length {
        if !is_whitespace(str.chars[it]) return false;
    }

    return true;
}

// Levenshtein edit distance
//   naive implementation
//   TODO: maybe implement Wagner-Fischer algorithm
// int32 lev(string a, string b) {
//     string tail(string str) {
//         return { str.chars as uint64 + 1, str.length - 1 } as string;
//     }

//     if a.length == 0 return b.length as int32;
//     if b.length == 0 return a.length as int32;

//     if a.chars[0] == b.chars[0] return lev(tail(a), tail(b));

//     int32 i = lev(tail(a), b);
//     i = min(i, lev(a, tail(b)));
//     i = min(i, lev(tail(a), tail(b)));

//     return i + 1;
// }





// ------------String-Builder-------------------

struct StringBuilder {
    char* content;
    uint32 capacity;
    uint32 length;
}

string to_string(StringBuilder sb) {
    return {sb.content, sb.length} as string;
}

StringBuilder sb_create() {
    StringBuilder sb;
    sb.length = 0;
    sb.capacity = 16;

    sb.content = malloc(sb.capacity);
    sb.content[0] = 0 as char; // TODO: ambint should be assignable to char

    return sb;
}

void sb_free(StringBuilder sb) {
    free(sb.content);
}

void sb_grow(StringBuilder* sb, uint32 len) {
    len += sb.length;

    // note that the <= here is so that we have space for null termination
    if sb.capacity <= len {
        sb.capacity *= 2;
        while sb.capacity <= len   sb.capacity *= 2;

        sb.content = realloc(sb.content, sb.capacity);
    }
}

void sb_append(StringBuilder* sb, string str) {
    sb_grow(sb, str.length);

    for i : 0 .. str.length  sb.content[sb.length++] = str.chars[i];

    sb.content[sb.length] = 0 as char;
}

void sb_append(StringBuilder* sb, char* str) {
    let len = strlen(str) as uint32;
    sb_grow(sb, len);

    while @str  sb.content[sb.length++] = @(str++);

    sb.content[sb.length] = 0 as char;
}

void sb_append(StringBuilder* sb, char c) {
    sb_grow(sb, 1);
    sb.content[sb.length++] = c;
    sb.content[sb.length] = 0 as char;
}

void sb_insert(StringBuilder* sb, int32 loc, string str) {
    sb_grow(sb, str.length);

    int32 i = sb.length as int32;
    while i >= loc {
        sb.content[i + str.length] = sb.content[i];
        i--;
    }

    sb.length += str.length;

    for n : 0 .. str.length {
        sb.content[loc + n] = str.chars[n];
    }
}

void sb_remove(StringBuilder* sb, int32 loc, uint32 num_chars) {
    int32 i = loc;
    while i <= sb.length {
        sb.content[i] = sb.content[i + num_chars];
        i++;
    }

    sb.length -= num_chars;
}

void sb_clear(StringBuilder* sb) {
    sb.length = 0;
}


// ------------String-Reader---(generic-tokenizer)----------------

struct StringReader {
    char* current;
}